{
  "circa": {
    "title": "Vader Protocol contest",
    "sponsor": "Vader Protocol",
    "slug": "2021-11-vader",
    "date": "2022-02-10",
    "findings": "https://github.com/code-423n4/2021-11-vader-findings/issues",
    "contest": 52
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Vader Protocol contest smart contract system written in Solidity. The code contest took place between November 9—November 15 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>29 Wardens contributed reports to the Vader Protocol contest:</p>\n<ol>\n<li><a href=\"https://github.com/TomAFrench\">TomFrenchBlockchain</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li>jayjonah8</li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li>shri4net</li>\n<li><a href=\"https://twitter.com/xYrYuYx\">xYrYuYx</a></li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/jonah1005w\">jonah1005</a></li>\n<li>Reigada</li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/liam_eastwood13\">leastwood</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/hack3r_0m\">hack3r-0m</a></li>\n<li>hyh</li>\n<li>elprofesor</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li><a href=\"https://twitter.com/Meta0xNull\">Meta0xNull</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li>pants</li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li>ksk2345</li>\n<li>fatima_naz</li>\n<li><a href=\"https://twitter.com/n4th4n131?t=ZXGbALC3q6JMMoolZddgHg&#x26;s=09\">nathaniel</a></li>\n<li>mics</li>\n<li><a href=\"https://github.com/0xean\">0xean</a></li>\n<li>0x0x0x</li>\n<li><a href=\"https://twitter.com/Adrian41434783/\">evo5555</a></li>\n<li>m3kk_kn1ght</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/alcueca\">Alberto Cuesta Cañada</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 98 unique vulnerabilities and 190 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 34 received a risk rating in the category of HIGH severity, 23 received a risk rating in the category of MEDIUM severity, and 41 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 36 non-critical recommendations and 56 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-11-vader\">C4 Vader Protocol contest repository</a>, and is composed of 87 smart contracts written in the Solidity programming language and includes 7573 lines of Solidity code and 95 lines of JavaScript.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-34\" style=\"position:relative;\"><a href=\"#high-risk-findings-34\" aria-label=\"high risk findings 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (34)</h1>\n<h2 id=\"h-01-minting-and-burning-synths-exposes-users-to-unlimited-slippage\" style=\"position:relative;\"><a href=\"#h-01-minting-and-burning-synths-exposes-users-to-unlimited-slippage\" aria-label=\"h 01 minting and burning synths exposes users to unlimited slippage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/2\">[H-01] Minting and burning synths exposes users to unlimited slippage</a></h2>\n<p><em>Submitted by TomFrenchBlockchain, also found by cmichel</em></p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The amount of synths minted / assets received when minting or burning synths can be manipulated to an unlimited extent by manipulating the reserves of the pool</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>See <code>VaderPool.mintSynth</code>:\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L167\">https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L167</a></p>\n<p>Here a user sends <code>nativeDeposit</code> to the pool and the equivalent amount of <code>foreignAsset</code> is minted as a synth to be sent to the user. However the user can’t specify the minimum amount of synth that they would accept. A frontrunner can then manipulate the reserves of the pool in order to make <code>foreignAsset</code> appear more valuable than it really is so the user receives synths which are worth much less than what <code>nativeDeposit</code> is worth. This is equivalent to a swap without a slippage limit.</p>\n<p>Burning synths essentially runs the same process in behalf so manipulating the pool in the opposite direction will result in the user getting fewer of <code>nativeAsset</code> than they expect.</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a argument for the minimum amount of synths to mint or nativeAsset to receive.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/2#issuecomment-979099464\">SamSteinGG (Vader) acknowledged and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>We believe the severity should be set to medium as there are no loss of funds and its exploit requires special circumstances to be profitable.</p>\n</blockquote>\n<h2 id=\"h-02-redemption-value-of-synths-can-be-manipulated-to-drain-vaderpool-of-all-native-assets\" style=\"position:relative;\"><a href=\"#h-02-redemption-value-of-synths-can-be-manipulated-to-drain-vaderpool-of-all-native-assets\" aria-label=\"h 02 redemption value of synths can be manipulated to drain vaderpool of all native assets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/3\">[H-02] Redemption value of synths can be manipulated to drain <code>VaderPool</code> of all native assets</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Draining of funds from <code>VaderPool</code></p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>See the <code>VaderPool.mintSynth</code> function:\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L167\">https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L167</a></p>\n<p>As the pool’s reserves can be manipulated through flashloans similar to on UniswapV2, an attacker may set the exchange rate between <code>nativeAsset</code> and synths (calculated from the reserves). An attacker can exploit this to drain funds from the pool.</p>\n<ol>\n<li>The attacker first flashloans and sells a huge amount of <code>foreignAsset</code> to the pool. The pool now thinks <code>nativeAsset</code> is extremely valuable.</li>\n<li>The attacker now uses a relatively small amount of <code>nativeAsset</code> to mint synths using <code>VaderPool.mintSynth</code>. As the pool thinks <code>nativeAsset</code> is very valuable the attacker will receive a huge amount of synths.</li>\n<li>The attacker can now manipulate the pool in the opposite direction by buying up the <code>foreignAsset</code> they sold to the pool. <code>nativeAsset</code> is now back at its normal price, or perhaps artificially low if the attacker wishes.</li>\n<li>The attacker now burns all of their synths. As <code>nativeAsset</code> is considered much less valuable than at the point the synths were minted it takes a lot more of <code>nativeAsset</code> in order to pay out for the burned synths.</li>\n</ol>\n<p>For the price of a flashloan and some swap fees, the attacker has now managed to extract a large amount of <code>nativeAsset</code> from the pool. This process can be repeated as long as it is profitable.</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Prevent minting of synths or at the very least tie the exchange rate to a manipulation resistant oracle.</p>\n<h2 id=\"h-03-vader-contains-a-fee-on-transfer\" style=\"position:relative;\"><a href=\"#h-03-vader-contains-a-fee-on-transfer\" aria-label=\"h 03 vader contains a fee on transfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/11\">[H-03] VADER contains a Fee-On-Transfer</a></h2>\n<p><em>Submitted by jayjonah8, also found by rfa, shri4net, and xYrYuYx</em></p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The whitepaper says that the Vader token contains a Fee-On-Transfer so in XVader.sol, an attacker may be able to keep calling <code>enter()</code> and <code>leave()</code> while being credited more tokens than the contract actually receives eventually draining it.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Attacker deposits 500 Vader</li>\n<li>Attacker receives credit for 500 while the xVader contract gets the 500 - fee.</li>\n<li>Attacker calls <code>leave()</code> leaving the contract with a difference of the fee.</li>\n<li><a href=\"https://www.financegates.net/2021/07/28/another-polygon-yield-farm-crashes-to-zero-after-exploit/\">https://www.financegates.net/2021/07/28/another-polygon-yield-farm-crashes-to-zero-after-exploit/</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/x-vader/XVader.sol\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/x-vader/XVader.sol</a></li>\n<li><a href=\"https://www.vaderprotocol.io/whitepaper\">https://www.vaderprotocol.io/whitepaper</a></li>\n</ol>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manually code review</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>There should be pre and post checks on balances to get the real amount</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/11#issuecomment-969525646\">0xstormtrooper (Vader) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Vader fee on transfer will be removed</p>\n</blockquote>\n<h2 id=\"h-04-twaporacle-doesnt-calculate-vaderusdv-exchange-rate-correctly\" style=\"position:relative;\"><a href=\"#h-04-twaporacle-doesnt-calculate-vaderusdv-exchange-rate-correctly\" aria-label=\"h 04 twaporacle doesnt calculate vaderusdv exchange rate correctly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/19\">[H-04] TwapOracle doesn’t calculate VADER:USDV exchange rate correctly</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Detailed description of the impact of this finding.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L156\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L156</a></p>\n<p>On L156 of <code>TwapOracle</code> we perform the calculation:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">result = ((sumUSD * IERC20Metadata(token).decimals()) / sumNative);</span></span></code></pre>\n<p>This seems extremely odd as for an 18 decimal token we’re then calculating</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">result = ((sumUSD * 18) / sumNative);</span></span></code></pre>\n<p>This is just plain weird. I expect what was meant is to replace this line with the below so we’re properly scaling for <code>token</code>’s number of decimals.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 scalingFactor = 10 ** IERC20Metadata(token).decimals()</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">result = (sumUSD * scalingFactor) / sumNative;</span></span></code></pre>\n<p>Marked as high severity as this exchange rate appears to be used in <a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/tokens/Vader.sol#L18-L19\">some form of minting mechanism</a> and correctness of the oracle is listed as one of the key focuses of the audit.</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>As above.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/19\">SamSteinGG (Vader) confirmed</a></strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"h-05-lps-of-vaderpoolv2-can-manipulate-pool-reserves-to-extract-funds-from-the-reserve\" style=\"position:relative;\"><a href=\"#h-05-lps-of-vaderpoolv2-can-manipulate-pool-reserves-to-extract-funds-from-the-reserve\" aria-label=\"h 05 lps of vaderpoolv2 can manipulate pool reserves to extract funds from the reserve permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/31\">[H-05] LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve.</a></h2>\n<p><em>Submitted by TomFrenchBlockchain, also found by WatchPug</em></p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Impermanent loss protection can be exploited to drain the reserve.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>In <code>VaderPoolV2.burn</code> we calculate the current losses that the LP has made to impermanent loss.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/pool/VaderPoolV2.sol#L237-L269\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/pool/VaderPoolV2.sol#L237-L269</a></p>\n<p>These losses are then refunded to the LP in VADER tokens from the reserve</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/router/VaderRouterV2.sol#L208-L227\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/router/VaderRouterV2.sol#L208-L227</a></p>\n<p>This loss is calculated by the current reserves of the pool so if an LP can manipulate the pool’s reserves they can artificially engineer a huge amount of IL in order to qualify for a payout up to the size of their LP position.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/math/VaderMath.sol#L73-L93\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/math/VaderMath.sol#L73-L93</a></p>\n<p>The attack is then as follows.</p>\n<ol>\n<li>Be an LP for a reasonable period of time (IL protection scales linearly up to 100% after a year)</li>\n<li>Flashloan a huge amount of one of the pool’s assets.</li>\n<li>Trade against the pool with the flashloaned funds to unbalance it such that your LP position has huge IL.</li>\n<li>Remove your liquidity and receive compensation from the reserve for the IL you have engineered.</li>\n<li>Re-add your liquidity back to the pool.</li>\n<li>Trade against the pool to bring it back into balance.</li>\n</ol>\n<p>The attacker now holds the majority of their flashloaned funds (minus slippage/swap fees) along with a large fraction of the value of their LP position in VADER paid out from the reserve. The value of their LP position is unchanged. Given a large enough LP position, the IL protection funds extracted from the reserve will exceed the funds lost to swap fees and the attacker will be able to repay their flashloan with a profit.</p>\n<p>This is a high risk issue as after a year any large LP is incentivised and able to perform this attack.</p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use a manipulation resistant oracle for the relative prices of the pool’s assets (TWAP, etc.)</p>\n<h2 id=\"h-06-paying-il-protection-for-all-vaderpool-pairs-allows-the-reserve-to-be-drained\" style=\"position:relative;\"><a href=\"#h-06-paying-il-protection-for-all-vaderpool-pairs-allows-the-reserve-to-be-drained\" aria-label=\"h 06 paying il protection for all vaderpool pairs allows the reserve to be drained permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/34\">[H-06] Paying IL protection for all VaderPool pairs allows the reserve to be drained.</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-5\" style=\"position:relative;\"><a href=\"#impact-5\" aria-label=\"impact 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Vader Reserve can be drained of funds.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>In <code>VaderPoolV2.burn</code> we calculate the current losses that the LP has made to impermanent loss.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/pool/VaderPool.sol#L77-L89\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/pool/VaderPool.sol#L77-L89</a></p>\n<p>These losses are then refunded to the LP in VADER tokens from the reserve. NOTE: This IL protection is paid for ALL token pairs. THIS IS IMPORTANT!</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/router/VaderRouter.sol#L187-L206\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/router/VaderRouter.sol#L187-L206</a></p>\n<p>The loss is calculated by the comparing the amounts of each asset initially added to the pool against the amounts of each asset which are removed from the pool. There’s an unspoken assumption here that the LP entered the pool at the true price at that point.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/math/VaderMath.sol#L73-L93\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/math/VaderMath.sol#L73-L93</a></p>\n<p>Crucially we see that if an attacker can cheaply create a pool with a token which starts off with a very low price in terms of VADER and is guaranteed to have a very high price in terms of VADER then they will benefit from a large amount of IL protection funds from the reserve.</p>\n<p>An attacker could then perform this attack with the following.</p>\n<ol>\n<li>Flashloan a huge amount of Vader (or flashloan + buy VADER).</li>\n<li>Deploy a token TKN, which the attacker can mint as much as they like.</li>\n<li>Add liquidity to a new pool with a large amount of VADER and a small amount of TKN</li>\n<li>Use their ability to mint TKN to buy up all the VADER in their pool</li>\n<li>Repay flashloan with VADER extracted from pool + some pre-existing funds as attacker needs to cover VADER lost to swap fees/slippage.</li>\n</ol>\n<p>The attacker has now engineered a liquidity position which looks massively underwater due to IL but in reality was very cheap to produce. Nobody else can do anything to this pool except just give the attacker money by buying TKN so this attack can’t be prevented. The attacker now just needs to wait for at most a year for the IL protection to tick up and then they can cash in the LP position for a nice payday of up to the amount of VADER they initially added to the pool.</p>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a whitelist to the pairs which qualify for IL protection.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/34#issuecomment-979130824\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>Predicting the price fluctuations of an asset is impossible. An attacker cannot create a pool arbitrarily as that is governed by a special whitelist function that is in turn voted on by the DAO.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/34#issuecomment-991500803\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>As we saw in other issues, the creation of pools is permissionless</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/34#issuecomment-995760208\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca Again, there seems to be confusion as to the versions utilized. The submitter references the Vader V2 implementation in which pool creations are indeed permissioned (via the add supported token function) as the Vader pool factory is only relevant to the V1 implementation.</p>\n</blockquote>\n<h2 id=\"h-07-vaderreserve-does-not-support-paying-il-protection-out-to-more-than-one-address-resulting-in-locked-funds\" style=\"position:relative;\"><a href=\"#h-07-vaderreserve-does-not-support-paying-il-protection-out-to-more-than-one-address-resulting-in-locked-funds\" aria-label=\"h 07 vaderreserve does not support paying il protection out to more than one address resulting in locked funds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/37\">[H-07] VaderReserve does not support paying IL protection out to more than one address, resulting in locked funds</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-6\" style=\"position:relative;\"><a href=\"#impact-6\" aria-label=\"impact 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>All liquidity deployed to one of <code>VaderPool</code> or <code>VaderPoolV2</code> will be locked permanently.</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Both <code>VaderRouter</code> and <code>VaderRouterV2</code> make calls to <code>VaderReserve</code> in order to pay out IL protection.</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/router/VaderRouter.sol#L206\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/router/VaderRouter.sol#L206</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/router/VaderRouterV2.sol#L227\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/router/VaderRouterV2.sol#L227</a></li>\n</ul>\n<p>However <code>VaderReserve</code> only allows a single router to claim IL protection on behalf of users.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/reserve/VaderReserve.sol#L80-L83\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/reserve/VaderReserve.sol#L80-L83</a></p>\n<p>It’s unlikely that the intent is to deploy multiple reserves so there’s no way for both <code>VaderRouter</code> and <code>VaderRouterV2</code> to pay out IL protection simultaneously.</p>\n<p>This is a high severity issue as any LPs which are using the router which is not listed on <code>VaderReserve</code> will be unable to remove liquidity as the call to the reserve will revert. Vader governance is unable to update the allowed router on <code>VaderReserve</code> so all liquidity on either <code>VaderPool</code> or <code>VaderPoolV2</code> will be locked permanently.</p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Options:</p>\n<ol>\n<li>Allow the reserve to whitelist multiple addresses to claim funds</li>\n<li>Allow the call to the reserve to fail without reverting the entire transaction (probably want to make this optional for LPs)</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/37#issuecomment-979131742\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p> As the code indicates, only one of the two versioned instances of the AMM will be deployed and active at any given time rendering this exhibit incorrect.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/37#issuecomment-991499561\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Sorry @SamSteinGG, where does the code indicate that?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/37#issuecomment-995759254\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Correction, this was clarified during the audit in the discord channel.</p>\n</blockquote>\n<h2 id=\"h-08-usdv-and-vader-rate-can-be-wrong\" style=\"position:relative;\"><a href=\"#h-08-usdv-and-vader-rate-can-be-wrong\" aria-label=\"h 08 usdv and vader rate can be wrong permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/50\">[H-08] USDV and VADER rate can be wrong</a></h2>\n<p><em>Submitted by xYrYuYx</em></p>\n<h4 id=\"impact-7\" style=\"position:relative;\"><a href=\"#impact-7\" aria-label=\"impact 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L166\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L166</a></p>\n<p><code>tUSDInUSDV</code> can be smaller than <code>tUSDInVader</code>, and then <code>getRate</code> will return 0.\nThis will lead wrong rate calculation.</p>\n<h4 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manually</p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Multiple enough decimals before division</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/50\">SamSteinGG (Vader) confirmed</a></strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"h-09-vaderpoolv2-incorrectly-calculates-the-amount-of-il-protection-to-send-to-lps\" style=\"position:relative;\"><a href=\"#h-09-vaderpoolv2-incorrectly-calculates-the-amount-of-il-protection-to-send-to-lps\" aria-label=\"h 09 vaderpoolv2 incorrectly calculates the amount of il protection to send to lps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/54\">[H-09] VaderPoolV2 incorrectly calculates the amount of IL protection to send to LPs</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-8\" style=\"position:relative;\"><a href=\"#impact-8\" aria-label=\"impact 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>VaderReserve</code> pays out IL from <code>VaderPoolV2</code> LPs expressed in USDV with VADER (assuming a 1:1 exchange rate)</p>\n<h4 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>From the TwapOracle, it can be seen that <code>VaderPoolV2</code> is intended to be deployed with USDV as its <code>nativeAsset</code>:</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L281-L296\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L281-L296</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/pool/BasePoolV2.sol#L58-L59\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/pool/BasePoolV2.sol#L58-L59</a></li>\n</ul>\n<p>All the pairs in <code>VaderPoolV2</code> are then USDV:TKN where TKN is some other token, exactly which is irrelevant in this case.</p>\n<p><code>VaderPoolV2</code> offers IL protection where any IL is refunded from the <code>VaderReserve</code></p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/pool/VaderPoolV2.sol#L258-L268\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex-v2/pool/VaderPoolV2.sol#L258-L268</a></p>\n<p>The <code>VaderReserve</code> holds a balance of VADER tokens which will be used to pay out this protection.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/reserve/VaderReserve.sol#L76-L90\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/reserve/VaderReserve.sol#L76-L90</a></p>\n<p>The IL experienced by the LP is calculated in <code>VaderMath.calculateLoss</code></p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/math/VaderMath.sol#L73-L93\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/dex/math/VaderMath.sol#L73-L93</a></p>\n<p>This is the core of the issue. From the variable names it’s clear that this is written with the assumption that it is work on units of VADER whereas it is provided amounts in terms of USDV. Checking <code>VaderRouterV2</code> we can see that we pass the output of this calculation directly to the reserve in order to claim VADER.</p>\n<p>If an LP experienced 100 USDV worth of IL, instead of claiming the equivalent amount of VADER they would receive exactly 100 VADER as there’s no handling of the exchange rate between USDV and VADER.</p>\n<p>As VADER and USDV are very unlikely to trade at parity LPs could get sustantially more or less than the amount of IL they experienced.</p>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add handling for the conversion rate between VADER and USDV using a tamper resistant oracle (TwapOracle could potentially fulfil this role).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/54\">SamSteinGG (Vader) confirmed</a></strong> </p>\n<h2 id=\"h-10--calculate-loss-is-vulnerable-to-flashloan-attack\" style=\"position:relative;\"><a href=\"#h-10--calculate-loss-is-vulnerable-to-flashloan-attack\" aria-label=\"h 10  calculate loss is vulnerable to flashloan attack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/65\">[H-10]  calculate Loss is vulnerable to flashloan attack</a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<h4 id=\"impact-9\" style=\"position:relative;\"><a href=\"#impact-9\" aria-label=\"impact 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The VaderPool would compensate users’ IL. The formula it uses to calculate lp value is vulnerable to manipulation.</p>\n<p>The formula to calculate the lp value is similar to warp finance which is known to be unsafe. <a href=\"https://peckshield.medium.com/warpfinance-incident-root-cause-analysis-581a4869ee00\">warpfinance-incident-root-cause-analysis</a> (Please to refer to the POC section)</p>\n<p>The Attacker can purchase an old lp position, manipulate price, take IL compensation and drain the reserve.\nI consider this is a high-risk issue.</p>\n<h4 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/math/VaderMath.sol#L69-L93\">VaderMath.sol#L69-L93</a></p>\n<p>The lp value is calculated as <code>[(A0 * P1) + V0]</code> and <code>// [(A1 * P1) + V1]</code>.\nAssume that there’s an ETH pool and there’s 100 ETH and 100 Vader in the pool.</p>\n<ol>\n<li>Attacker deposit 1 ETH and 1 Vader and own 1% of the liquidity.</li>\n<li>Wait 1 year</li>\n<li>Start flash loan and buy a lot ETH with 99900 Vader.</li>\n<li>There’s  0.1 ETH 100,000 Vader in the pool.</li>\n<li>Burn 1 % lp at the price 1 ETH = 1,000,000 Vader.</li>\n<li>A0 * P1 + V0 = 1 (eth) * 1,000,000 (price) + 100 (vader)</li>\n<li>A1 * P1 + V1 = 0.001 (eth) * 1,000,000 (price) + 10,000 (vader)</li>\n<li>IL compensation would be around <code>9891000</code>.</li>\n</ol>\n<h4 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Please use the fair lp pricing formula from alpha finance instead. <a href=\"https://blog.alphafinance.io/fair-lp-token-pricing/\">fair-lp-token-pricing</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/65#issuecomment-979141518\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>The described attack scenario can not be executed as the pool would actually consume the flash loan. The CLP model follows a non-linear curve that actually diminishes in value as the trade size increases, meaning that at most 25% of the total assets in the pool can be drained at a given iteration. This, on top with the fees of each transaction render this attack vector impossible. Please request a tangible attack test from the warden if this is meant to be accepted as valid.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/65#issuecomment-991496670\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The CLP model isn’t mentioned in the readme or the whitepaper. The issue is valid according to the materials supplied.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/65#issuecomment-995757161\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca As the grading guidelines of C4 state, a documentation issue cannot constitute more than a low risk finding. We advise the severity to be lowered.</p>\n</blockquote>\n<h2 id=\"h-11-dex-v1-basepoolmint-function-can-be-frontrun\" style=\"position:relative;\"><a href=\"#h-11-dex-v1-basepoolmint-function-can-be-frontrun\" aria-label=\"h 11 dex v1 basepoolmint function can be frontrun permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/71\">[H-11] (dex-v1) BasePool.mint() function can be frontrun</a></h2>\n<p><em>Submitted by Reigada</em></p>\n<h4 id=\"impact-10\" style=\"position:relative;\"><a href=\"#impact-10\" aria-label=\"impact 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>In the contract BasePool the mint function can be frontrun. This will assign the NFT to the attacker which later on he can burn it retrieving the corresponding <code>\\_nativeAsset</code> and <code>\\_foreignAsset</code> initially deposited by the frontrun victim.\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/BasePool.sol#L149-L194\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/BasePool.sol#L149-L194</a></p>\n<h4 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>User1 transfers 1000 <code>\\_nativeAsset</code> tokens and 1000 <code>\\_foreignAsset</code> tokens into the BasePool contract.\nUser1 calls the <code>BasePool.mint()</code> function to retrieve his NFT.\nAttacker is constantly polling for an increase of the balance of <code>\\_nativeAsset</code> and <code>\\_foreignAsset</code> of the contract OR attacker is constantly scanning the mempool for <code>mint()</code> function calls.\nAttacker detects an increase of balance of <code>\\_nativeAsset</code> and <code>\\_foreignAsset</code> OR attacker detects a <code>mint()</code> function call in the mempool.\nAttacker frontruns the mint call and retrieves the NFT. Gets a NFT that is worth 1000 <code>\\_nativeAssets</code> and 1000 <code>\\_foreignAssets</code>.\nUser1 gets a NFT that is worth 0 <code>\\_nativeAssets</code> and 0 <code>\\_foreignAssets</code>.\nAttacker burns the NFT retrieving the corresponding <code>\\_nativeAsset</code> and <code>\\_foreignAsset</code> initially deposited by the victim.</p>\n<h4 id=\"tools-used-3\" style=\"position:relative;\"><a href=\"#tools-used-3\" aria-label=\"tools used 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual testing</p>\n<h4 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Include in the <code>mint()</code> function the transfer of <code>\\_nativeAssets</code> and <code>\\_foreignAssets</code> to the smart contract.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/71#issuecomment-979143966\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>The pool is meant to be utilized via the router or smart contracts and is not meant to be utilized directly.  The exact same “flaw” exists in Uniswap V2 whereby if you transfer assets directly someone else can claim them on your behalf.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/71#issuecomment-991494827\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Ah, so this how you prevent direct access to the pools. The issue is valid due to lack of documentation on the usage of the router.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/71#issuecomment-995754315\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Firstly, documentation related issues cannot constitute a high risk vulnerability. Secondly, this type of documentation does not exist in Uniswap V2 either. We advise this finding to be set to no risk.</p>\n</blockquote>\n<h2 id=\"h-12-attacker-can-get-extremely-cheap-synth-by-front-running-create-pool\" style=\"position:relative;\"><a href=\"#h-12-attacker-can-get-extremely-cheap-synth-by-front-running-create-pool\" aria-label=\"h 12 attacker can get extremely cheap synth by front running create pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/98\">[H-12] Attacker can get extremely cheap synth by front-running create Pool</a></h2>\n<p><em>Submitted by jonah1005, also found by defsec</em></p>\n<h4 id=\"impact-11\" style=\"position:relative;\"><a href=\"#impact-11\" aria-label=\"impact 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><code>createPool</code> is a permissionless transaction.</p>\n<ol>\n<li>Anyone can create a token pool.</li>\n<li>Token price is set by the first lp provider.</li>\n<li>User can get a synthetic asset.</li>\n</ol>\n<p>Assume a new popular <code>coin</code> that the DAO decides to add to the protocol.\nThe attacker can create the pool and set it to be extremely cheap. (By depositing 1 wei <code>coin</code> and 10^18 wei Vader.) The attacker can mint a lot of synth by providing another 10^18 wei Vader.</p>\n<p>There’s no way to revoke the pool. The <code>coin</code> pool would be invalid since the attacker can drain all the lp in the pool.</p>\n<p>I consider this is a high-risk issue.</p>\n<h4 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/VaderPoolFactory.sol#L43-L89\">VaderPoolFactory.sol#L43-L89</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L115-L167\">VaderPoolV2.sol#L115-L167</a></li>\n</ul>\n<h4 id=\"tools-used-4\" style=\"position:relative;\"><a href=\"#tools-used-4\" aria-label=\"tools used 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Restrict users from minting synth from a new and illiquid pool.\nSome thoughts about the fix:</p>\n<ol>\n<li>Decide minimum liquidity for a synthetic asset (e.g 1M Vader in the pool)</li>\n<li>Once there’s enough liquidity pool, anyone can deploy a synthetic asset after a cool down. (e.g. 3 days</li>\n</ol>\n<p>The pool can remain permissionless and safe.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/98#issuecomment-979148887\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>This is an invalid finding as creating pools is not a permissionless operation, the token must be in the supported list of assets.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/98#issuecomment-991486788\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I can’t see a check for a token to be in a supported list of assets.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/98#issuecomment-995748144\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca There seems to be some confusion. The submitted of the bounty links the Vader Pool Factory of DEX V1 and the Pool of DEX V2 which are not interacting between them. As such, the finding is invalid.</p>\n</blockquote>\n<h2 id=\"h-13-anyone-can-arbitrarily-mint-synthetic-assets-in-vaderpoolv2mintsynth\" style=\"position:relative;\"><a href=\"#h-13-anyone-can-arbitrarily-mint-synthetic-assets-in-vaderpoolv2mintsynth\" aria-label=\"h 13 anyone can arbitrarily mint synthetic assets in vaderpoolv2mintsynth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/146\">[H-13] Anyone Can Arbitrarily Mint Synthetic Assets In <code>VaderPoolV2.mintSynth()</code></a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-12\" style=\"position:relative;\"><a href=\"#impact-12\" aria-label=\"impact 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>mintSynth()</code> function is callable by any user and creates a synthetic asset against <code>foreignAsset</code> if it does not already exist. The protocol expects a user to first approve the contract as a spender before calling <code>mintSynth()</code>. However, any arbitrary user could monitor the blockchain for contract approvals that match <code>VaderPoolV2.sol</code> and effectively frontrun their call to <code>mintSynth()</code> by setting the <code>to</code> argument to their own address. As a result, the <code>nativeDeposit</code> amount is transferred from the victim, and a synthetic asset is minted and finally transferred to the malicious user who is represented by the <code>to</code> address.</p>\n<h4 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L167\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L167</a></p>\n<h4 id=\"tools-used-5\" style=\"position:relative;\"><a href=\"#tools-used-5\" aria-label=\"tools used 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.\nDiscussions with dev.</p>\n<h4 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider removing the <code>from</code> argument in <code>mintSynth()</code> and update the <code>safeTransferFrom()</code> call to instead transfer from <code>msg.sender</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/146#issuecomment-979164782\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p> The pool contracts, similarly to Uniswap V2, are never meant to be interacted with directly.</p>\n</blockquote>\n<h2 id=\"h-14-anyone-can-arbitrarily-mint-fungible-tokens-in-vaderpoolv2mintfungible\" style=\"position:relative;\"><a href=\"#h-14-anyone-can-arbitrarily-mint-fungible-tokens-in-vaderpoolv2mintfungible\" aria-label=\"h 14 anyone can arbitrarily mint fungible tokens in vaderpoolv2mintfungible permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/147\">[H-14] Anyone Can Arbitrarily Mint Fungible Tokens In <code>VaderPoolV2.mintFungible()</code></a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-13\" style=\"position:relative;\"><a href=\"#impact-13\" aria-label=\"impact 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>mintFungible()</code> function is callable by any user that wishes to mint liquidity pool fungible tokens. The protocol expects a user to first approve the contract as a spender before calling <code>mintFungible()</code>. However, any arbitrary user could monitor the blockchain for contract approvals that match <code>VaderPoolV2.sol</code> and effectively frontrun their call to <code>mintFungible()</code> by setting the <code>to</code> argument to their own address. As a result, the <code>nativeDeposit</code> and <code>foreignDeposit</code> amounts are transferred from the victim, and LP tokens are minted and finally transferred to the malicious user who is represented by the <code>to</code> address.</p>\n<h4 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L335\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L335</a></p>\n<h4 id=\"tools-used-6\" style=\"position:relative;\"><a href=\"#tools-used-6\" aria-label=\"tools used 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.\nDiscussions with dev.</p>\n<h4 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider removing the <code>from</code> argument in <code>mintFungible()</code> and update the <code>safeTransferFrom()</code> calls to instead transfer from <code>msg.sender</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/147#issuecomment-979165275\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>The pool contracts, similarly to Uniswap V2, are never meant to be interacted with directly.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/147#issuecomment-991477978\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>You need to enforce that somehow.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/147#issuecomment-995730174\">SamSteinGG (Vader) confirmed</a>:</strong></p>\n<blockquote>\n<p>Upon second consideration, the functions relating to the minting of synths and wrapped tokens should have had the onlyRouter modifier and thus are indeed vulnerable. Issue accepted.</p>\n</blockquote>\n<h2 id=\"h-15-vaderrouter_swap-performs-wrong-swap\" style=\"position:relative;\"><a href=\"#h-15-vaderrouter_swap-performs-wrong-swap\" aria-label=\"h 15 vaderrouter_swap performs wrong swap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/161\">[H-15] <code>VaderRouter._swap</code> performs wrong swap</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The 3-path hop in <code>VaderRouter._swap</code> is supposed to first swap <strong>foreign</strong> assets to native assets, and then the received native assets to different foreign assets again.</p>\n<p>The <code>pool.swap(nativeAmountIn, foreignAmountIn)</code> accepts the foreign amount as the <strong>second</strong> argument.\nThe code however mixes these positional arguments up and tries to perform a <code>pool0</code> foreign -> native swap by using the <strong>foreign</strong> amount as the <strong>native amount</strong>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_swap</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountOut</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">path</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">3</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// @audit calls this with nativeAmountIn = amountIn. but should be foreignAmountIn (second arg)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pool1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">swap</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pool0</span><span class=\"mtk1\">.</span><span class=\"mtk11\">swap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amountIn</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pool1</span><span class=\"mtk1\">)), </span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// @audit should be this instead</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pool1</span><span class=\"mtk1\">.</span><span class=\"mtk11\">swap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pool0</span><span class=\"mtk1\">.</span><span class=\"mtk11\">swap</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountIn</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pool1</span><span class=\"mtk1\">)), </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h4 id=\"impact-14\" style=\"position:relative;\"><a href=\"#impact-14\" aria-label=\"impact 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>All 3-path swaps through the <code>VaderRouter</code> fail in the pool check when <code>require(nativeAmountIn = amountIn &#x3C;= nativeBalance - nativeReserve = 0)</code> is checked, as foreign amount is sent but <em>native</em> amount is specified.</p>\n<h4 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use <code>return pool1.swap(pool0.swap(0, amountIn, address(pool1)), 0, to);</code> instead.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/161\">SamSteinGG (sponsor) confirmed</a></strong> </p>\n<h2 id=\"h-16-vaderroutercalculateoutgivenin-calculates-wrong-swap\" style=\"position:relative;\"><a href=\"#h-16-vaderroutercalculateoutgivenin-calculates-wrong-swap\" aria-label=\"h 16 vaderroutercalculateoutgivenin calculates wrong swap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/162\">[H-16] <code>VaderRouter.calculateOutGivenIn</code> calculates wrong swap</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The 3-path hop in <code>VaderRouter.calculateOutGivenIn</code> is supposed to first swap <strong>foreign</strong> assets to native assets <strong>in pool0</strong>, and then the received native assets to different foreign assets again <strong>in pool1</strong>.</p>\n<p>The first argument of <code>VaderMath.calculateSwap(amountIn, reserveIn, reserveOut)</code> must refer to the same token as the second argument <code>reserveIn</code>.\nThe code however mixes these positions up and first performs a swap in <code>pool1</code> instead of <code>pool0</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">calculateOutGivenIn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountIn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountOut</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(...) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">VaderMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">calculateSwap</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">VaderMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">calculateSwap</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk3\">// @audit the inner trade should not be in pool1 for a forward swap. amountIn foreign =&gt; next param should be foreignReserve0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">amountIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">nativeReserve1</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">foreignReserve1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">foreignReserve0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">nativeReserve0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk3\">/** @audit instead should first be trading in pool0!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">    VaderMath.calculateSwap(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">        VaderMath.calculateSwap(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">            amountIn,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">            foreignReserve0,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">            nativeReserve0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">        ),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">        nativeReserve1,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">        foreignReserve1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">  */</span></span></span></code></pre>\n<h4 id=\"impact-15\" style=\"position:relative;\"><a href=\"#impact-15\" aria-label=\"impact 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>All 3-path swaps computations through <code>VaderRouter.calculateOutGivenIn</code> will return the wrong result.\nSmart contracts or off-chain scripts/frontends that rely on this value to trade will have their transaction reverted, or in the worst case lose funds.</p>\n<h4 id=\"recommended-mitigation-steps-15\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-15\" aria-label=\"recommended mitigation steps 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Return the following code instead which first trades in <code>pool0</code> and then in <code>pool1</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">return</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">VaderMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">calculateSwap</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">VaderMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">calculateSwap</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">amountIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">foreignReserve0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">nativeReserve0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      ),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">nativeReserve1</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">foreignReserve1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/162\">SamSteinGG (Vader) confirmed</a></strong></p>\n<h2 id=\"h-17-twaporacle-might-register-with-wrong-token-order\" style=\"position:relative;\"><a href=\"#h-17-twaporacle-might-register-with-wrong-token-order\" aria-label=\"h 17 twaporacle might register with wrong token order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/171\">[H-17] TWAPOracle might register with wrong token order</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>TWAPOracle.registerPair</code> function takes in a <code>factory</code> and (<code>token0, token1)</code>.\nThe function accepts a <code>_factory</code> argument which means any Uniswap-like factory can be used.</p>\n<p>When using the actual Uniswap factory’s <code>IUniswapV2Factory(factory).getPair(token0, token1)</code> call, it could be that the <code>token0</code> and <code>token1</code> are reversed as it <a href=\"https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Factory.sol#L35\">ignores the order</a>.</p>\n<p>Meaning, the <code>price0/1CumulativeLast</code> could also be reversed as it matches the internal order.\nThe code however pushes the <code>_pairs</code> assuming that the internal <code>price0CumulativeLast, price1CumulativeLast</code> order matches the order of the function arguments <code>token0, token1</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_pairs</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">PairData</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">pair:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pairAddr</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">token0:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">token1:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token1</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">price0CumulativeLast:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price0CumulativeLast</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">price1CumulativeLast:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price1CumulativeLast</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">blockTimestampLast:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">blockTimestampLast</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">price0Average:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">FixedPoint</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uq112x112</span><span class=\"mtk1\">({</span><span class=\"mtk12\">_x:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">}),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">price1Average:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">FixedPoint</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uq112x112</span><span class=\"mtk1\">({</span><span class=\"mtk12\">_x:</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span><span class=\"mtk1\">})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<h4 id=\"impact-16\" style=\"position:relative;\"><a href=\"#impact-16\" aria-label=\"impact 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The prices could be inverted which leads to the oracle providing wrong prices.</p>\n<h4 id=\"recommended-mitigation-steps-16\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-16\" aria-label=\"recommended mitigation steps 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>It should be checked if Uniswap’s internal order matches the order of the <code>token0/1</code> function arguments.\nIf not, the cumulative prices must be swapped.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// pseudocode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">IUniswapV2Pair</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pair</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IUniswapV2Pair</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IUniswapV2Factory</span><span class=\"mtk1\">(</span><span class=\"mtk12\">factory</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPair</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token1</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pairAddr</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pair</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">price0CumulativeLast</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk11\">price0CumulativeLast</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">price1CumulativeLast</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk11\">price1CumulativeLast</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span><span class=\"mtk12\">price0CumulativeLast</span><span class=\"mtk1\">, </span><span class=\"mtk12\">price1CumulativeLast</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">token0</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk11\">token0</span><span class=\"mtk1\">() ? (</span><span class=\"mtk12\">price0CumulativeLast</span><span class=\"mtk1\">, </span><span class=\"mtk12\">price1CumulativeLast</span><span class=\"mtk1\">) : (</span><span class=\"mtk12\">price1CumulativeLast</span><span class=\"mtk1\">, </span><span class=\"mtk12\">price0CumulativeLast</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<blockquote>\n<p>The same issue exists in <code>update</code></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/171\">SamSteinGG (Vader) confirmed</a></strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"h-18-attacker-can-claim-more-il-by-manipulating-pool-price-then-removeliquidity-\" style=\"position:relative;\"><a href=\"#h-18-attacker-can-claim-more-il-by-manipulating-pool-price-then-removeliquidity-\" aria-label=\"h 18 attacker can claim more il by manipulating pool price then removeliquidity  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/182\">[H-18] Attacker can claim more IL by manipulating pool price then <code>removeLiquidity</code> </a></h2>\n<p><em>Submitted by gzeon</em></p>\n<h4 id=\"impact-17\" style=\"position:relative;\"><a href=\"#impact-17\" aria-label=\"impact 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Vader reimburse user IL immediately when user withdraw from the pool (VaderRouterV2.sol:L227), an attacker can therefore manipulate the pool balance causing a high IL, remove liquidity and restore the pool balance such that he will receive a larger IL reimbursement.</p>\n<h4 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Let’s assume our attacker own 100% of FOO-VADER</p>\n<ol>\n<li>Attacker add 100 FOO and 100 VADER to the Pool</li>\n<li>wait some block, or 1 year for max IL protection</li>\n<li>\n<p>In 1 transaction, attacker</p>\n<ul>\n<li>Swap 9900 FOO to 99 Vader</li>\n<li>Pool now have 10000 FOO and 1 VADER</li>\n<li>By VaderMath.sol:L84 the loss is 100*1/10000+100-2 = 98.01 VADER</li>\n<li>Remove liquidity and receive 10000 FOO and 99.01 VADER</li>\n<li>Restore the pool balance</li>\n</ul>\n</li>\n<li>Such that the attacker will gain 98.01 VADER without risk</li>\n</ol>\n<p>The profit is constrained by gas cost, pool fee, % of pool controlled by the attacker and % of IL protection.</p>\n<h4 id=\"recommended-mitigation-steps-17\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-17\" aria-label=\"recommended mitigation steps 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use twap price to determine P1 in VaderMath.sol:L84 when calculating IL to reduce risk of manipulation</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/182#issuecomment-979171731\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of #2</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/182#issuecomment-991043223\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Doesn’t seem like a duplicate to me, @SamSteinGG?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/182#issuecomment-995720224\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca The stated trade cannot occur as trades are inherently limited by the CLP design of the protocol to one third of the available pair liquidity. As such, the illustrated pair would actually result in almost zero units retrieved back.</p>\n</blockquote>\n<h2 id=\"h-19-governance-veto-can-be-bypassed\" style=\"position:relative;\"><a href=\"#h-19-governance-veto-can-be-bypassed\" aria-label=\"h 19 governance veto can be bypassed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/186\">[H-19] Governance veto can be bypassed</a></h2>\n<p><em>Submitted by gzeon</em></p>\n<h4 id=\"impact-18\" style=\"position:relative;\"><a href=\"#impact-18\" aria-label=\"impact 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Since <code>veto</code> ensure none of the actions in proposal being vetoed point to the contract (GovernorAlpha.sol:L562), a malicious proposal can be designed to have an action that point to governance and therefore effectively cannot be vetoed.</p>\n<h4 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>For any attacker who want to launch a governance attack using a malicious proposal, they simply need to add an action that point to governance that does nothing (or anything).</p>\n<h4 id=\"recommended-mitigation-steps-18\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-18\" aria-label=\"recommended mitigation steps 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Some other design can be proposal are vetoable whenever the differential is less than x%, even if it involves governance change, s.t. council can veto most malicious proposal while it is still possible to change council given high enough vote differential.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/186#issuecomment-974605886\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of #61</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/186#issuecomment-991037314\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Not a duplicate</p>\n</blockquote>\n<h2 id=\"h-20-early-user-can-break-addliquidity\" style=\"position:relative;\"><a href=\"#h-20-early-user-can-break-addliquidity\" aria-label=\"h 20 early user can break addliquidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/189\">[H-20] Early user can break <code>addLiquidity</code></a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex/pool/BasePool.sol#L161-L163\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex/pool/BasePool.sol#L161-L163</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// TODO: Contact ThorChain on proper approach</span></span></span></code></pre>\n<p>In the current implementation, the first <code>liquidity</code> takes the <code>nativeDeposit</code> amount and uses it directly.</p>\n<p>However, since this number (<code>totalLiquidityUnits</code>) will later be used for computing the <code>liquidity</code> issued for future <code>addLiquidity</code> using <code>calculateLiquidityUnits</code>.</p>\n<p>A malicious user can add liquidity with only <code>1 wei</code> USDV and making it nearly impossible for future users to add liquidity to the pool.</p>\n<h5 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Uni v2 solved this problem by sending the first 1000 tokens to the zero address.</p>\n<p>The same should work here, i.e., on first mint (totalLiquidityUnits == 0), lock some of the first minter’s tokens by minting ~1% of the initial amount to the zero address instead of to the first minter.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/189#issuecomment-979172790\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of #24</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/189#issuecomment-991467149\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Not a duplicate</p>\n</blockquote>\n<h2 id=\"h-21-lack-of-access-control-allow-attacker-to-mintfungible-and-mintsynth-with-other-users-wallet-balance\" style=\"position:relative;\"><a href=\"#h-21-lack-of-access-control-allow-attacker-to-mintfungible-and-mintsynth-with-other-users-wallet-balance\" aria-label=\"h 21 lack of access control allow attacker to mintfungible and mintsynth with other users wallet balance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/204\">[H-21] Lack of access control allow attacker to <code>mintFungible()</code> and <code>mintSynth()</code> with other user’s wallet balance</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L335\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L335</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mintFungible</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IERC20Extended</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">wrapper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">lp</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">IERC20Extended</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_ZERO_ADDRESS</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;VaderPoolV2::mintFungible: Unsupported Token&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveForeign</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">getReserves</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">foreignAsset</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ); </span><span class=\"mtk3\">// gas savings</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">nativeAsset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">PairInfo</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pair</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pairInfo</span><span class=\"mtk1\">[</span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">VaderMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">calculateLiquidityUnits</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">reserveForeign</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">totalLiquidityUnits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;VaderPoolV2::mintFungible: Insufficient Liquidity Provided&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_update</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">reserveForeign</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">reserveForeign</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">lp</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L167\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L167</a></p>\n<p>Funds are transferred from the <code>from</code> parameter, and the output tokens are transferred to the <code>to</code> parameter, both passed by the caller without proper access control.</p>\n<h5 id=\"impact-19\" style=\"position:relative;\"><a href=\"#impact-19\" aria-label=\"impact 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h5>\n<p>This issue allows anyone to call <code>mintFungible()</code> and <code>mintSynth()</code> and steal almost all their wallet balances for all the users who have approved the contract before.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/204#issuecomment-979177088\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate #67</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/204#issuecomment-991036185\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Not a duplicate.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/204#issuecomment-995713007\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca Can you elaborate as to why it is not a duplicate?</p>\n</blockquote>\n<h2 id=\"h-22-mintsynth-and-burnsynth-can-be-front-run\" style=\"position:relative;\"><a href=\"#h-22-mintsynth-and-burnsynth-can-be-front-run\" aria-label=\"h 22 mintsynth and burnsynth can be front run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/209\">[H-22] <code>mintSynth()</code> and <code>burnSynth()</code> can be front run</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L155\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L126-L155</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L179-L197\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L179-L197</a></li>\n</ul>\n<p>Given that <code>mintSynth()</code> and <code>burnSynth()</code> will issue and redeem assets based on the price of the pool (reserves), and they will create price impact based on the volume being minted and burnt.</p>\n<p>However, the current implementation provides no parameter for slippage control, making them vulnerable to front-run attacks. Especially for transactions with rather large volumes.</p>\n<h5 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Consider adding a <code>minAmountOut</code> parameter.</p>\n<h2 id=\"h-23-synth-tokens-can-get-over-minted\" style=\"position:relative;\"><a href=\"#h-23-synth-tokens-can-get-over-minted\" aria-label=\"h 23 synth tokens can get over minted permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/210\">[H-23] <code>Synth</code> tokens can get over-minted</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>Per the document:</p>\n<blockquote>\n<p>It also is capable of using liquidity units as collateral for synthetic assets, of which it will always have guaranteed redemption liquidity for.</p>\n</blockquote>\n<p>However, in the current implementation, <code>Synth</code> tokens are minted based on the calculation result. While <code>nativeDeposit</code> be added to the reserve, <code>reserveForeign</code> will remain unchanged, not deducted nor locked.</p>\n<p>Making it possible for <code>Synth</code> tokens to get over-minted.</p>\n<h5 id=\"proof-of-concept-15\" style=\"position:relative;\"><a href=\"#proof-of-concept-15\" aria-label=\"proof of concept 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h5>\n<ul>\n<li>The Vader pool for BTC-USDV is newly created, with nearly 0 liquidity.</li>\n<li>Alice add liquidity with <code>100,000 USDV</code> and <code>1 BTC</code>;</li>\n<li>Bob <code>mintSynth()</code> with <code>100,000 USDV</code>, got <code>0.25 BTC vSynth</code>;</li>\n<li>Alice remove all the liquidity received at step 1, got all the <code>200k USDV</code> and <code>1 BTC</code>.</li>\n</ul>\n<p>The <code>0.25 BTC vSynth</code> held by Bob is now backed by nothing and unable to be redeemed.</p>\n<p>This also makes it possible for a sophisticated attacker to steal funds from the Vader pool.</p>\n<p>The attacker may do the following in one transaction:</p>\n<ol>\n<li>Add liquidity with <code>10 USDV</code> and <code>10,000 BTC</code> (flash loan);</li>\n<li>Call <code>mintSynth()</code> with <code>10 USDV</code>, repeat for 10 times, got <code>1461 BTC vSynth</code>;</li>\n<li>Remove liquidity and repay flash loan, keep the <code>1461 BTC vSynth</code>;</li>\n<li>Wait for other users to add liquidity and when the BTC reserve is sufficient, call <code>burnSynth()</code> to steal <code>USDV</code> from the pool.</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/210\">SamSteinGG (Vader) confirmed</a></strong></p>\n<blockquote>\n<p>Given that the codebase attempts to implement the Thorchain rust code in a one-to-one fashion, findings that relate to the mathematical accuracy of the codebase will only be accepted in one of the following cases:</p>\n<ul>\n<li>The code deviates from the Thorchain implementation</li>\n<li>A test case is created that illustrates the problem</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>While intuition is a valid ground for novel implementations, we have re-implemented a battle-tested implementation in another language and as such it is considered secure by design unless proven otherwise. </p>\n</blockquote>\n<h2 id=\"h-24-wrong-designimplementation-of-addliquidity-allows-attacker-to-steal-funds-from-the-liquidity-pool\" style=\"position:relative;\"><a href=\"#h-24-wrong-designimplementation-of-addliquidity-allows-attacker-to-steal-funds-from-the-liquidity-pool\" aria-label=\"h 24 wrong designimplementation of addliquidity allows attacker to steal funds from the liquidity pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/212\">[H-24] Wrong design/implementation of <code>addLiquidity()</code> allows attacker to steal funds from the liquidity pool</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>The current design/implementation of Vader pool allows users to <code>addLiquidity</code> using arbitrary amounts instead of a fixed ratio of amounts in comparison to Uni v2.</p>\n<p>We believe this design is flawed and it essentially allows anyone to manipulate the price of the pool easily and create an arbitrage opportunity at the cost of all other liquidity providers.</p>\n<p>An attacker can exploit this by adding liquidity in extreme amounts and drain the funds from the pool.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L335\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L335</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mintFungible</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IERC20Extended</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">wrapper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">lp</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">IERC20Extended</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_ZERO_ADDRESS</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&quot;VaderPoolV2::mintFungible: Unsupported Token&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveForeign</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">getReserves</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">foreignAsset</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ); </span><span class=\"mtk3\">// gas savings</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">nativeAsset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">PairInfo</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pair</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pairInfo</span><span class=\"mtk1\">[</span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">VaderMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">calculateLiquidityUnits</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">reserveForeign</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">totalLiquidityUnits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&quot;VaderPoolV2::mintFungible: Insufficient Liquidity Provided&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_update</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reserveForeign</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reserveForeign</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">lp</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h5 id=\"proof-of-concept-16\" style=\"position:relative;\"><a href=\"#proof-of-concept-16\" aria-label=\"proof of concept 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h5>\n<p>Given:</p>\n<ul>\n<li>A Vader pool with <code>100,000 USDV</code> and <code>1 BTC</code>;</li>\n<li>The <code>totalPoolUnits</code> is <code>100</code>.</li>\n</ul>\n<p>The attacker can do the following in one transaction:</p>\n<ol>\n<li>Add liquidity with <code>100,000 USDV</code> and 0 BTC, get <code>50 liquidityUnits</code>, representing 1/3 shares of the pool;</li>\n<li>Swap <code>0.1 BTC</code> to USDV, repeat for 5 times; spent<code>0.5 BTC</code> and got <code>62163.36 USDV</code>;</li>\n<li>Remove liquidity, get back <code>45945.54 USDV</code> and <code>0.5 BTC</code>; profit for: 62163.36 + 45945.54 - 100000 = 8108.9 USDV.</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/212#issuecomment-979177570\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>This is the intended design of the Thorchain CLP model. Can the warden provide a tangible attack vector in the form of a test?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/212#issuecomment-991472853\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Sponsor is acknowledging the issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/212#issuecomment-995712459\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca We do not acknowledge the issue. This is the intended design of the CLP model and the amount supplied for a trade is meant to be safeguarded off-chain. It is an inherent trait of the model.</p>\n</blockquote>\n<h2 id=\"h-25-wrong-design-of-swap-results-in-unexpected-and-unfavorable-outputs\" style=\"position:relative;\"><a href=\"#h-25-wrong-design-of-swap-results-in-unexpected-and-unfavorable-outputs\" aria-label=\"h 25 wrong design of swap results in unexpected and unfavorable outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/213\">[H-25] Wrong design of <code>swap()</code> results in unexpected and unfavorable outputs</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>The current formula to calculate the <code>amountOut</code> for a swap is:</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex/math/VaderMath.sol#L99-L111\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex/math/VaderMath.sol#L99-L111</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">calculateSwap</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveOut</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountOut</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// x * Y * X</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">numerator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amountIn</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">reserveIn</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">reserveOut</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// (x + X) ^ 2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">denominator</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">pow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amountIn</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">reserveIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amountOut</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">numerator</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">denominator</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>We believe the design (the formula) is wrong and it will result in unexpected and unfavorable outputs.</p>\n<p>Specifically, if the <code>amountIn</code> is larger than the <code>reserveIn</code>, the <code>amountOut</code> starts to decrease.</p>\n<h5 id=\"proof-of-concept-17\" style=\"position:relative;\"><a href=\"#proof-of-concept-17\" aria-label=\"proof of concept 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h5>\n<p>Given:</p>\n<ul>\n<li>A USDV-BTC Vader pool with the reserves of <code>200,000 USDV</code> and <code>2 BTC</code>.</li>\n<li>If Alice swap <code>2 BTC</code> for USDV, will get <code>50000 USDV</code> as output;</li>\n<li>If Bob swap <code>2.1 BTC</code> for USDV, will only get <code>49970.25 USDV</code> as output;</li>\n<li>If Carol swap <code>2.2 BTC</code> for USDV, will only get <code>49886.62 USDV</code> as output.</li>\n</ul>\n<p>For the same pool reserves, paying more for less output token is unexpected and unfavorable.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/213#issuecomment-979177813\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>This is the intended design of the Thorchain CLP model. Can the warden provide a tangible attack vector in the form of a test?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/213#issuecomment-991472702\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>It is true that the effect will be surprising to the user, and the issue is acknowledged by the sponsor.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/213#issuecomment-995710944\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca We do not acknowledge the issue. This is the intended design of the CLP model and the amount supplied for a trade is meant to be safeguarded off-chain. It is an inherent trait of the model.</p>\n</blockquote>\n<h2 id=\"h-26-all-user-assets-which-are-approved-to-vaderpoolv2-may-be-stolen\" style=\"position:relative;\"><a href=\"#h-26-all-user-assets-which-are-approved-to-vaderpoolv2-may-be-stolen\" aria-label=\"h 26 all user assets which are approved to vaderpoolv2 may be stolen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/221\">[H-26] All user assets which are approved to VaderPoolV2 may be stolen</a></h2>\n<p><em>Submitted by TomFrenchBlockchain, also found by cmichel</em></p>\n<h4 id=\"impact-20\" style=\"position:relative;\"><a href=\"#impact-20\" aria-label=\"impact 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Total loss of funds which have been approved on <code>VaderPoolV2</code></p>\n<h4 id=\"proof-of-concept-18\" style=\"position:relative;\"><a href=\"#proof-of-concept-18\" aria-label=\"proof of concept 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>VaderPoolV2</code> allows minting of fungible LP tokens with the <code>mintFungible</code> function</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L290\">https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/dex-v2/pool/VaderPoolV2.sol#L284-L290</a></p>\n<p>Crucially this function allows a user supplied value for <code>from</code> which specifies where the <code>nativeAsset</code> and <code>foreignAsset</code> should be pulled from. An attacker can then provide any address which has a token approval onto <code>VaderPoolV2</code> and mint themselves LP tokens - stealing the underlying tokens.</p>\n<h4 id=\"recommended-mitigation-steps-19\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-19\" aria-label=\"recommended mitigation steps 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Remove <code>from</code> argument and use msg.sender instead.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/221#issuecomment-979180340\">SamSteinGG (Vader) disputed)</a>:</strong></p>\n<blockquote>\n<p>pool is not meant to be interacted with</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/221#issuecomment-991472193\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>And how are you going to ensure that the pool is not interacted with, @SamSteinGG?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/221#issuecomment-995709116\">SamSteinGG (Vader) confirmed</a>:</strong></p>\n<blockquote>\n<p>@alcueca Upon second consideration, the functions relating to the minting of synths and wrapped tokens should have had the onlyRouter modifier and thus are indeed vulnerable. Issue accepted.</p>\n</blockquote>\n<h2 id=\"h-27-unrestricted-vestfor\" style=\"position:relative;\"><a href=\"#h-27-unrestricted-vestfor\" aria-label=\"h 27 unrestricted vestfor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/229\">[H-27] Unrestricted vestFor</a></h2>\n<p><em>Submitted by pauliax, also found by hack3r-0m</em></p>\n<h4 id=\"impact-21\" style=\"position:relative;\"><a href=\"#impact-21\" aria-label=\"impact 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Anyone can call function <code>vestFor</code> and block any user with a tiny amount of Vader. This function has no auth checks so a malicious actor can front-run legit <code>vestFor</code> calls with insignificant amounts. This function locks the user for 365 days and does not allow updating the value, thus forbids legit conversions.</p>\n<h4 id=\"recommended-mitigation-steps-20\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-20\" aria-label=\"recommended mitigation steps 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider introducing a whitelist of callers that can vest on behalf of others (e.g. Converter).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/229\">SamSteinGG (Vader) confirmed</a></strong></p>\n<h2 id=\"h-28-incorrect-price-consultation-results\" style=\"position:relative;\"><a href=\"#h-28-incorrect-price-consultation-results\" aria-label=\"h 28 incorrect price consultation results permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/235\">[H-28] Incorrect Price Consultation Results</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-22\" style=\"position:relative;\"><a href=\"#impact-22\" aria-label=\"impact 22 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>TwapOracle.consult()</code> function iterates over all token pairs which belong to either <code>VADER</code> or USDV` and then calculates the price of the respective asset by using both UniswapV2 and Chainlink price data. This helps to further protect against price manipulation attacks as the price is averaged out over the various registered token pairs.</p>\n<p>Let’s say we wanted to query the price of <code>USDV</code>, we would sum up any token pair where <code>USDV == pairData.token0</code>.</p>\n<p>The sum consists of the following:</p>\n<ul>\n<li>Price of <code>USDV</code> denominated in terms of <code>token1</code> (<code>USDV/token1</code>).</li>\n<li>Price of token1 denominated in terms of <code>USD</code> (<code>token1/USD</code>).</li>\n</ul>\n<p>Consider the following example:</p>\n<ul>\n<li><code>SUSHI</code> is the only registered token pair that exists alongside <code>USDV</code>.</li>\n<li>Hence, calculating <code>sumNative</code> gives us an exchange rate that is denominated as <code>USDV/SUSHI</code>.</li>\n<li>Similarly, <code>sumUSD</code> gives us the following denominated pair, <code>SUSHI/USD</code>.</li>\n<li>I’d expect the result to equal <code>sumUSD * token.decimals() * sumNative</code> which should give us a USDV/USD denominated result.</li>\n</ul>\n<p>However, the protocol calculates it as <code>(sumUSD * token.decimals()) / sumNative</code> which gives us a <code>SUSHI^2 / (USD*USDV)</code> denominated result. This seems incorrect.</p>\n<p>I’d classify this issue as high risk as the oracle returns false results upon being consulted. This can lead to issues in other areas of the protocol that use this data in performing sensitive actions.</p>\n<h4 id=\"proof-of-concept-19\" style=\"position:relative;\"><a href=\"#proof-of-concept-19\" aria-label=\"proof of concept 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L115-L157\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L115-L157</a></p>\n<p>Similar working implementation listed below:</p>\n<ul>\n<li><a href=\"https://github.com/gg2001/dpx-oracle/blob/master/contracts/UniswapV2Oracle.sol#L184-L211\">https://github.com/gg2001/dpx-oracle/blob/master/contracts/UniswapV2Oracle.sol#L184-L211</a></li>\n<li><a href=\"https://github.com/gg2001/dpx-oracle/blob/master/contracts/UniswapV2Oracle.sol#L291-L304\">https://github.com/gg2001/dpx-oracle/blob/master/contracts/UniswapV2Oracle.sol#L291-L304</a></li>\n</ul>\n<h4 id=\"tools-used-7\" style=\"position:relative;\"><a href=\"#tools-used-7\" aria-label=\"tools used 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-21\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-21\" aria-label=\"recommended mitigation steps 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>To calculate the correct consultation of a given token, the result should return <code>sumUSD * token.decimals() * sumNative</code> instead to ensure the target token to consult is denominated in <code>USD</code> and contains the correct number of decimals.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/235#issuecomment-979182948\">SamSteinGG (Vader) confirmed</a>:</strong></p>\n<blockquote>\n<p>The description seems slightly incorrect as it uses a power where multiplication is performed but the general idea is correct.</p>\n</blockquote>\n<h2 id=\"h-29-vaderpoolv2mintfungible-exposes-users-to-unlimited-slippage\" style=\"position:relative;\"><a href=\"#h-29-vaderpoolv2mintfungible-exposes-users-to-unlimited-slippage\" aria-label=\"h 29 vaderpoolv2mintfungible exposes users to unlimited slippage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/248\">[H-29] VaderPoolV2.mintFungible exposes users to unlimited slippage</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-23\" style=\"position:relative;\"><a href=\"#impact-23\" aria-label=\"impact 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Frontrunners can extract up to 100% of the value provided by LPs to VaderPoolV2.</p>\n<h4 id=\"proof-of-concept-20\" style=\"position:relative;\"><a href=\"#proof-of-concept-20\" aria-label=\"proof of concept 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Users can provide liquidity to <code>VaderPoolV2</code> through the <code>mintFungible</code> function.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L271-L335\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/VaderPoolV2.sol#L271-L335</a></p>\n<p>This allows users to provide tokens in any ratio and the pool will calculate what fraction of the value in the pool this makes up and mint the corresponding amount of liquidity units as an ERC20.</p>\n<p>However there’s no way for users to specify the minimum number of liquidity units they will accept. As the number of liquidity units minted is calculated from the current reserves, this allows frontrunners to manipulate the pool’s reserves in such a way that the LP receives fewer liquidity units than they should. e.g. LP provides a lot of <code>nativeAsset</code> but very little <code>foreignAsset</code>, the frontrunner can then sell a lot of <code>nativeAsset</code> to the pool to devalue it.</p>\n<p>Once this is done the attacker returns the pool’s reserves back to normal and pockets a fraction of the value which the LP meant to provide as liqudity.</p>\n<h4 id=\"recommended-mitigation-steps-22\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-22\" aria-label=\"recommended mitigation steps 22 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a user-specified minimum amount of LP tokens to mint.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/248\">SamSteinGG (Vader) confirmed</a></strong></p>\n<blockquote>\n<p>Given that the codebase attempts to implement the Thorchain rust code in a one-to-one fashion, findings that relate to the mathematical accuracy of the codebase will only be accepted in one of the following cases:</p>\n<ul>\n<li>The code deviates from the Thorchain implementation</li>\n<li>A test case is created that illustrates the problem</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>While intuition is a valid ground for novel implementations, we have re-implemented a battle-tested implementation in another language and as such it is considered secure by design unless proven otherwise.</p>\n</blockquote>\n<blockquote>\n<p>An additional note on this point is that any behaviour that the Thorchain model applies is expected to be the intended design in our protocol as well.</p>\n</blockquote>\n<blockquote>\n<p>An important example is the slippage a user incurs on joining a particular LP pool for which there is no check as there can’t be any. Enforcing an LP unit based check here is meaningless given that LP units represent a share that greatly fluctuates (1 unit of LP out of 100 units is different than 1 out of 1000, however, a slippage check for 100 units of DAI for example is valid).</p>\n</blockquote>\n<h2 id=\"h-30-newly-registered-assets-skew-consultation-results\" style=\"position:relative;\"><a href=\"#h-30-newly-registered-assets-skew-consultation-results\" aria-label=\"h 30 newly registered assets skew consultation results permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/249\">[H-30] Newly Registered Assets Skew Consultation Results</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-24\" style=\"position:relative;\"><a href=\"#impact-24\" aria-label=\"impact 24 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>TwapOracle.consult()</code> function iterates over all token pairs which belong to either <code>VADER</code> or USDV` and then calculates the price of the respective asset by using both UniswapV2 and Chainlink price data. This helps to further protect against price manipulation attacks as the price is averaged out over the various registered token pairs.</p>\n<p>If a new asset is added by first registering the token pair and aggregator, the consultation result for that token pair will remain skewed until the next update interval. This is due to the fact that the native asset amount will return <code>0</code> due to the default <code>price1Average</code> value being used. However, the Chainlink oracle will return a valid result. As a result, the query will be skewed in favour of <code>sumUSD</code> resulting in incorrect consultations.</p>\n<p>I’d classify this issue as high risk as the oracle returns false results upon being consulted. This can lead to issues in other areas of the protocol that use this data in performing sensitive actions.</p>\n<h4 id=\"proof-of-concept-21\" style=\"position:relative;\"><a href=\"#proof-of-concept-21\" aria-label=\"proof of concept 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L115-L157\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L115-L157</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L314\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L314</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L322-L369\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L322-L369</a></li>\n</ul>\n<h4 id=\"tools-used-8\" style=\"position:relative;\"><a href=\"#tools-used-8\" aria-label=\"tools used 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-23\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-23\" aria-label=\"recommended mitigation steps 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider performing proper checks to ensure that if <code>pairData.price1Average._x == 0</code>, then the Chainlink aggregator is not queried and not added to <code>sumUSD</code>. Additionally, it may be useful to fix the current check to assert that the <code>pairData.price1Average.mul(1).decode144()</code> result is not <code>0</code>, found <a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L129-L132\">here</a>. <code>require(sumNative != 0)</code> is used to assert this, however, this should be <code>require(pairData.price1Average.mul(1).decode144() != 0)</code> instead.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/249\">SamSteinGG (Vader) confirmed</a></strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"h-31-unused-slippage-params\" style=\"position:relative;\"><a href=\"#h-31-unused-slippage-params\" aria-label=\"h 31 unused slippage params permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/253\">[H-31] Unused slippage params</a></h2>\n<p><em>Submitted by pauliax, also found by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-25\" style=\"position:relative;\"><a href=\"#impact-25\" aria-label=\"impact 25 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Unused slippage params.\nfunction <code>addLiquidity</code> in VaderRouter (both V1 and V2) do not use slippage parameters:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// amountAMin = unused</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// amountBMin = unused</span></span></span></code></pre>\n<p>making it susceptible to sandwich attacks / MEV.\nFor a more detailed explanation, see: <a href=\"https://github.com/code-423n4/2021-09-bvecvx-findings/issues/57\">https://github.com/code-423n4/2021-09-bvecvx-findings/issues/57</a></p>\n<h4 id=\"recommended-mitigation-steps-24\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-24\" aria-label=\"recommended mitigation steps 24 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider paying some attention to the slippage to reduce possible manipulation attacks from mempool snipers.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/253#issuecomment-979186152\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>Slippage checks are impossible in the Thorchain CLP model.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/253#issuecomment-991471469\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Taking as main over #1 as it is a more general issue, but refer to #1 for a more detailed description and justification for the severity rating.</p>\n</blockquote>\n<h2 id=\"h-32-covering-impermanent-loss-allows-profiting-off-asymmetric-liquidity-provision-at-expense-of-reserve-holdings\" style=\"position:relative;\"><a href=\"#h-32-covering-impermanent-loss-allows-profiting-off-asymmetric-liquidity-provision-at-expense-of-reserve-holdings\" aria-label=\"h 32 covering impermanent loss allows profiting off asymmetric liquidity provision at expense of reserve holdings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/255\">[H-32] Covering impermanent loss allows profiting off asymmetric liquidity provision at expense of reserve holdings</a></h2>\n<p><em>Submitted by hyh</em></p>\n<h4 id=\"impact-26\" style=\"position:relative;\"><a href=\"#impact-26\" aria-label=\"impact 26 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Pool funds will be siphoned out over time as swaps and asymmetric LP provision are balancing each other economically, while with introduction of IL reimbursement a malicious user can profit immediately from out of balance pool with a swap and profit again from IL coverage. This requires locking liquidity to a pool, but still represents an additional profit without additional risk at expense of reserve funds.</p>\n<p>Another variant of exploiting this is to add liquidity in two steps: deposit 1 with 0 slip adjustment, perfectly matching current market price, deposit 2 with more Vader than market price suggests, moving pool out of balance with Vader becoming cheaper, then exiting deposit 1 with profit because slip adjustment reduce deposit 2’s share issuance and deposit 1’s now has more asset claims than before. Deposit 2 then need to wait and exit after some time.</p>\n<p>IL is calculated as <code>((originalAsset * releasedVader) / releasedAsset) + originalVader - ((releasedAsset * releasedVader) / releasedAsset) + releasedVader</code>, i.e. original deposit values without taking account of slip adjustment are used, so providing more Vader in deposit 2 leads to greater IL, which this way have 2 parts: market movements related and skewed liquidity provision related. IL covering compensates for slip adjustments this way.</p>\n<h4 id=\"proof-of-concept-22\" style=\"position:relative;\"><a href=\"#proof-of-concept-22\" aria-label=\"proof of concept 22 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The steps to reproduce are:</p>\n<ol>\n<li>add asymmetric LP via mint (with NFT),</li>\n<li>either swap gathering profit from pool skew or do symmetric deposit beforehand and exit it now</li>\n<li>wait for some period for IL protection to be enabled, then withdraw, having IL covered by reserve fund</li>\n</ol>\n<p>Router addLiquidity:\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/router/VaderRouterV2.sol#L114\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/router/VaderRouterV2.sol#L114</a></p>\n<p>NFT mint:\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/BasePoolV2.sol#L168\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/BasePoolV2.sol#L168</a></p>\n<p>Router removeLiquidity:\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/router/VaderRouterV2.sol#L227\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/router/VaderRouterV2.sol#L227</a></p>\n<p>NFT burn:\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L237\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L237</a></p>\n<p>IL calculation:\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/math/VaderMath.sol#L73\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/math/VaderMath.sol#L73</a></p>\n<h4 id=\"recommended-mitigation-steps-25\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-25\" aria-label=\"recommended mitigation steps 25 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Asymmetric liquidity provision doesn’t provide much business value, introducing substantial attack surface, so the core recommendation here is to remove a possibility to add liquidity asymmetrically: instead of penalizing LP with slip adjustment do biggest liquidity addition with 0 slip adjustment that user provided funds allow, and return the remaining part.</p>\n<p>This will also guard against cases when user added liquidity with big slip adjustment penalty without malicious intent, not realizing that this penalty will take place, an effect that poses reputational risk to any project using the approach.</p>\n<p>Allowing only symmetric liquidity addition removes the described attack surface.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/255\">SamSteinGG (Vader) marked as duplicate</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/255#issuecomment-991000377\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of which other issue, @SamSteinGG?</p>\n</blockquote>\n<h2 id=\"h-33-mixing-different-types-of-lp-shares-can-lead-to-losses-for-synth-holders\" style=\"position:relative;\"><a href=\"#h-33-mixing-different-types-of-lp-shares-can-lead-to-losses-for-synth-holders\" aria-label=\"h 33 mixing different types of lp shares can lead to losses for synth holders permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/257\">[H-33] Mixing different types of LP shares can lead to losses for Synth holders</a></h2>\n<p><em>Submitted by hyh</em></p>\n<h4 id=\"impact-27\" style=\"position:relative;\"><a href=\"#impact-27\" aria-label=\"impact 27 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Users that mint Synths do not get pool shares, so exiting of normal LP can lead to their losses as no funds can be left for retrieval.</p>\n<h4 id=\"proof-of-concept-23\" style=\"position:relative;\"><a href=\"#proof-of-concept-23\" aria-label=\"proof of concept 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>3 types of mint/burn: NFT, Fungible and Synths. Synths are most vilnerable as they do not have share: LP own the pool, so Synth’s funds are lost in scenarios similar to:</p>\n<ol>\n<li>LP deposit both sides to a pool</li>\n<li>Synth deposit and mint a Synth</li>\n<li>LP withdraws all as she owns all the pool liquidity, even when provided only part of it</li>\n<li>Synth can’t withdraw as no assets left</li>\n</ol>\n<p>burn NFT LP:\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/BasePoolV2.sol#L270\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/BasePoolV2.sol#L270</a></p>\n<p>burn fungible LP:\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L374\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/pool/VaderPoolV2.sol#L374</a></p>\n<h4 id=\"recommended-mitigation-steps-26\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-26\" aria-label=\"recommended mitigation steps 26 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Take into account liquidity that was provided by Synth minting.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/257\">SamSteinGG (Vader) confirmed</a></strong> </p>\n<h2 id=\"h-34-incorrect-accrual-of-sumnative-and-sumusd-in-producing-consultation-results-\" style=\"position:relative;\"><a href=\"#h-34-incorrect-accrual-of-sumnative-and-sumusd-in-producing-consultation-results-\" aria-label=\"h 34 incorrect accrual of sumnative and sumusd in producing consultation results  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/260\">[H-34] Incorrect Accrual Of <code>sumNative</code> and <code>sumUSD</code> In Producing Consultation Results </a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-28\" style=\"position:relative;\"><a href=\"#impact-28\" aria-label=\"impact 28 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>TwapOracle.consult()</code> function iterates over all token pairs which belong to either <code>VADER</code> or USDV` and then calculates the price of the respective asset by using both UniswapV2 and Chainlink price data. This helps to further protect against price manipulation attacks as the price is averaged out over the various registered token pairs.</p>\n<p>Let’s say we wanted to query the price of <code>USDV</code>, we would sum up any token pair where <code>USDV == pairData.token0</code>.</p>\n<p>The sum consists of the following:</p>\n<ul>\n<li>Price of <code>USDV</code> denominated in terms of <code>token1</code> (<code>USDV/token1</code>).</li>\n<li>Price of token1 denominated in terms of <code>USD</code> (<code>token1/USD</code>).</li>\n</ul>\n<p>Consider the following example:</p>\n<ul>\n<li><code>SUSHI</code> and <code>UNISWAP</code> are the only registered token pairs that exist alongside <code>USDV</code>.</li>\n<li>Hence, calculating <code>sumNative</code> gives us an exchange rate that is denominated as the sum of <code>USDV/SUSHI</code> and <code>USDV/UNISWAP</code>.</li>\n<li>Similarly, <code>sumUSD</code> gives us the following denominated pairs, <code>SUSHI/USD</code> and <code>UNISWAP/USD</code>.</li>\n<li>Summing <code>sumUSD</code> and <code>sumNative</code> produces an entirely incorrect result as compared to multiplying the two results first and then summing.</li>\n<li>The issue is equivalent to the same issue as performing <code>(p1 + p2)*(q1 + q2)</code> as compared to <code>(p1*q1 + p2*q2)</code>. Obviously, these two results are not equivalent, however, the <code>consult()</code> function treats them as such.</li>\n<li>If we multiply the native price and Chainlink oracle results, then we can correctly calculate the price as such; <code>(SUSHI/USD * USDV/SUSHI + UNISWAP/USD * USDV/UNISWAP) / 2</code>, which should correctly give us the correct denomination and average price.</li>\n</ul>\n<p>However, the protocol calculates it as <code>((SUSHI/USD + UNISWAP/USD) * token.decimals()) / (USDV/SUSHI + USDV/UNISWAP)</code> which gives us an incorrectly denominated result.</p>\n<p>I’d classify this issue as high risk as the oracle returns false results upon being consulted. This can lead to issues in other areas of the protocol that use this data in performing sensitive actions.</p>\n<h4 id=\"proof-of-concept-24\" style=\"position:relative;\"><a href=\"#proof-of-concept-24\" aria-label=\"proof of concept 24 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L115-L157\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L115-L157</a></p>\n<p>Similar working implementation listed below:</p>\n<ul>\n<li><a href=\"https://github.com/gg2001/dpx-oracle/blob/master/contracts/UniswapV2Oracle.sol#L184-L211\">https://github.com/gg2001/dpx-oracle/blob/master/contracts/UniswapV2Oracle.sol#L184-L211</a></li>\n<li><a href=\"https://github.com/gg2001/dpx-oracle/blob/master/contracts/UniswapV2Oracle.sol#L291-L304\">https://github.com/gg2001/dpx-oracle/blob/master/contracts/UniswapV2Oracle.sol#L291-L304</a></li>\n</ul>\n<h4 id=\"tools-used-9\" style=\"position:relative;\"><a href=\"#tools-used-9\" aria-label=\"tools used 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-27\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-27\" aria-label=\"recommended mitigation steps 27 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>To calculate the correct consultation of a given token, the returned result should consist of a sum of <code>priceUSD * token.decimals() * priceNative</code> divided by the number of calculations. This should correctly take the average token pair price.</p>\n<p>The following snippet of code details the relevant fix:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function consult(address token) public view returns (uint256 result) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 pairCount = _pairs.length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i = 0; i &lt; pairCount; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            PairData memory pairData = _pairs[i];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            if (token == pairData.token0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                //</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                // TODO - Review:</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                //   Verify price1Average is amount of USDV against 1 unit of token1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                //</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                priceNative = pairData.price1Average.mul(1).decode144(); // native asset amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                if (pairData.price1Average._x != 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    require(priceNative != 0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    continue; // should skip newly registered assets that have not been updated yet.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    uint80 roundID,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    int256 price,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    ,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    ,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    uint80 answeredInRound</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                ) = AggregatorV3Interface(_aggregators[pairData.token1])</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                        .latestRoundData();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    answeredInRound &gt;= roundID,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    &quot;TwapOracle::consult: stale chainlink price&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    price != 0,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    &quot;TwapOracle::consult: chainlink malfunction&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                priceUSD = uint256(price) * (10**10);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                result += ((priceUSD * IERC20Metadata(token).decimals()) * priceNative);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(sumNative != 0, &quot;TwapOracle::consult: Sum of native is zero&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return result;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/260\">SamSteinGG (Vader) confirmed</a></strong> </p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-23\" style=\"position:relative;\"><a href=\"#medium-risk-findings-23\" aria-label=\"medium risk findings 23 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (23)</h1>\n<h2 id=\"m-01-unbounded-loop-in-twaporacleupdate-can-result-in-oracle-being-locked\" style=\"position:relative;\"><a href=\"#m-01-unbounded-loop-in-twaporacleupdate-can-result-in-oracle-being-locked\" aria-label=\"m 01 unbounded loop in twaporacleupdate can result in oracle being locked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/8\">[M-01] Unbounded loop in TwapOracle.update can result in oracle being locked</a></h2>\n<p><em>Submitted by TomFrenchBlockchain, also found by pauliax</em></p>\n<h4 id=\"impact-29\" style=\"position:relative;\"><a href=\"#impact-29\" aria-label=\"impact 29 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Loss of ability of <code>TwapOracle</code> to update should too many pools be added.</p>\n<h4 id=\"proof-of-concept-25\" style=\"position:relative;\"><a href=\"#proof-of-concept-25\" aria-label=\"proof of concept 25 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>TwapOracle</code> allows an unlimited number of pairs to be added and has no way of removing pairs after the fact. At the same time <code>TwapOracle.update</code> iterates through all pairs in order to update value for each pair.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L322-L369\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L322-L369</a></p>\n<p><code>TwapOracle.registerPair</code> is a permissioned function so that only the owner can add new pairs however should the owner account be compromised or not mindful of the number of pairs being added it is possible to put the oracle into a state in which it is unable to update. The oracle cannot recover from this state.</p>\n<h4 id=\"recommended-mitigation-steps-28\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-28\" aria-label=\"recommended mitigation steps 28 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Possible options:</p>\n<ul>\n<li>Add a method to stop tracking a particular pair</li>\n<li>Allow updating a subset of all pairs at a time.</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/8#issuecomment-979105912\">SamSteinGG (Vader) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>The severity of the finding should be reduced as it relies on ill behavior from its owner which is a multisignature address.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/8#issuecomment-991505334\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The severity rating is valid since the signers might not be aware of the limitation, or the limitation might be reached by natural means.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/8#issuecomment-999354285\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"m-02-should-a-chainlink-aggregator-become-stuck-in-a-stale-state-then-twaporacle-will-become-irrecoverably-broken\" style=\"position:relative;\"><a href=\"#m-02-should-a-chainlink-aggregator-become-stuck-in-a-stale-state-then-twaporacle-will-become-irrecoverably-broken\" aria-label=\"m 02 should a chainlink aggregator become stuck in a stale state then twaporacle will become irrecoverably broken permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/16\">[M-02] Should a Chainlink aggregator become stuck in a stale state then TwapOracle will become irrecoverably broken</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-30\" style=\"position:relative;\"><a href=\"#impact-30\" aria-label=\"impact 30 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Inability to call <code>consult</code> on the TwapOracle and so calculate the exchange rate between USDV and VADER.</p>\n<h4 id=\"proof-of-concept-26\" style=\"position:relative;\"><a href=\"#proof-of-concept-26\" aria-label=\"proof of concept 26 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Should any of the Chainlink aggregators used by the TwapOracle becomes stuck in such a state that the check on L143-146 of <code>TwapOracle.sol</code> consistently fails (through a botched upgrade, etc.) then the <code>consult</code> function will always revert.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L143-L146\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L143-L146</a></p>\n<p>There is no method to update the address of the aggregator to use so the <code>TwapOracle</code> will be irrecoverable.</p>\n<h4 id=\"recommended-mitigation-steps-29\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-29\" aria-label=\"recommended mitigation steps 29 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Allow governance to update the aggregator for a pair (ideally with a timelock.)</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/16#issuecomment-979117099\">SamSteinGG (Vader) diagreed with severity</a>:</strong></p>\n<blockquote>\n<p>The scenario of a Chainlink oracle ceasing function is very unlikely and would cause widespread issues in the DeFi space as a whole.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/16#issuecomment-991838030\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’m going to maintain the severity 2 rating despite the low probability of a Chainlink aggregator being permanently disabled. The risk exists, and in general third-party dependencies should be treated with respect in code and documentation.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/16#issuecomment-999354209\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"m-03-permissioned-nature-of-twaporacle-allows-owner-to-manipulate-oracle\" style=\"position:relative;\"><a href=\"#m-03-permissioned-nature-of-twaporacle-allows-owner-to-manipulate-oracle\" aria-label=\"m 03 permissioned nature of twaporacle allows owner to manipulate oracle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/20\">[M-03] Permissioned nature of <code>TwapOracle</code> allows owner to manipulate oracle</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-31\" style=\"position:relative;\"><a href=\"#impact-31\" aria-label=\"impact 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Potentially frozen or purposefully inaccurate USDV:VADER price feed.</p>\n<h4 id=\"proof-of-concept-27\" style=\"position:relative;\"><a href=\"#proof-of-concept-27\" aria-label=\"proof of concept 27 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L322\">https://github.com/code-423n4/2021-11-vader/blob/3a43059e33d549f03b021d6b417b7eeba66cf62e/contracts/twap/TwapOracle.sol#L322</a></p>\n<p>Only the owner of <code>TwapOracle</code> can call <code>update</code> on the oracle. Should the owner desire they could cease calling <code>update</code> on the oracle for a period. Over this period the relative prices of VADER and USDC will vary.</p>\n<p>After some period <code>timeElapsed</code> the owner can call <code>update</code> again. A TWAP is a lagging indicator and due to the owner ceasing to update the oracle so <code>timeElapsed</code> will be very large, therefore we’re averaging over a long period into the past resulting in a value which may not be representative of the current USDV:VADER exchange rate.</p>\n<p>The owner can therefore selectively update the oracle so to result in prices which allow them to extract value from the system.</p>\n<h4 id=\"recommended-mitigation-steps-30\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-30\" aria-label=\"recommended mitigation steps 30 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Remove the permissioning from <code>TwapOracle.update</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/20\">SamSteinGG (Vader) marked as duplicate</a></strong> </p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/20#issuecomment-991011036\">alcueca commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of which other issue, @SamSteinGG?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/20#issuecomment-999353780\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"m-04-inconsistent-balance-when-supplying-transfer-on-fee-or-deflationary-tokens\" style=\"position:relative;\"><a href=\"#m-04-inconsistent-balance-when-supplying-transfer-on-fee-or-deflationary-tokens\" aria-label=\"m 04 inconsistent balance when supplying transfer on fee or deflationary tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/30\">[M-04] Inconsistent balance when supplying transfer-on-fee or deflationary tokens</a></h2>\n<p><em>Submitted by Reigada</em></p>\n<h4 id=\"impact-32\" style=\"position:relative;\"><a href=\"#impact-32\" aria-label=\"impact 32 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>In the contract StakingRewards, the stake function assume that the amount of stakingToken is transferred to the smart contract after calling the safeTransferFrom function (and thus it updates the <code>\\_balances</code> mapping). However, this may not be true if the stakingToken is a transfer-on-fee token or a deflationary/rebasing token, causing the received amount to be less than the accounted amount in the <code>\\_balances</code> mapping.</p>\n<p>Same can be applied for the withdraw function.</p>\n<h4 id=\"proof-of-concept-28\" style=\"position:relative;\"><a href=\"#proof-of-concept-28\" aria-label=\"proof of concept 28 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/staking-rewards/StakingRewards.sol#L100-L102\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/staking-rewards/StakingRewards.sol#L100-L102</a></p>\n<h4 id=\"tools-used-10\" style=\"position:relative;\"><a href=\"#tools-used-10\" aria-label=\"tools used 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review</p>\n<h4 id=\"recommended-mitigation-steps-31\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-31\" aria-label=\"recommended mitigation steps 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Get the actual received amount by calculating the difference of token balance before and after the transfer. For example:\n<code>uint256 balanceBefore = stakingToken.balanceOf(address(this)); stakingToken.safeTransferFrom(msg.sender, address(this), amount); uint256 receivedAmount = stakingToken.balanceOf(address(this)) - balanceBefore; \\_totalSupply = \\_totalSupply.add(receivedAmount); \\_balances\\[msg.sender] = \\_balances\\[msg.sender].add(receivedAmount);</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/30#issuecomment-968674323\">0xstormtrooper (Vader) acknowledged</a>:</strong></p>\n<blockquote>\n<p>VADER / USDV fee on transfer will be removed</p>\n</blockquote>\n<h2 id=\"m-05-linearvesting-does-not-calculate-vested-amount-linearly\" style=\"position:relative;\"><a href=\"#m-05-linearvesting-does-not-calculate-vested-amount-linearly\" aria-label=\"m 05 linearvesting does not calculate vested amount linearly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/44\">[M-05] LinearVesting does not calculate vested amount linearly</a></h2>\n<p><em>Submitted by xYrYuYx</em></p>\n<h4 id=\"impact-33\" style=\"position:relative;\"><a href=\"#impact-33\" aria-label=\"impact 33 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/tokens/vesting/LinearVesting.sol#L261\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/tokens/vesting/LinearVesting.sol#L261</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/tokens/vesting/LinearVesting.sol#L294\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/tokens/vesting/LinearVesting.sol#L294</a></li>\n</ul>\n<p>These calculations are incorrect for linear vesting.</p>\n<h4 id=\"proof-of-concept-29\" style=\"position:relative;\"><a href=\"#proof-of-concept-29\" aria-label=\"proof of concept 29 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>i.e.\nif start amount is 10000, and duration is 100 seconds.\nAfter 50 seconds, user can claim 5000 which is 50%</p>\n<p>After another 10 seconds, user need to claim 1000 which is 10%, but current calculation return 500.</p>\n<h4 id=\"tools-used-11\" style=\"position:relative;\"><a href=\"#tools-used-11\" aria-label=\"tools used 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual</p>\n<h4 id=\"recommended-mitigation-steps-32\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-32\" aria-label=\"recommended mitigation steps 32 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Change formula to\n<code>User total amount * (block.timestamp – start) / (vesting duration) – user claimed amount.</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/44\">SamSteinGG (Vader) confirmed</a></strong> </p>\n<h2 id=\"m-06-add-liquidity-is-vulnerable-to-sandwich-attack\" style=\"position:relative;\"><a href=\"#m-06-add-liquidity-is-vulnerable-to-sandwich-attack\" aria-label=\"m 06 add liquidity is vulnerable to sandwich attack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/67\">[M-06] add liquidity is vulnerable to sandwich attack</a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<h3 id=\"add-liquidity-is-vulnerable-to-mev\" style=\"position:relative;\"><a href=\"#add-liquidity-is-vulnerable-to-mev\" aria-label=\"add liquidity is vulnerable to mev permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>add liquidity is vulnerable to MEV</h3>\n<h4 id=\"impact-34\" style=\"position:relative;\"><a href=\"#impact-34\" aria-label=\"impact 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><code>addLiquidity</code> in the VaderRouter and VaderRouterV2 contract does not check the minimum liquidity amount. This makes users’ funds vulnerable to sandwich attacks.</p>\n<p>The team says a minimum amount is not required as the VaderPool supports imbalanced mint. However, imbalanced mint is a helper function of buying tokens and providing to lp. A sandwich attack would take over more than 50% of a transaction in an illiquid pool.</p>\n<p>Given the current network environment, most transactions in the mempool would be sandwiched. However, users may avoid this attack if they only send tx through <a href=\"https://medium.com/alchemistcoin/how-to-add-flashbots-protect-rpc-to-your-metamask-3f1412a16787\">flashbot RPC</a>. I consider this is a medium-risk issue.</p>\n<h4 id=\"proof-of-concept-30\" style=\"position:relative;\"><a href=\"#proof-of-concept-30\" aria-label=\"proof of concept 30 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex-v2/router/VaderRouterV2.sol#L77-L96\">VaderRouterV2.sol#L77-L96</a></p>\n<p>That says a user wants to provide 1M ETH in the pool.\nAttackers can sandwich this trade as follows:</p>\n<ol>\n<li>Buy Vader with 10M ETH and makes ETH extremely cheap</li>\n<li><em>Put user’s tx here</em> User’s tx would first buy a lot Vader and deposit to the pool.</li>\n<li>Since ETH becomes even cheaper in the pool. The MEV attacker buyback ETH and get profit.</li>\n</ol>\n<h4 id=\"tools-used-12\" style=\"position:relative;\"><a href=\"#tools-used-12\" aria-label=\"tools used 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-33\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-33\" aria-label=\"recommended mitigation steps 33 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Always check how much liquidity a user received in a transaction. A tx would not be sandwiched if it’s not profitable.</p>\n<p>We could learn a lot about MEV from <a href=\"https://twitter.com/bertcmiller\">Robert Miller’tweets</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/67#issuecomment-979142887\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>The design of the Thorchain CLP model is meant to prevent flash-loan based attacks as it allows a maximum trade size of 25% on a given iteration with a high-enough fee to render the attack unprofitable. Please request a tangible test case from the warden to consider this exhibit valid.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/67#issuecomment-991469716\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>There is no documentation stating that the deployment of Vader is restricted to Thorchain. The issue is valid.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/67#issuecomment-995755429\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca The model itself is what has this trait, it does not relate to the blockchain implementation itself. It is intended functionality as with its parent implementation.</p>\n</blockquote>\n<h2 id=\"m-07-missing-hasstarted-modifier-can-lead-to-user-vesting-before-the-owner-begin-the-vesting\" style=\"position:relative;\"><a href=\"#m-07-missing-hasstarted-modifier-can-lead-to-user-vesting-before-the-owner-begin-the-vesting\" aria-label=\"m 07 missing hasstarted modifier can lead to user vesting before the owner begin the vesting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/90\">[M-07] Missing hasStarted modifier, can lead to user vesting before the owner begin the vesting</a></h2>\n<p><em>Submitted by rfa</em></p>\n<h4 id=\"impact-35\" style=\"position:relative;\"><a href=\"#impact-35\" aria-label=\"impact 35 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>In the <code>claimConverted()</code> function, the user can vest their vader token for a certain amount of time, but <code>hasStarted</code> modifier is missing,\nthis can lead to <code>claimConverted()</code> function is callable by anyone, and the user can claim eventhough the vesting havent been started by the owner.</p>\n<h4 id=\"proof-of-concept-31\" style=\"position:relative;\"><a href=\"#proof-of-concept-31\" aria-label=\"proof of concept 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/tokens/vesting/LinearVesting.sol#L158\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/tokens/vesting/LinearVesting.sol#L158</a></p>\n<h4 id=\"recommended-mitigation-steps-34\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-34\" aria-label=\"recommended mitigation steps 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>add hasStarted modifier</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/90#issuecomment-979146481\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of #89</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/90#issuecomment-991033983\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Not a duplicate, different line.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/90#issuecomment-995751409\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca This should be invalid.</p>\n</blockquote>\n<h2 id=\"m-08-user-may-not-receive-the-full-amount-of-il-compensation\" style=\"position:relative;\"><a href=\"#m-08-user-may-not-receive-the-full-amount-of-il-compensation\" aria-label=\"m 08 user may not receive the full amount of il compensation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/100\">[M-08] User may not receive the full amount of IL compensation</a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<h4 id=\"impact-36\" style=\"position:relative;\"><a href=\"#impact-36\" aria-label=\"impact 36 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The user would not get full IL compensation if there’s not enough funds in the reserve.\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/reserve/VaderReserve.sol#L76-L91\">VaderReserve.sol#L76-L91</a></p>\n<p>VaderReserve.sol#L85</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actualAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_min</span><span class=\"mtk1\">(</span><span class=\"mtk11\">reserve</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>While this is reasonable, users should be able to specify the minimum received amount in the transaction. Otherwise, it’s vulnerable to some kind of MEV attack.</p>\n<p>I consider this is a medium-risk issue.</p>\n<h4 id=\"proof-of-concept-32\" style=\"position:relative;\"><a href=\"#proof-of-concept-32\" aria-label=\"proof of concept 32 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The user can not specify a minimum IL compensation in the router.\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/router/VaderRouter.sol#L169-L207\">VaderRouter.sol#L169-L207</a></p>\n<p>The user may not receive the full amount of compensation.\n<a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/reserve/VaderReserve.sol#L76-L91\">VaderReserve.sol#L76-L91</a></p>\n<h4 id=\"tools-used-13\" style=\"position:relative;\"><a href=\"#tools-used-13\" aria-label=\"tools used 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-35\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-35\" aria-label=\"recommended mitigation steps 35 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Users should be able to protect themselves when burning lp.</p>\n<p>Some possible fixes:</p>\n<ol>\n<li>Return the actual amount this line <code>reserve.reimburseImpermanentLoss(msg.sender, coveredloss);</code></li>\n<li>Checks whether there’s slippage. Revert if the user doesn’t receive the full amount.</li>\n</ol>\n<p>We can add a new parameter in the function.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">actualCompensation</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">minimumCompensation</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Or we can check the <code>amountAMin</code> after receiving the compensation.\n( assume tokenA is native token)</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amountA</span><span class=\"mtk1\"> +</span><span class=\"mtk12\">actualCompensation</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">amountAMin</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/100#issuecomment-979149401\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p> This is intended functionality of the protocol to account for rounding errors and is a principle similar to SushiSwap’s MasterChef contract.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/100#issuecomment-991485882\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The sponsor acknowledges the issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/100#issuecomment-995744194\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca They are never meant however it should still be possible to do so. With Uniswap V2, it is possible to interact with the contracts directly however doing so (without using a smart contract) will result in the same vulnerabilities as described in the issue. This is not intended usage and as such does not constitute an issue unless it is implied that the Uniswap V2 implementation is incorrect.\nIntended functionality of the protocol cannot constitute a risk issue. This has been classified as a medium risk issue but it follows the standardized conventions of implementations like Sushiswap which are live.</p>\n</blockquote>\n<h2 id=\"m-09-the-first-lp-provider-can-destroy-the-pool\" style=\"position:relative;\"><a href=\"#m-09-the-first-lp-provider-can-destroy-the-pool\" aria-label=\"m 09 the first lp provider can destroy the pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/109\">[M-09] The first lp provider can destroy the pool</a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<h4 id=\"impact-37\" style=\"position:relative;\"><a href=\"#impact-37\" aria-label=\"impact 37 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>First lp provider received liquidity amount same as the nativeDeposit amount and decides the rate. If the first lp sets the pool’s rate to an extreme value no one can deposit to the pool afterward. (please refer to the proof of concept section)</p>\n<p>A malicious attacker can DOS the system by back-running the <code>setTokenSupport</code> and setting the pools’ price to the extreme.\nI consider this is a medium-risk issue.</p>\n<h4 id=\"proof-of-concept-33\" style=\"position:relative;\"><a href=\"#proof-of-concept-33\" aria-label=\"proof of concept 33 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"python\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    deposit_amount = </span><span class=\"mtk7\">1000</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    get_token(dai, user, deposit_amount*</span><span class=\"mtk7\">3</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    get_token(vader, user, deposit_amount*</span><span class=\"mtk7\">3</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    dai.functions.approve(pool.address, deposit_amount*</span><span class=\"mtk7\">3</span><span class=\"mtk1\">).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    link.functions.approve(pool.address, deposit_amount*</span><span class=\"mtk7\">3</span><span class=\"mtk1\">).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># deposit_amount = 1000 * 10**18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># # first deposit 1 wei Dai and 1 vader to the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    router.functions.addLiquidity(dai.address, vader.address, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">, user, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">print</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;received liquidity&#39;</span><span class=\"mtk1\">, pool.functions.positions(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">).call()[</span><span class=\"mtk7\">2</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># output log:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># 1000000000000000000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># normally deposit to the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    router.functions.addLiquidity(dai.address, vader.address, deposit_amount, deposit_amount, user, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">).transact()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">print</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;received liquidity&#39;</span><span class=\"mtk1\">, pool.functions.positions(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">).call()[</span><span class=\"mtk7\">2</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># output log:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># 500000000000000000500000000000000000000</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># no one can deposit to the pool now</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># there would be revert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    router.functions.addLiquidity(dai.address, vader.address, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, deposit_amount, user, </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk7\">18</span><span class=\"mtk1\">).transact()</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/math/VaderMath.sol#L42\">VaderMath.sol#L42</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ((</span><span class=\"mtk12\">totalPoolUnits</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">poolUnitFactor</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">denominator</span><span class=\"mtk1\">) * </span><span class=\"mtk12\">slip</span></span></span></code></pre>\n<p>Since the scale of the total supply is (10**18)^2, the operation would overflow.</p>\n<h4 id=\"tools-used-14\" style=\"position:relative;\"><a href=\"#tools-used-14\" aria-label=\"tools used 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-36\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-36\" aria-label=\"recommended mitigation steps 36 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Set a minimum deposit amount (both asset amount and native amount) for the first lp provider.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/109\">SamSteinGG (Vader) confirmed</a></strong></p>\n<h2 id=\"m-10-should-check-return-data-from-chainlink-aggregators\" style=\"position:relative;\"><a href=\"#m-10-should-check-return-data-from-chainlink-aggregators\" aria-label=\"m 10 should check return data from chainlink aggregators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/120\">[M-10] SHOULD CHECK RETURN DATA FROM CHAINLINK AGGREGATORS</a></h2>\n<p><em>Submitted by defsec</em></p>\n<h4 id=\"impact-38\" style=\"position:relative;\"><a href=\"#impact-38\" aria-label=\"impact 38 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The consult function in the contract TwapOracle.sol fetches the asset price from a Chainlink aggregator using the latestRoundData function. However, there are no checks on timeStamp, resulting in stale prices. The oracle wrapper calls out to a chainlink oracle receiving the latestRoundData(). It then checks freshness by verifying that the answer is indeed for the last known round. The returned updatedAt timestamp is not checked.</p>\n<p>If there is a problem with chainlink starting a new round and finding consensus on the new value for the oracle (e.g. chainlink nodes abandon the oracle, chain congestion, vulnerability/attacks on the chainlink system) consumers of this contract may continue using outdated stale data (if oracles are unable to submit no new round is started)</p>\n<h4 id=\"proof-of-concept-34\" style=\"position:relative;\"><a href=\"#proof-of-concept-34\" aria-label=\"proof of concept 34 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Navigate to ”<a href=\"https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/twap/TwapOracle.sol#L141\">https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/twap/TwapOracle.sol#L141</a>” contract.</li>\n<li>consult function does not check timestamp on the latestRoundData.</li>\n</ol>\n<h4 id=\"tools-used-15\" style=\"position:relative;\"><a href=\"#tools-used-15\" aria-label=\"tools used 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-37\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-37\" aria-label=\"recommended mitigation steps 37 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider to add checks on the return data with proper revert messages if the price is stale or the round is incomplete, for example:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(uint80 roundID, int256 price, , uint256 timeStamp, uint80 answeredInRound) = ETH_CHAINLINK.latestRoundData();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">require(timeStamp != 0, &quot;...&quot;);</span></span></code></pre>\n<p>Consider checking the oracle responses updatedAt value after calling out to chainlinkOracle.latestRoundData() verifying that the result is within an allowed margin of freshness.</p>\n<ul>\n<li><a href=\"https://docs.chain.link/docs/faq/#how-can-i-check-if-the-answer-to-a-round-is-being-carried-over-from-a-previous-round\">https://docs.chain.link/docs/faq/#how-can-i-check-if-the-answer-to-a-round-is-being-carried-over-from-a-previous-round</a></li>\n<li><a href=\"https://blog.openzeppelin.com/secure-smart-contract-guidelines-the-dangers-of-price-oracles/\">https://blog.openzeppelin.com/secure-smart-contract-guidelines-the-dangers-of-price-oracles/</a></li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/120\">SamSteinGG (Vader) confirmed</a></strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"m-11-twap-oracle-inflexible-_updateperiod\" style=\"position:relative;\"><a href=\"#m-11-twap-oracle-inflexible-_updateperiod\" aria-label=\"m 11 twap oracle inflexible _updateperiod permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/136\">[M-11] TWAP Oracle inflexible <code>_updatePeriod</code></a></h2>\n<p><em>Submitted by elprofesor</em></p>\n<h4 id=\"impact-39\" style=\"position:relative;\"><a href=\"#impact-39\" aria-label=\"impact 39 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Update periods in TWAP oracles reflect risk of an asset.  Updating more frequently accurately prices an asset but increases capabilities of manipulation (which should be harder with more stable assets), whereas longer update periods prevent manipulation but does not accurately price assets (due to the time difference between updates). Volatility of an asset should be considered when calculating update periods. However, in Vader’s <code>TwapOracle.sol</code> no such considerations are made, the <code>_updatePeriod</code> cannot be changed after deployment of the contract. Additionally, each asset uses the same <code>_updatePeriod</code>  which does not adequately account for the differences in risk for each asset. This could lead to price manipulation or inadequate pricing of assets.</p>\n<h4 id=\"proof-of-concept-35\" style=\"position:relative;\"><a href=\"#proof-of-concept-35\" aria-label=\"proof of concept 35 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/twap/TwapOracle.sol#L80\">the only chance to set <code>_updatePeriod</code></a></p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/twap/TwapOracle.sol#L345\"><code>_updatePeriod</code> used in time elapsed calculation</a></p>\n<h4 id=\"recommended-mitigation-steps-38\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-38\" aria-label=\"recommended mitigation steps 38 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add the following function</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function setUpdatePeriod(uint256 newUpdatePeriod) external onlyOwner {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(newUpdatePeriod &gt; minimumUpdatePeriod, &quot;Update period must be larger than threshold&quot;); // Optional validation based on some risk tolerance</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    _updatePeriod = newUpdatePeriod;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/136#issuecomment-970374263\">CloudEllie (organizer) commented</a>:</strong></p>\n<blockquote>\n<p>Warden has requested that we add a second mitigation step/strategy to his submission:</p>\n<blockquote>\n<ol start=\"2\">\n<li>Consider adding a configurable update period per asset, this way we are not incorrectly assuming the same risk profile per asset.</li>\n</ol>\n</blockquote>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/136#issuecomment-979161186\">SamSteinGG (Vader) diagreed with severity</a>:</strong></p>\n<blockquote>\n<p> This finding is accurate as the update period should change per oracle, however, it is not of high risk severity.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/136#issuecomment-991836707\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with sponsor, assets are not directly at risk. Severity 2.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/136#issuecomment-999352737\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p> The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"m-12-missing-duplicate-veto-check\" style=\"position:relative;\"><a href=\"#m-12-missing-duplicate-veto-check\" aria-label=\"m 12 missing duplicate veto check permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/137\">[M-12] Missing duplicate veto check</a></h2>\n<p><em>Submitted by defsec</em></p>\n<h4 id=\"impact-40\" style=\"position:relative;\"><a href=\"#impact-40\" aria-label=\"impact 40 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>On the GovernorAlpha contract, function veto has been added. Although the function behaviour is expected, duplicate veto process has not been checked on that function.</p>\n<h4 id=\"proof-of-concept-36\" style=\"position:relative;\"><a href=\"#proof-of-concept-36\" aria-label=\"proof of concept 36 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Navigate to following contract line. (<a href=\"https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/governance/GovernorAlpha.sol#L562\">https://github.com/code-423n4/2021-11-vader/blob/607d2b9e253d59c782e921bfc2951184d3f65825/contracts/governance/GovernorAlpha.sol#L562</a>)</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function veto(uint256 proposalId, bool support) external onlyCouncil {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ProposalState _state = state(proposalId);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _state == ProposalState.Active || _state == ProposalState.Pending,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            &quot;GovernorAlpha::veto: Proposal can only be vetoed when active&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Proposal storage proposal = proposals[proposalId];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address[] memory _targets = proposal.targets;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i = 0; i &lt; _targets.length; i++) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            if (_targets[i] == address(this)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                revert(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                    &quot;GovernorAlpha::veto: council cannot veto on proposal having action with address(this) as target&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        VetoStatus storage _vetoStatus = proposal.vetoStatus;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _vetoStatus.hasBeenVetoed = true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _vetoStatus.support = support;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (support) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            queue(proposalId);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit ProposalVetoed(proposalId, support);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /**</span></span></code></pre>\n<ol start=\"2\">\n<li>The veto progress can be completed per proposal twice.</li>\n</ol>\n<h4 id=\"tools-used-16\" style=\"position:relative;\"><a href=\"#tools-used-16\" aria-label=\"tools used 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>None</p>\n<h4 id=\"recommended-mitigation-steps-39\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-39\" aria-label=\"recommended mitigation steps 39 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider to check if proposals vetoed before.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">VetoStatus storage _vetoStatus = proposal.vetoStatus;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">require(!_vetoStatus.hasBeenVetoed, &quot;Vetoed before&quot;);</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/137#issuecomment-974605812\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of #61</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/137#issuecomment-991038019\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Not a duplicate</p>\n</blockquote>\n<h2 id=\"m-13-basepoolmint-is-callable-by-anyone\" style=\"position:relative;\"><a href=\"#m-13-basepoolmint-is-callable-by-anyone\" aria-label=\"m 13 basepoolmint is callable by anyone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/148\">[M-13] <code>BasePool.mint()</code> Is Callable By Anyone</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-41\" style=\"position:relative;\"><a href=\"#impact-41\" aria-label=\"impact 41 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>BasePool.mint()</code> function differs from its implementation in <code>BasePoolV2.mint()</code> in which it lacks an <code>onlyRouter</code> modifier. This ensures that users cannot call this function directly as <code>VaderRouter.addLiquidity()</code> performs some necessary input validation which can be bypassed by directly calling <code>BasePool.mint()</code>.</p>\n<h4 id=\"proof-of-concept-37\" style=\"position:relative;\"><a href=\"#proof-of-concept-37\" aria-label=\"proof of concept 37 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/router/VaderRouter.sol#L123-L150\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/router/VaderRouter.sol#L123-L150</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/BasePool.sol#L149-L194\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/BasePool.sol#L149-L194</a></li>\n</ul>\n<h4 id=\"tools-used-17\" style=\"position:relative;\"><a href=\"#tools-used-17\" aria-label=\"tools used 17 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-40\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-40\" aria-label=\"recommended mitigation steps 40 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider adding an <code>onlyRouter</code> modifier to the <code>BasePool.mint()</code> function to ensure users cannot directly call this function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/148#issuecomment-979165529\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>The pool contracts, similarly to Uniswap V2, are never meant to be interacted with directly.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/148#issuecomment-991477706\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>That’s what the modifier would do.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/148#issuecomment-995728978\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>They are never meant however it should still be possible to do so. With Uniswap V2, it is possible to interact with the contracts directly however doing so (without using a smart contract) will result in the same vulnerabilities as described in the issue. This is not intended usage and as such does not constitute an issue unless it is implied that the Uniswap V2 implementation is incorrect.</p>\n</blockquote>\n<h2 id=\"m-14-basepoolswap-is-callable-by-anyone\" style=\"position:relative;\"><a href=\"#m-14-basepoolswap-is-callable-by-anyone\" aria-label=\"m 14 basepoolswap is callable by anyone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/149\">[M-14] <code>BasePool.swap()</code> Is Callable By Anyone</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-42\" style=\"position:relative;\"><a href=\"#impact-42\" aria-label=\"impact 42 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>BasePool.swap()</code> function differs from its implementation in <code>BasePoolV2.swap()</code> in which it lacks an <code>onlyRouter</code> modifier. This ensures that users cannot call this function directly as <code>VaderRouter._swap()</code> performs some necessary input validation which can be bypassed by directly calling <code>BasePool.swap()</code>.</p>\n<h4 id=\"proof-of-concept-38\" style=\"position:relative;\"><a href=\"#proof-of-concept-38\" aria-label=\"proof of concept 38 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/router/VaderRouter.sol#L304-L351\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/router/VaderRouter.sol#L304-L351</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/BasePool.sol#L289-L379\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/BasePool.sol#L289-L379</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/BasePool.sol#L261-L268\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/pool/BasePool.sol#L261-L268</a></li>\n</ul>\n<h4 id=\"tools-used-18\" style=\"position:relative;\"><a href=\"#tools-used-18\" aria-label=\"tools used 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-41\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-41\" aria-label=\"recommended mitigation steps 41 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider adding an <code>onlyRouter</code> modifier to the <code>BasePool.swap()</code> functions to ensure users cannot directly call these functions.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/149#issuecomment-979165745\">SamSteinGG (Vader) disputed</a>:</strong></p>\n<blockquote>\n<p>The pool contracts, similarly to Uniswap V2, are never meant to be interacted with directly.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/149#issuecomment-991477556\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>That’s what the modifier would do.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/149#issuecomment-995728209\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>@alcueca They are never meant however it should still be possible to do so. With Uniswap V2, it is possible to interact with the contracts directly however doing so (without using a smart contract) will result in the same vulnerabilities as described in the issue. This is not intended usage and as such does not constitute an issue unless it is implied that the Uniswap V2 implementation is incorrect.</p>\n</blockquote>\n<h2 id=\"m-15-lacking-validation-of-chainlink-oracle-queries\" style=\"position:relative;\"><a href=\"#m-15-lacking-validation-of-chainlink-oracle-queries\" aria-label=\"m 15 lacking validation of chainlink oracle queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/151\">[M-15] Lacking Validation Of Chainlink’ Oracle Queries</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-43\" style=\"position:relative;\"><a href=\"#impact-43\" aria-label=\"impact 43 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><code>TwapOracle.consult()</code> is missing additional validations to ensure that the round is complete and has returned a valid/expected price. The <code>consult()</code> improperly casts an <code>int256 price</code> to <code>uint256</code> without first checking the value. As a result, the variable may underflow and return an unexpected result, potentially causing further issues in other areas of the protocol that rely on this function.</p>\n<p>Additionally, the <code>GasThrottle.validateGas()</code> modifier utilises Chainlink’s <code>latestAnswer()</code> function which lacks additional checks for stale data. The <code>latestRoundData()</code> function facilitates additional checks and should be used over <code>latestAnswer()</code>.</p>\n<h4 id=\"proof-of-concept-39\" style=\"position:relative;\"><a href=\"#proof-of-concept-39\" aria-label=\"proof of concept 39 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L134-L150\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/twap/TwapOracle.sol#L134-L150</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/utils/GasThrottle.sol#L15\">https://github.com/code-423n4/2021-11-vader/blob/main/contracts/dex/utils/GasThrottle.sol#L15</a></li>\n<li><a href=\"https://docs.chain.link/docs/faq/#how-can-i-check-if-the-answer-to-a-round-is-being-carried-over-from-a-previous-round\">https://docs.chain.link/docs/faq/#how-can-i-check-if-the-answer-to-a-round-is-being-carried-over-from-a-previous-round</a></li>\n</ul>\n<h4 id=\"tools-used-19\" style=\"position:relative;\"><a href=\"#tools-used-19\" aria-label=\"tools used 19 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.\nChainlink best practices.</p>\n<h4 id=\"recommended-mitigation-steps-42\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-42\" aria-label=\"recommended mitigation steps 42 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider validating the output of <code>latestRoundData()</code> to match the following code snippet:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">     (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint80 roundID,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        int256 price,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 updateTime,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint80 answeredInRound</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      ) = ETH_CHAINLINK.latestRoundData();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          answeredInRound &gt;= roundID,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          &quot;Chainlink Price Stale&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      require(price &gt; 0, &quot;Chainlink Malfunction&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      require(updateTime != 0, &quot;Incomplete round&quot;);</span></span></code></pre>\n<p>This needs to be updated in <code>TwapOracle.consult()</code> and in <code>GasThrottle.validateGas()</code>. The latter instance should have the <code>latestAnswer()</code> function replaced with <code>latestRoundData()</code> in order to avoid stale data.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/151\">SamSteinGG (Vader) confirmed</a></strong> </p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"m-16-governors-veto-protection-can-be-exploited\" style=\"position:relative;\"><a href=\"#m-16-governors-veto-protection-can-be-exploited\" aria-label=\"m 16 governors veto protection can be exploited permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/167\">[M-16] Governor’s veto protection can be exploited</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>GovernorAlpha</code>’s council cannot veto proposals that perform a call to the contract itself.\nThis can be exploited by malicious proposal creators by appending a new call at the end of their proposal that simply calls an innocent function like <code>GovernorAlpha.votingDelay()</code>.</p>\n<h4 id=\"impact-44\" style=\"position:relative;\"><a href=\"#impact-44\" aria-label=\"impact 44 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The veto procedure can easily be circumvented, making the council unable to veto.</p>\n<h4 id=\"recommended-mitigation-steps-43\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-43\" aria-label=\"recommended mitigation steps 43 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The veto check must be further restricted by specifying the actual function selector that is not allowed to be vetoed, like <code>changeCouncil</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/167#issuecomment-974605849\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate of #61</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/167#issuecomment-991457316\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Not a duplicate</p>\n</blockquote>\n<h2 id=\"m-17-vests-can-be-denied\" style=\"position:relative;\"><a href=\"#m-17-vests-can-be-denied\" aria-label=\"m 17 vests can be denied permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/169\">[M-17] Vests can be denied</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>LinearVesting.vestFor</code> function (which is called by <code>Converter</code>) reverts if there already exists a vest for the user:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vest</span><span class=\"mtk1\">[</span><span class=\"mtk12\">user</span><span class=\"mtk1\">].</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;LinearVesting::selfVest: Already a vester&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>There’s an attack where a griefer frontruns the <code>vestFor</code> call and instead vests the smallest unit of VADER for the <code>user</code>.\nThe original transaction will then revert and the vest will be denied</p>\n<h4 id=\"recommended-mitigation-steps-44\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-44\" aria-label=\"recommended mitigation steps 44 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>There are several ways to mitigate this.\nThe most involved one would be to allow several separate vestings per user.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/169\">SamSteinGG (Vader) confirmed)</a></strong> </p>\n<h2 id=\"m-18-twaporaclegetrate-does-not-scale-the-ratio\" style=\"position:relative;\"><a href=\"#m-18-twaporaclegetrate-does-not-scale-the-ratio\" aria-label=\"m 18 twaporaclegetrate does not scale the ratio permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/172\">[M-18] <code>TWAPOracle.getRate</code> does not scale the ratio</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>TWAPOracle.getRate</code> function simply performs an integer division to compute the rate.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getRate</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tUSDInUSDV</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">consult</span><span class=\"mtk1\">(</span><span class=\"mtk12\">USDV</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tUSDInVader</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">consult</span><span class=\"mtk1\">(</span><span class=\"mtk12\">VADER</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// @audit shouldn&#39;t this scale by 1e18 first? otherwise easily 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tUSDInUSDV</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">tUSDInVader</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>It should first be scaled by some value, for example, <code>1e18</code>.</p>\n<h4 id=\"impact-45\" style=\"position:relative;\"><a href=\"#impact-45\" aria-label=\"impact 45 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The rate has no decimal precision and if <code>tUSDInVader > tUSDInUSDV</code>, the rate will always be zero.</p>\n<p>The <code>usdvtoVader</code> and <code>vaderToUsdv</code> functions will return incorrect values.</p>\n<h4 id=\"recommended-mitigation-steps-45\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-45\" aria-label=\"recommended mitigation steps 45 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// return as a rate with 18 decimals instead</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tUSDInUSDV</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">tUSDInVader</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/172\">SamSteinGG (Vader) confirmed</a></strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"m-19-unclear-twaporacleconsult-algorithm\" style=\"position:relative;\"><a href=\"#m-19-unclear-twaporacleconsult-algorithm\" aria-label=\"m 19 unclear twaporacleconsult algorithm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/173\">[M-19] Unclear <code>TwapOracle.consult</code> algorithm</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>TWAPOracle.consult</code> function is unclear to the auditor.\nIt seems to iterate through all registered pairs that share the <code>token</code> parameter (USDV or VADER) and then sums up the foreign token pair per <code>token</code> price.\nAnd divides this sum (<code>sumNative</code>) by the summed-up USD price of these foreign token pairs (<code>sumUSD</code>).</p>\n<p>I think the idea is to create some kind of average price but doing it like this does not seem to be effective because large prices are weighted a lot stronger than low prices.</p>\n<h6 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h6>\n<p>Assume there are 3 USDV pairs registered: <code>(ETH, DAI, USDC)</code>.</p>\n<p>Oracle Price: USDV/ETH 4500, USDV/DAI 1, USDV/USDC 1\nPool price: USDV/ETH 4500, USDV/DAI 10, USDV/USDC 10</p>\n<p>Even though the DAI and USDC pool prices are off by 10x, the final result is <code>4502/4520 = 0.996017699</code> very close to a price of <code>1.0</code> which seems strange.</p>\n<h4 id=\"recommended-mitigation-steps-46\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-46\" aria-label=\"recommended mitigation steps 46 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Document how the algorithm works and make sure it’s correct.\nResolve the <code>TODO</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/173\">SamSteinGG (Vader) confirmed</a></strong></p>\n<blockquote>\n<p>The TWAP oracle module has been completely removed and redesigned from scratch as LBTwap that is subject of the new audit.</p>\n</blockquote>\n<h2 id=\"m-20-tokens-with-fee-on-transfer-are-not-supported\" style=\"position:relative;\"><a href=\"#m-20-tokens-with-fee-on-transfer-are-not-supported\" aria-label=\"m 20 tokens with fee on transfer are not supported permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/193\">[M-20] Tokens with fee on transfer are not supported</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>There are ERC20 tokens that charge fee for every <code>transfer()</code> or <code>transferFrom()</code>, E.g <code>Vader</code> token.</p>\n<p>In the current implementation, <code>BasePoolV2.sol#mint()</code> assumes that the received amount is the same as the transfer amount, and uses it to calculate liquidity units.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/BasePoolV2.sol#L168-L229\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/BasePoolV2.sol#L168-L229</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">nonReentrant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">onlyRouter</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">supportedToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reserveForeign</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">getReserves</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">foreignAsset</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ); </span><span class=\"mtk3\">// gas savings</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">nativeAsset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">PairInfo</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pair</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pairInfo</span><span class=\"mtk1\">[</span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">else</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">VaderMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">calculateLiquidityUnits</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">reserveForeign</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">totalLiquidityUnits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&quot;BasePoolV2::mint: Insufficient Liquidity Provided&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">positionId</span><span class=\"mtk1\">++;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">totalLiquidityUnits</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">id</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">positions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">id</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">Position</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">foreignDeposit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_update</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">foreignAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reserveForeign</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reserveNative</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">reserveForeign</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">nativeDeposit</span><span class=\"mtk1\">, </span><span class=\"mtk12\">foreignDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PositionOpened</span><span class=\"mtk1\">(</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">liquidity</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended\" style=\"position:relative;\"><a href=\"#recommended\" aria-label=\"recommended permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended</h4>\n<p>Consider calling <code>balanceOf()</code> to get the actual balances.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/193#issuecomment-979174293\">SamSteinGG (Vader) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Tokens with a fee on transfer or rebasing tokens are not meant to be supported by the protocol, hence why the tokens supported are voted on by the DAO.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/193#issuecomment-991508656\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Not stated in the documentation, therefore the issue is valid.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/193#issuecomment-995715303\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>A medium risk issue cannot constitute lack of documentation of a trait of the system. If the inclusion of tokens to the DEX was not privileged, the issue would be valid but it is not an open function and thus the scenario described would never unfold.</p>\n</blockquote>\n<h2 id=\"m-21-vaderpoolv2rescue-results-in-loss-of-funds-rather-than-recoverability\" style=\"position:relative;\"><a href=\"#m-21-vaderpoolv2rescue-results-in-loss-of-funds-rather-than-recoverability\" aria-label=\"m 21 vaderpoolv2rescue results in loss of funds rather than recoverability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/251\">[M-21] VaderPoolV2.rescue results in loss of funds rather than recoverability</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-46\" style=\"position:relative;\"><a href=\"#impact-46\" aria-label=\"impact 46 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Any unaccounted for tokens on <code>VaderPoolV2</code> can be siphoned off by anyone</p>\n<h4 id=\"proof-of-concept-40\" style=\"position:relative;\"><a href=\"#proof-of-concept-40\" aria-label=\"proof of concept 40 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>VaderPoolV2</code> has a <code>rescue</code> function which allows any unaccounted for tokens to be recovered.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/BasePoolV2.sol#L505-L517\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex-v2/pool/BasePoolV2.sol#L505-L517</a></p>\n<p>However there is no access control on this function which means than should any tokens be sent to <code>VaderPoolV2</code> by accident they’ll just be scooped up by flashbots rather than being recoverable by the original owner or Vader governance.</p>\n<p>This also means that any rebasing tokens which are deposited into <code>VaderPoolV2</code> will have any rebases lost rather than being recoverable by Vader governance.</p>\n<h4 id=\"recommended-mitigation-steps-47\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-47\" aria-label=\"recommended mitigation steps 47 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Permission this function to only allow Vader governance to claim tokens.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/251#issuecomment-979185828\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>Duplicate #28</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/251#issuecomment-991464408\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Not a duplicate, this issue correctly states that the function is vulnerable to front-running.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/251#issuecomment-995706258\">SamSteinGG (Vader) commented</a>:</strong></p>\n<blockquote>\n<p>The function is equivalent to the <a href=\"https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol#L189-L195\">Uniswap V2 rescue</a> function which is not classified as incorrect.</p>\n</blockquote>\n<h2 id=\"m-22-no-way-to-remove-gasthrottle-after-deployment\" style=\"position:relative;\"><a href=\"#m-22-no-way-to-remove-gasthrottle-after-deployment\" aria-label=\"m 22 no way to remove gasthrottle after deployment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/256\">[M-22] No way to remove GasThrottle after deployment</a></h2>\n<p><em>Submitted by TomFrenchBlockchain</em></p>\n<h4 id=\"impact-47\" style=\"position:relative;\"><a href=\"#impact-47\" aria-label=\"impact 47 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Potential DOS on swaps</p>\n<h4 id=\"proof-of-concept-41\" style=\"position:relative;\"><a href=\"#proof-of-concept-41\" aria-label=\"proof of concept 41 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>BasePool and BasePoolV2 make use of a <code>validateGas</code> modifier on swaps which checks that the user’s gas price is below the value returned by <code>_FAST_GAS_ORACLE</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex/utils/GasThrottle.sol#L9-L20\">https://github.com/code-423n4/2021-11-vader/blob/429970427b4dc65e37808d7116b9de27e395ce0c/contracts/dex/utils/GasThrottle.sol#L9-L20</a></p>\n<p>Should  <code>_FAST_GAS_ORACLE</code> be compromised to always return zero then all swaps will fail. There is no way to recover from this scenario.</p>\n<h4 id=\"recommended-mitigation-steps-48\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-48\" aria-label=\"recommended mitigation steps 48 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Either remove GasThrottle.sol entirely or allow governance to turn it off</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/256\">SamSteinGG (Vader) confirmed</a></strong></p>\n<h2 id=\"m-23-users-can-reset-bond-depositors-vesting-period\" style=\"position:relative;\"><a href=\"#m-23-users-can-reset-bond-depositors-vesting-period\" aria-label=\"m 23 users can reset bond depositors vesting period permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/259\">[M-23] Users Can Reset Bond Depositor’s Vesting Period</a></h2>\n<p><em>Submitted by leastwood</em></p>\n<h4 id=\"impact-48\" style=\"position:relative;\"><a href=\"#impact-48\" aria-label=\"impact 48 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>VaderBond.deposit()</code> function overwrites a depositors bond info on each call with the updated <code>payout</code> information. If any of the vesting is left unclaimed before a call to <code>deposit()</code> is made, the vesting period is reset to <code>terms.vestingTerm</code>, resulting in the bond holder having to wait again in order to claim tokens that they could previously claim.</p>\n<h4 id=\"proof-of-concept-42\" style=\"position:relative;\"><a href=\"#proof-of-concept-42\" aria-label=\"proof of concept 42 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-11-vader/blob/main/repo/vader-bond/contracts/VaderBond.sol#L192\">https://github.com/code-423n4/2021-11-vader/blob/main/repo/vader-bond/contracts/VaderBond.sol#L192</a></p>\n<h4 id=\"tools-used-20\" style=\"position:relative;\"><a href=\"#tools-used-20\" aria-label=\"tools used 20 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual code review.</p>\n<h4 id=\"recommended-mitigation-steps-49\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-49\" aria-label=\"recommended mitigation steps 49 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider preventing users from depositing to an existing bond holder or alternatively when a deposit is made, force the user to redeem any claimable tokens in the same function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/259#issuecomment-969871819\">0xstormtrooper (Vader) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Users will be warned that depositing resets the vesting term.\nThis will also be documented on the contract.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-41\" style=\"position:relative;\"><a href=\"#low-risk-findings-41\" aria-label=\"low risk findings 41 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (41)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/10\">[L-01] <em>VADER</em>VETHER<em>CONVERSION</em>RATE</a> <em>Submitted by jayjonah8, also found by hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/13\">[L-02] ReentrancyGuard for added protection </a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/18\">[L-03] TwapOracle assumes a possibly incorrect number of decimals when scaling chainlink price feed</a> <em>Submitted by TomFrenchBlockchain, also found by pauliax and xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/26\">[L-04] _totalSupply can be different from actual supply</a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/27\">[L-05] Use <code>_safeMint()</code> instead of <code>_mint()</code></a> <em>Submitted by Ruhum, also found by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/29\">[L-06] Function LinearVesting.claim() will never meet require conditions</a> <em>Submitted by Reigada</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/42\">[L-07] Did not check if vestor is address(0)</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/51\">[L-08] TwapOracle / registerPair function could register VADER / USDV and USDV / VADER pools.</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/56\">[L-09] Missing events for owner only functions that change critical parameters</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/61\">[L-10] Governance Veto lacks sufficient validation to protect against frontrunning</a> <em>Submitted by elprofesor</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/80\">[L-11] Missing zero-address checks in multiple constructors</a> <em>Submitted by Reigada, also found by cmichel and Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/88\">[L-12] Missing balance check before and after transfer, can lead to inconsistent amount due to fee on transfer</a> <em>Submitted by rfa</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/95\">[L-13] token allocation specs in contract code does not match with whitepaper</a> <em>Submitted by hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/102\">[L-14] Open TODOs</a> <em>Submitted by ye0lde, also found by defsec, Meta0xNull, pants, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/107\">[L-15] No boundary checking for feeAmount (GovernorAlpha.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/113\">[L-16] createEmission function specification and logic mismatch</a> <em>Submitted by hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/118\">[L-17] Incompatibility With Rebasing/Deflationary/Inflationary tokens</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/122\">[L-18] Add zero address validation in the GovernorAlpha contract</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/141\">[L-19] Incorrect comments (technical issues)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/143\">[L-20] Function AdjustMaxSupply is incorrect (or at least confusing)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/145\">[L-21] <code>Converter::constructor</code> ignores return value from function call</a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/150\">[L-22] <code>Converter.convert()</code> Proofs Can Be Replayed On Other Chains</a> <em>Submitted by leastwood</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/156\">[L-23] setRewardsDuration() Lack of Input Validation May Break notifyRewardAmount()</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/165\">[L-24] Tokens can be unsupported again</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/166\">[L-25] Governor average block time is not up-to-date</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/168\">[L-26] Using duplicate vesters tracks wrong total amount</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/175\">[L-27] No Transfer Ownership Pattern</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/178\">[L-28] block.chainid may change in case of a hardfork</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/188\">[L-29] Wrong comment in <code>vaderToUsdv</code></a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/190\">[L-30] <code>VaderRouterV2#addLiquidity()</code> is not compatible with the interface of UniswapV2Router02#addliquidity()</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/191\">[L-31] <code>BasePoolV2#rescue()</code> should be <code>nonReentrant</code></a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/195\">[L-32] Unsafe type casting</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/198\">[L-33] Possibility of reducing the maxSupply of Vader</a> <em>Submitted by ksk2345</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/199\">[L-34] <code>Router#initialize()</code> Lack of input validation for <code>reserve</code> asset</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/227\">[L-35] Toggle function</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/228\">[L-36] Contracts VaderPoolFactory and VaderReserve can be initialized multiple times</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/231\">[L-37] block times 13s -> 12s</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/254\">[L-38] Unique vesters</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/262\">[L-39] setComponents function specs and logic mismatch</a> <em>Submitted by hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/263\">[L-40] Owner can maliciously set itself as dao</a> <em>Submitted by hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/267\">[L-41] inconsistent use of msg.sender and _msgSender()</a> <em>Submitted by hack3r-0m</em></li>\n</ul>\n<h1 id=\"non-critical-findings-36\" style=\"position:relative;\"><a href=\"#non-critical-findings-36\" aria-label=\"non critical findings 36 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (36)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/4\">[N-01] BasePool does not account for Vader transfer fees when removing liquidity</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/24\">[N-02] VaderRouterV2 breaks compatibility with IUniswapV2Router0X</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/25\">[N-03] VaderRouter breaks compatibility with IUniswapV2Router0X</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/40\">[N-04] Use <code>indexed</code> keyword in events which can be used as filter</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/48\">[N-05] Typo</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/53\">[N-06] Missing Zero-address check</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/68\">[N-07] <code>onlyOnwer</code> in the synthFactory is confusing</a> <em>Submitted by jonah1005</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/72\">[N-08] Multiple Solidity pragma</a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/73\">[N-09] Multiple Solidity pragma in repo/vader-bond/contracts/interfaces/ITreasury.sol </a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/74\">[N-10] Multiple Solidity pragma in repo/vader-bond/contracts/test/TestToken.sol</a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/75\">[N-11] Multiple Solidity pragma repo/vader-bond/contracts/lib/FullMath.sol</a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/76\">[N-12] Multiple Solidity pragma In repo/vader-bond/contracts/Ownable.sol</a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/77\">[N-13] Multiple Solidity pragma repo/vader-bond/contracts/lib/FixedPoint.sol</a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/78\">[N-14] Multiple Solidity pragma in repo/vader-bond/contracts/Treasury.sol</a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/79\">[N-15] Multiple Solidity pragma in repo/vader-bond/contracts/VaderBond.sol</a> <em>Submitted by fatima</em>naz_</li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/84\">[N-16] Incorrect + misleading documentation on BasePool and BasePoolV2</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/101\">[N-17] Wrong revert message in the router (UniswapV2Router -> VaderRouter)</a> <em>Submitted by jonah1005</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/108\">[N-18] No event emission for “timelock” changes (GovernorAlpha.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/110\">[N-19] No event emission for “guardian” changes (GovernorAlpha.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/115\">[N-20] Redundant Gas Modifider</a> <em>Submitted by defsec, also found by jonah1005 and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/135\">[N-21] might not check current block when casting vote</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/140\">[N-22] Commented out code </a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/142\">[N-23] Typos</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/181\">[N-24] Use safeTransfer instead of transfer</a> <em>Submitted by defsec, also found by elprofesor and pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/202\">[N-25] VaderBond insufficient validation of max payout may prevent redeeming valid payout </a> <em>Submitted by elprofesor</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/205\">[N-26] <code>USDV.sol</code> Incomplete implementation</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/206\">[N-27] <code>SwapQueue.sol</code> Incomplete implementation</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/214\">[N-28] Missing events for critical operations</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/215\">[N-29] Critical changes should use two-step procedure</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/219\">[N-30] Disregarding Check Effects in <code>VaderBond.redeem()</code> </a> <em>Submitted by elprofesor</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/225\">[N-31] <code>LinearVesting</code> missing events</a> <em>Submitted by elprofesor</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/230\">[N-32] Unsupported tokens can be given fungible LP support</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/232\">[N-33] Abstract contracts</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/233\">[N-34] Small precision loss when dividing</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/234\">[N-35] safe transfer of tokens</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/236\">[N-36] Whitepaper and code declares different conversion rates</a> <em>Submitted by pauliax</em></li>\n</ul>\n<h1 id=\"gas-optimizations-56\" style=\"position:relative;\"><a href=\"#gas-optimizations-56\" aria-label=\"gas optimizations 56 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (56)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/6\">[G-01] Make use of a bitmap for claims to save gas in Converter.sol</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/7\">[G-02] Use of SafeERC20 for known tokens used extra gas unnecessarily</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/17\">[G-03] Use of single _pairs array in TwapOracle increases costs of <code>consult</code>ing</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/21\">[G-04] Use proxy clones to create Synths &#x26; LPTokens</a> <em>Submitted by nathaniel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/22\">[G-05] Change if -> revert pattern to require</a> <em>Submitted by mics</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/38\">[G-06] Address of VADER in xVADER.sol can be made immutable</a> <em>Submitted by TomFrenchBlockchain, also found by xYrYuYx and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/39\">[G-07] VADER and USDV can be made immutable in the TwapOracle</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/41\">[G-08] Cache length of array before loop to optimize gas</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/43\">[G-09] Use <code>unchecked</code> keyword to optimize gas</a> <em>Submitted by xYrYuYx, also found by defsec, gzeon, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/269\">[G-10] Unused imported contract in xVader</a> <em>Submitted by hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/52\">[G-11] Some public functions can be converted as external</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/62\">[G-12] Unnecessary validation of <code>proposalId>0</code> due to incorrect proposalId increments</a> <em>Submitted by elprofesor</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/64\">[G-13] Using SafeMath ins Solidity 0.8.9 contracts wastes gas</a> <em>Submitted by 0xean</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/69\">[G-14] Local variable assignment in XVader.leave function can be removed to save gas</a> <em>Submitted by Reigada</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/70\">[G-15] Contract StakingRewards (pragma 0.8.9) makes use of SafeMath</a> <em>Submitted by Reigada, also found by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/81\">[G-16] Using ++i consumes less gas than i++</a> <em>Submitted by Reigada</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/82\">[G-17] No need to initialize uint256 i variable to 0 in for loops</a> <em>Submitted by Reigada, also found by Meta0xNull, pants, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/86\">[G-18] using memory pointer instead storage</a> <em>Submitted by rfa</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/87\">[G-19] using memory pointer instead storage</a> <em>Submitted by rfa</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/94\">[G-20] Save gas by caching array length used in for loops</a> <em>Submitted by 0x0x0x, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/99\">[G-21] internal function _addLiquidity in the router is unnecessary</a> <em>Submitted by jonah1005</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/103\">[G-22] Unused Named Returns</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/104\">[G-23] Long Revert Strings</a> <em>Submitted by ye0lde, also found by defsec, pants, pauliax, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/105\">[G-24] Assignment Of Variables To Default </a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/106\">[G-25] Use existing memory version of state variables</a> <em>Submitted by ye0lde, also found by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/114\">[G-26] Redundant Code Statement</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/117\">[G-27] Redundant Functions</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/123\">[G-28] Caching array length to save gas</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/124\">[G-29] Unchecked{i++} is better than i++</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/125\">[G-30] Prefix increaments are cheaper than postfix increaments</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/126\">[G-31] <code>public</code> functions can be <code>external</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/127\">[G-32] unessesary safe math in UniSwapV2Pair.sol line 120</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/131\">[G-33] calldata vs memory in solidity gas usage</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/138\">[G-34] Zero address check not needed </a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/139\">[G-35] <code>StakingRewards.sol#updateReward</code> can be split to two modifiers to save gas</a> <em>Submitted by 0x0x0x</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/144\">[G-36] Use constant <code>_INITIAL_EMISSION_CURVE</code> in <code>Vader.sol</code></a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/153\">[G-37] Use bytes32 Rather Than String</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/157\">[G-38] TwapOracle.sol update() Multiple SLOAD During Loop</a> <em>Submitted by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/183\">[G-39] Gas Optimization: Inline instead of modifier</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/184\">[G-40] Gas Optimization: Simplify Math</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/200\">[G-41] Unnecessary storage variables can be changed to <code>immutable</code> to save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/201\">[G-42] Avoid unnecessary storage read can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/207\">[G-43] Changing function visibility from public to external can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/211\">[G-44] Combine external calls into one can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/220\">[G-45] Check that all transfers don’t result in violation of max supply is unnecessary</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/222\">[G-46] Gas: VaderMath’s endpoint functions can be made external</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/224\">[G-47] Store VaderPoolV2 address as immutable in LPWrapper</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/237\">[G-48] Add method to migrate from fungible to nonfungible liquidity</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/240\">[G-49] Pre-calculate values that do not change</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/241\">[G-50] queueActive always false</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/242\">[G-51] SafeMath with Solidity >0.8</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/244\">[G-52] Dead code</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/250\">[G-53] Extra transfers when burning LP tokens</a> <em>Submitted by TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/252\">[G-54] Unchecked math operations</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/265\">[G-55] Unused variable lastEmission</a> <em>Submitted by hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-11-vader-findings/issues/266\">[G-56] Unused functionalities of inherited contracts</a> <em>Submitted by hack3r-0m</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-34\">High Risk Findings (34)</a></p>\n<ul>\n<li><a href=\"#h-01-minting-and-burning-synths-exposes-users-to-unlimited-slippage\">[H-01] Minting and burning synths exposes users to unlimited slippage</a></li>\n<li><a href=\"#h-02-redemption-value-of-synths-can-be-manipulated-to-drain-vaderpool-of-all-native-assets\">[H-02] Redemption value of synths can be manipulated to drain <code>VaderPool</code> of all native assets</a></li>\n<li><a href=\"#h-03-vader-contains-a-fee-on-transfer\">[H-03] VADER contains a Fee-On-Transfer</a></li>\n<li><a href=\"#h-04-twaporacle-doesnt-calculate-vaderusdv-exchange-rate-correctly\">[H-04] TwapOracle doesn’t calculate VADER:USDV exchange rate correctly</a></li>\n<li><a href=\"#h-05-lps-of-vaderpoolv2-can-manipulate-pool-reserves-to-extract-funds-from-the-reserve\">[H-05] LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve.</a></li>\n<li><a href=\"#h-06-paying-il-protection-for-all-vaderpool-pairs-allows-the-reserve-to-be-drained\">[H-06] Paying IL protection for all VaderPool pairs allows the reserve to be drained.</a></li>\n<li><a href=\"#h-07-vaderreserve-does-not-support-paying-il-protection-out-to-more-than-one-address-resulting-in-locked-funds\">[H-07] VaderReserve does not support paying IL protection out to more than one address, resulting in locked funds</a></li>\n<li><a href=\"#h-08-usdv-and-vader-rate-can-be-wrong\">[H-08] USDV and VADER rate can be wrong</a></li>\n<li><a href=\"#h-09-vaderpoolv2-incorrectly-calculates-the-amount-of-il-protection-to-send-to-lps\">[H-09] VaderPoolV2 incorrectly calculates the amount of IL protection to send to LPs</a></li>\n<li><a href=\"#h-10--calculate-loss-is-vulnerable-to-flashloan-attack\">[H-10]  calculate Loss is vulnerable to flashloan attack</a></li>\n<li><a href=\"#h-11-dex-v1-basepoolmint-function-can-be-frontrun\">[H-11] (dex-v1) BasePool.mint() function can be frontrun</a></li>\n<li><a href=\"#h-12-attacker-can-get-extremely-cheap-synth-by-front-running-create-pool\">[H-12] Attacker can get extremely cheap synth by front-running create Pool</a></li>\n<li><a href=\"#h-13-anyone-can-arbitrarily-mint-synthetic-assets-in-vaderpoolv2mintsynth\">[H-13] Anyone Can Arbitrarily Mint Synthetic Assets In <code>VaderPoolV2.mintSynth()</code></a></li>\n<li><a href=\"#h-14-anyone-can-arbitrarily-mint-fungible-tokens-in-vaderpoolv2mintfungible\">[H-14] Anyone Can Arbitrarily Mint Fungible Tokens In <code>VaderPoolV2.mintFungible()</code></a></li>\n<li><a href=\"#h-15-vaderrouter_swap-performs-wrong-swap\">[H-15] <code>VaderRouter._swap</code> performs wrong swap</a></li>\n<li><a href=\"#h-16-vaderroutercalculateoutgivenin-calculates-wrong-swap\">[H-16] <code>VaderRouter.calculateOutGivenIn</code> calculates wrong swap</a></li>\n<li><a href=\"#h-17-twaporacle-might-register-with-wrong-token-order\">[H-17] TWAPOracle might register with wrong token order</a></li>\n<li><a href=\"#h-18-attacker-can-claim-more-il-by-manipulating-pool-price-then-removeliquidity-\">[H-18] Attacker can claim more IL by manipulating pool price then <code>removeLiquidity</code> </a></li>\n<li><a href=\"#h-19-governance-veto-can-be-bypassed\">[H-19] Governance veto can be bypassed</a></li>\n<li><a href=\"#h-20-early-user-can-break-addliquidity\">[H-20] Early user can break <code>addLiquidity</code></a></li>\n<li><a href=\"#h-21-lack-of-access-control-allow-attacker-to-mintfungible-and-mintsynth-with-other-users-wallet-balance\">[H-21] Lack of access control allow attacker to <code>mintFungible()</code> and <code>mintSynth()</code> with other user’s wallet balance</a></li>\n<li><a href=\"#h-22-mintsynth-and-burnsynth-can-be-front-run\">[H-22] <code>mintSynth()</code> and <code>burnSynth()</code> can be front run</a></li>\n<li><a href=\"#h-23-synth-tokens-can-get-over-minted\">[H-23] <code>Synth</code> tokens can get over-minted</a></li>\n<li><a href=\"#h-24-wrong-designimplementation-of-addliquidity-allows-attacker-to-steal-funds-from-the-liquidity-pool\">[H-24] Wrong design/implementation of <code>addLiquidity()</code> allows attacker to steal funds from the liquidity pool</a></li>\n<li><a href=\"#h-25-wrong-design-of-swap-results-in-unexpected-and-unfavorable-outputs\">[H-25] Wrong design of <code>swap()</code> results in unexpected and unfavorable outputs</a></li>\n<li><a href=\"#h-26-all-user-assets-which-are-approved-to-vaderpoolv2-may-be-stolen\">[H-26] All user assets which are approved to VaderPoolV2 may be stolen</a></li>\n<li><a href=\"#h-27-unrestricted-vestfor\">[H-27] Unrestricted vestFor</a></li>\n<li><a href=\"#h-28-incorrect-price-consultation-results\">[H-28] Incorrect Price Consultation Results</a></li>\n<li><a href=\"#h-29-vaderpoolv2mintfungible-exposes-users-to-unlimited-slippage\">[H-29] VaderPoolV2.mintFungible exposes users to unlimited slippage</a></li>\n<li><a href=\"#h-30-newly-registered-assets-skew-consultation-results\">[H-30] Newly Registered Assets Skew Consultation Results</a></li>\n<li><a href=\"#h-31-unused-slippage-params\">[H-31] Unused slippage params</a></li>\n<li><a href=\"#h-32-covering-impermanent-loss-allows-profiting-off-asymmetric-liquidity-provision-at-expense-of-reserve-holdings\">[H-32] Covering impermanent loss allows profiting off asymmetric liquidity provision at expense of reserve holdings</a></li>\n<li><a href=\"#h-33-mixing-different-types-of-lp-shares-can-lead-to-losses-for-synth-holders\">[H-33] Mixing different types of LP shares can lead to losses for Synth holders</a></li>\n<li><a href=\"#h-34-incorrect-accrual-of-sumnative-and-sumusd-in-producing-consultation-results-\">[H-34] Incorrect Accrual Of <code>sumNative</code> and <code>sumUSD</code> In Producing Consultation Results </a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-23\">Medium Risk Findings (23)</a></p>\n<ul>\n<li><a href=\"#m-01-unbounded-loop-in-twaporacleupdate-can-result-in-oracle-being-locked\">[M-01] Unbounded loop in TwapOracle.update can result in oracle being locked</a></li>\n<li><a href=\"#m-02-should-a-chainlink-aggregator-become-stuck-in-a-stale-state-then-twaporacle-will-become-irrecoverably-broken\">[M-02] Should a Chainlink aggregator become stuck in a stale state then TwapOracle will become irrecoverably broken</a></li>\n<li><a href=\"#m-03-permissioned-nature-of-twaporacle-allows-owner-to-manipulate-oracle\">[M-03] Permissioned nature of <code>TwapOracle</code> allows owner to manipulate oracle</a></li>\n<li><a href=\"#m-04-inconsistent-balance-when-supplying-transfer-on-fee-or-deflationary-tokens\">[M-04] Inconsistent balance when supplying transfer-on-fee or deflationary tokens</a></li>\n<li><a href=\"#m-05-linearvesting-does-not-calculate-vested-amount-linearly\">[M-05] LinearVesting does not calculate vested amount linearly</a></li>\n<li><a href=\"#m-06-add-liquidity-is-vulnerable-to-sandwich-attack\">[M-06] add liquidity is vulnerable to sandwich attack</a></li>\n<li><a href=\"#m-07-missing-hasstarted-modifier-can-lead-to-user-vesting-before-the-owner-begin-the-vesting\">[M-07] Missing hasStarted modifier, can lead to user vesting before the owner begin the vesting</a></li>\n<li><a href=\"#m-08-user-may-not-receive-the-full-amount-of-il-compensation\">[M-08] User may not receive the full amount of IL compensation</a></li>\n<li><a href=\"#m-09-the-first-lp-provider-can-destroy-the-pool\">[M-09] The first lp provider can destroy the pool</a></li>\n<li><a href=\"#m-10-should-check-return-data-from-chainlink-aggregators\">[M-10] SHOULD CHECK RETURN DATA FROM CHAINLINK AGGREGATORS</a></li>\n<li><a href=\"#m-11-twap-oracle-inflexible-_updateperiod\">[M-11] TWAP Oracle inflexible <code>_updatePeriod</code></a></li>\n<li><a href=\"#m-12-missing-duplicate-veto-check\">[M-12] Missing duplicate veto check</a></li>\n<li><a href=\"#m-13-basepoolmint-is-callable-by-anyone\">[M-13] <code>BasePool.mint()</code> Is Callable By Anyone</a></li>\n<li><a href=\"#m-14-basepoolswap-is-callable-by-anyone\">[M-14] <code>BasePool.swap()</code> Is Callable By Anyone</a></li>\n<li><a href=\"#m-15-lacking-validation-of-chainlink-oracle-queries\">[M-15] Lacking Validation Of Chainlink’ Oracle Queries</a></li>\n<li><a href=\"#m-16-governors-veto-protection-can-be-exploited\">[M-16] Governor’s veto protection can be exploited</a></li>\n<li><a href=\"#m-17-vests-can-be-denied\">[M-17] Vests can be denied</a></li>\n<li><a href=\"#m-18-twaporaclegetrate-does-not-scale-the-ratio\">[M-18] <code>TWAPOracle.getRate</code> does not scale the ratio</a></li>\n<li><a href=\"#m-19-unclear-twaporacleconsult-algorithm\">[M-19] Unclear <code>TwapOracle.consult</code> algorithm</a></li>\n<li><a href=\"#m-20-tokens-with-fee-on-transfer-are-not-supported\">[M-20] Tokens with fee on transfer are not supported</a></li>\n<li><a href=\"#m-21-vaderpoolv2rescue-results-in-loss-of-funds-rather-than-recoverability\">[M-21] VaderPoolV2.rescue results in loss of funds rather than recoverability</a></li>\n<li><a href=\"#m-22-no-way-to-remove-gasthrottle-after-deployment\">[M-22] No way to remove GasThrottle after deployment</a></li>\n<li><a href=\"#m-23-users-can-reset-bond-depositors-vesting-period\">[M-23] Users Can Reset Bond Depositor’s Vesting Period</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-41\">Low Risk Findings (41)</a></li>\n<li><a href=\"#non-critical-findings-36\">Non-Critical Findings (36)</a></li>\n<li><a href=\"#gas-optimizations-56\">Gas Optimizations (56)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}