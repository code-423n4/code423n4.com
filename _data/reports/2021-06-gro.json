{
  "circa": {
    "title": "Gro Protocol",
    "sponsor": "Gro Protocol",
    "slug": "2021-06-gro",
    "date": "2021-08-30",
    "findings": "https://github.com/code-423n4/2021-06-gro-findings/issues",
    "contest": 17
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of of the Gro Protocol smart contract system written in Solidity. The code contest took place between June 30 — July 7, 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>7 Wardens contributed reports to the Gro code contest:</p>\n<ul>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/0xRajeev\">0xRajeev</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://github.com/x9453\">shw</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/a_delamo\">a_delamo</a></li>\n<li><a href=\"https://twitter.com/gallodasballo\">GalloDaSballo</a></li>\n</ul>\n<p>This contest was judged by <a href=\"https://twitter.com/ghoulsol\">ghoul.sol</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/money_lego\">moneylegobatman</a> and <a href=\"https://twitter.com/_ninek_\">ninek</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 31 unique vulnerabilities. All of the issues presented here are linked back to their original finding</p>\n<p>Of these vulnerabilities, 4 received a risk rating in the category of HIGH severity, 6 received a risk rating in the category of MEDIUM severity, and 21 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 54 non-critical recommendations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-06-gro\">C4 Gro Protocol code contest repository</a> is comprised of 61 smart contracts written in the Solidity programming language.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-4\" style=\"position:relative;\"><a href=\"#high-risk-findings-4\" aria-label=\"high risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (4)</h1>\n<h2 id=\"h-01-implicit-underflows\" style=\"position:relative;\"><a href=\"#h-01-implicit-underflows\" aria-label=\"h 01 implicit underflows permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/6\">[H-01] implicit underflows</a></h2>\n<p><em>Submitted by gpersoon, also found by cmichel</em></p>\n<p>There are a few underflows that are converted via a typecast afterwards to the expected value. If solidity 0.8.x would be used, then the code would revert.</p>\n<ul>\n<li><code>int256(a-b)</code> where a and b are uint: For example, if <code>a=1</code> and <code>b=2</code>, then the intermediate result would be <code>uint(-1) == 2**256-1</code></li>\n<li><code>int256(-x)</code> where x is a uint. For example, if <code>x=1</code>, then the intermediate result would be <code>uint(-1) == 2**256-1</code></li>\n</ul>\n<p>It’s better not to have underflows by using the appropriate typecasts. This is especially relevant when moving to solidity 0.8.x.</p>\n<p>From <code>Exposure.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Exposure.sol#L178\">L178</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sortVaultsByDelta</span><span class=\"mtk1\">(..)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Get difference between vault current assets and vault target</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">delta</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">int256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">unifiedAssets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] - </span><span class=\"mtk12\">unifiedTotalAssets</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">targetPercents</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PERCENTAGE_DECIMAL_FACTOR</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">// underflow in intermediate result</span></span></span></code></pre>\n<p>From <code>PnL.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pnl/PnL.sol#L112\">L112</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">decreaseGTokenLastAmount</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pwrd</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dollarAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bonus</span><span class=\"mtk1\">)...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk11\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LogNewGtokenChange</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pwrd</span><span class=\"mtk1\">, </span><span class=\"mtk12\">int256</span><span class=\"mtk1\">(-</span><span class=\"mtk12\">dollarAmount</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">// underflow in intermediate result</span></span></span></code></pre>\n<p>From <code>Buoy3Pool.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L87\">L87</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">safetyCheck</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_ratio</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">abs</span><span class=\"mtk1\">(</span><span class=\"mtk11\">int256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_ratio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">lastRatio</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])); </span><span class=\"mtk3\">// underflow in intermediate result</span></span></span></code></pre>\n<p>Recommend replacing <code>int256(a-b)</code> with <code>int256(a)-int256(b)</code>, and replacing <code>int256(-x)</code> with <code>-int256(x)</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/6#issuecomment-886260551\">kristian-gro (Gro) confirmed but disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Confirmed and We’ve mitigated this issue in our release version.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/6#issuecomment-886260551\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Majority of overflow listed above seems low risk with one exception of <code>safetyCheck</code>. Underflow is a real risk here.<code>safetyCheck</code> is run every time a deposit is made. Ratios can change and the change does not need to be substantial for it to overflow. For that reason it’s a high risk.</p>\n</blockquote>\n<h2 id=\"h-02-buoy3poolsafetycheck-is-not-precise-and-has-some-assumptions\" style=\"position:relative;\"><a href=\"#h-02-buoy3poolsafetycheck-is-not-precise-and-has-some-assumptions\" aria-label=\"h 02 buoy3poolsafetycheck is not precise and has some assumptions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/104\">[H-02] <code>Buoy3Pool.safetyCheck</code> is not precise and has some assumptions</a></h2>\n<p><em>Submitted by cmichel, also found by shw</em></p>\n<p>The <code>safetyCheck</code> function has several issues that impact how precise the checks are:</p>\n<ol>\n<li>Only checks if the <code>a/b</code> and <code>a/c</code> ratios are within <code>BASIS_POINTS</code>.\nBy transitivity, <code>b/c</code> is only within <code>2 * BASIS_POINTS</code> if <code>a/b</code> and <code>a/c</code> are in range.\nFor a more precise check whether both USDC and USDT are within range, <code>b/c</code> must be checked as well.</li>\n<li>If <code>a/b</code> is within range, this does not imply that <code>b/a</code> is within range.</li>\n<li>\n<blockquote>\n<p>“inverted ratios, a/b bs b/a, while producing different results should both reflect the same change in any one of the two underlying assets, but in opposite directions”</p>\n</blockquote>\n</li>\n<li>Example: <code>lastRatio = 1.0</code>\n<code>ratio: a = 1.0, b = 0.8</code> => <code>a/b = 1.25</code>, <code>b/a = 0.8</code>\nIf <code>a/b</code> was used with a 20% range, it’d be out of range, but <code>b/a</code> is in range.</li>\n<li>The NatSpec for the function states that it checks Curve and an external oracle, but no external oracle calls are checked, both <code>_ratio</code> and <code>lastRatio</code> are only from Curve. Only <code>_updateRatios</code> checks the oracle.</li>\n</ol>\n<p>To address this issue, it is recommended to check if <code>b/c</code> is within <code>BASIS_POINTS</code> .</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/104#issuecomment-880192089\">kristian-gro (Gro) confirmed but disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Makes strong assumption about the range of possible values - small differences between a and b will result in small differences between a/b and b/a - Extreme cases are handled by emergency. Agree on b/c check</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/104#issuecomment-880192847\">kristian-gro (Gro) commented</a>:</strong></p>\n<blockquote>\n<p>medium severity - will only cause stop of deposits/withdrawals against curve, work around to put in emergency mode</p>\n</blockquote>\n<p><strong>kristian-gro (Gro) commented:</strong></p>\n<blockquote>\n<p>Acknowledged, but the differences between variables are in basis points, we’ve simulated flash loan manipulations of curve and come to the conclusion that this approximation has a sufficiently small error margin to not cause issues.\nThe B/C check (usdc/usdt) has been added in release version.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/104#issuecomment-886346641\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>A possibility of stopping deposits or withdrawals deserves high risk.</p>\n</blockquote>\n<h2 id=\"h-03-incorrect-use-of-operator-leads-to-arbitrary-minting-of-gvt-tokens\" style=\"position:relative;\"><a href=\"#h-03-incorrect-use-of-operator-leads-to-arbitrary-minting-of-gvt-tokens\" aria-label=\"h 03 incorrect use of operator leads to arbitrary minting of gvt tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/69\">[H-03] Incorrect use of operator leads to arbitrary minting of GVT tokens</a></h2>\n<p><em>Submitted by 0xRajeev, also found by pauliax and gpersoon</em></p>\n<p>The <code>distributeStrategyGainLoss()</code> function distributes any gains or losses generated from a harvest and is expected to be called only by valid protocol vault adaptors. It is an externally visible function and the access control is indirectly enforced on <code>msg.sender</code> by checking that <code>vaultIndexes[msg.sender]</code> is a valid index range 1-4. However, the operator used in the <code>require()</code> is <code>||</code> instead of <code>&#x26;&#x26;</code>, which allows an arbitrary <code>msg.sender</code>, i.e. attacker, to bypass the check.</p>\n<p><strong>Scenario</strong>: An arbitrary non-vault address calling this function will get an index of 0 because of default mapping value in <code>vaultIndexes[msg.sender]</code>, which will fail the <code>> 0</code> check, but pass the <code>&#x3C;= N_COINS + 1</code> check (<code>N_COINS = 3</code>) because <code>0 &#x3C;= 4</code> which will allow control to go past this check.</p>\n<p>Furthermore, on L362, <code>index=0</code> will underflow the -1 decrement (due to lack of <code>SafeMath.sub</code> and use of &#x3C; 0.8.0 solc) and the index will be set to <code>(uint256_MAX - 1)</code>. This will allow execution to proceed to the “else” part of conditional meant for curve LP vault. Therefore, this will allow any random address to call this function with arbitrary values of gain/loss and distribute arbitrary gain/loss appearing to come from Curve vault.</p>\n<p>The attack control flow:</p>\n<ul>\n<li>-> <code>Controller.distributeStrategyGainLoss(ARBITRARY_HIGH_VALUE_OF_GAIN, 0)</code></li>\n<li>-> <code>index = 0</code> passes check for the <code>index &#x3C;= N_COINS + 1</code> part of predicate on L357 in <code>Controller.sol</code></li>\n<li>-> <code>index = uint256_MAX</code> after L362</li>\n<li>-> <code>gainUsd = ibuoy.lpToUsd(ARBITRARY_HIGH_VALUE_OF_GAIN);</code> on L371 in <code>Controller.sol</code></li>\n<li>-> <code>ipnl.distributeStrategyGainLoss(gainUsd, lossUsd, reward);</code> on L376 in <code>Controller.sol</code></li>\n<li>-> <code>(gvtAssets, pwrdAssets, performanceBonus) = handleInvestGain(lastGA, lastPA, gain, reward);</code> on L254 in <code>PnL.sol</code></li>\n<li>-> <code>performanceBonus = profit.mul(performanceFee).div(PERCENTAGE_DECIMAL_FACTOR);</code> on L186 of <code>PnL.sol</code></li>\n<li>->  <code>gvt.mint(reward, gvt.factor(gvtAssets), performanceBonus);</code> on L256 in <code>PnL.sol</code></li>\n</ul>\n<p>Recommend changing <code>||</code> to <code>&#x26;&#x26;</code> in <code>require()</code> on L357 of <code>Controller.sol</code> to prevent arbitrary addresses from going past this check. Or, consider exercising explicit access control for the authorized vault adaptors.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/69\">kristian-gro (Gro) confirmed</a></strong></p>\n<blockquote>\n<p>Confirmed and Fix has been implemented in release version.</p>\n</blockquote>\n<h2 id=\"h-04-sortvaultsbydelta-doesnt-work-as-expected\" style=\"position:relative;\"><a href=\"#h-04-sortvaultsbydelta-doesnt-work-as-expected\" aria-label=\"h 04 sortvaultsbydelta doesnt work as expected permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/2\">[H-04] <code>sortVaultsByDelta</code> doesn’t work as expected</a></h2>\n<p><em>Submitted by gpersoon, also found by shw</em></p>\n<p>The function <code>sortVaultsByDelta</code> doesn’t always work as expected.</p>\n<p>Suppose all the delta’s are positive, and delta1 >= delta2 >= delta3 > 0. Then <code>maxIndex = 0</code>. And <code>(delta &#x3C; minDelta (==0) )</code> is never true, so <code>minIndex = 0</code>.</p>\n<p>Then (assuming <code>bigFirst==true</code>):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">maxIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">2</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">minIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">maxIndex</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">minIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">3</span><span class=\"mtk1\">-</span><span class=\"mtk7\">0</span><span class=\"mtk1\">-</span><span class=\"mtk7\">0</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">3</span></span></span></code></pre>\n<p>This is clearly not what is wanted, all <code>vaultIndexes</code> should be different and should be in the range [0..2]. This is due to the fact that <code>maxDelta</code> and <code>minDelta</code> are initialized with the value 0. This all could results in withdrawing from the wrong vaults and reverts (because <code>vaultIndexes</code>[1]  is out of range).</p>\n<p><code>Exposure.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Exposure.sol#L178\">L178</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">sortVaultsByDelta</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bigFirst</span><span class=\"mtk1\">,</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">unifiedTotalAssets</span><span class=\"mtk1\">,</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[</span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\">] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">unifiedAssets</span><span class=\"mtk1\">,</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[</span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\">] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">targetPercents</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[</span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\">] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxDelta</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minDelta</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Get difference between vault current assets and vault target</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">delta</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">int256</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">unifiedAssets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] - </span><span class=\"mtk12\">unifiedTotalAssets</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">targetPercents</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PERCENTAGE_DECIMAL_FACTOR</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Establish order</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">delta</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">maxDelta</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">maxDelta</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">delta</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">maxIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">delta</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">minDelta</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">minDelta</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">delta</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">minIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bigFirst</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">maxIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">2</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">minIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">minIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">2</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">maxIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">maxIndex</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">minIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>Recommend the following</p>\n<ol>\n<li>\n<p>Initializing <code>maxDelta</code> and <code>minDelta</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxDelta</span><span class=\"mtk1\"> = -</span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">255</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// or type(int256).min when using a newer solidity version</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minDelta</span><span class=\"mtk1\">  = </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">255</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// or type(int256).max when using a newer solidity version</span></span></span></code></pre>\n</li>\n<li>Check that <code>maxIndex</code> and <code>minIndex</code> are not the same</li>\n<li>require (<code>maxIndex</code> != <code>minIndex</code>);</li>\n</ol>\n<p><strong>kristian-gro (Gro) confirmed:</strong></p>\n<blockquote>\n<p>Confirmed and Fix has been implemented in release version.</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-6\" style=\"position:relative;\"><a href=\"#medium-risk-findings-6\" aria-label=\"medium risk findings 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (6)</h1>\n<h2 id=\"m-01-usage-of-deprecated-chainlink-api-in-buoy3pool\" style=\"position:relative;\"><a href=\"#m-01-usage-of-deprecated-chainlink-api-in-buoy3pool\" aria-label=\"m 01 usage of deprecated chainlink api in buoy3pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/106\">[M-01] Usage of deprecated ChainLink API in <code>Buoy3Pool</code></a></h2>\n<p><em>Submitted by cmichel, also found by 0xRajeev and a</em>delamo_</p>\n<p>The Chainlink API (<code>latestAnswer</code>) used in the <code>Buoy3Pool</code> oracle wrappers is deprecated:</p>\n<blockquote>\n<p>This API is deprecated. Please see API Reference for the latest Price Feed API. <a href=\"https://docs.chain.link/docs/deprecated-aggregatorinterface-api-reference/#latestanswer\">Chainlink Docs</a></p>\n</blockquote>\n<p>It seems like the old API can return stale data. Checks similar to that of the new API using <code>latestTimestamp</code> and <code>latestRoundare</code> are needed, as this could lead to stale prices according to the Chainlink documentation:</p>\n<ul>\n<li><a href=\"https://docs.chain.link/docs/developer-communications#current-notifications\">under current notifications: “if answeredInRound &#x3C; roundId could indicate stale data.”</a></li>\n<li><a href=\"https://docs.chain.link/docs/historical-price-data#solidity\">under historical price data: “A timestamp with zero value means the round is not complete and should not be used.”</a></li>\n</ul>\n<p>Recommend adding checks similar to <code>latestTimestamp</code> and <code>latestRoundare</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint80</span><span class=\"mtk1\"> </span><span class=\"mtk12\">roundID</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timeStamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint80</span><span class=\"mtk1\"> </span><span class=\"mtk12\">answeredInRound</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) = </span><span class=\"mtk12\">chainlink</span><span class=\"mtk1\">.</span><span class=\"mtk11\">latestRoundData</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">timeStamp</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    “</span><span class=\"mtk12\">ChainlinkOracle</span><span class=\"mtk1\">::</span><span class=\"mtk12\">getLatestAnswer</span><span class=\"mtk1\">: </span><span class=\"mtk12\">round</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">not</span><span class=\"mtk1\"> </span><span class=\"mtk12\">complete</span><span class=\"mtk1\">”</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">answeredInRound</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">roundID</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    “</span><span class=\"mtk12\">ChainlinkOracle</span><span class=\"mtk1\">::</span><span class=\"mtk12\">getLatestAnswer</span><span class=\"mtk1\">: </span><span class=\"mtk12\">stale</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">”</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">price</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Chainlink Malfunction”)</span><span class=\"mtk14\">;</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/106\">kristian-gro (Gro) confirmed</a></strong></p>\n<blockquote>\n<p>Confirmed and Fix has been implemented in release version.</p>\n</blockquote>\n<h2 id=\"m-02-safe-addresses-can-only-be-added-but-not-removed\" style=\"position:relative;\"><a href=\"#m-02-safe-addresses-can-only-be-added-but-not-removed\" aria-label=\"m 02 safe addresses can only be added but not removed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/51\">[M-02] Safe addresses can only be added but not removed</a></h2>\n<p><em>Submitted by 0xRajeev, also found by pauliax</em></p>\n<p>The <code>addSafeAddress()</code>  takes an address and adds it to a “safe list”. This is used in <code>eoaOnly()</code> to give exemption to safe addresses that are trusted smart contracts, when all other smart contacts are prevented from protocol interaction. The stated purpose is to allow only such partner/trusted smart contract integrations (project rep mentioned Argent wallet as the only one for now but that may change) an exemption from potential flash loan threats. But if there is a safe listed integration that needs to be later disabled, it cannot be done. The protocol will have to rely on other measures (outside the scope of this contest) to prevent flash loan manipulations which are specified as an area of critical concern.</p>\n<p><strong>Scenario:</strong> A trusted integration/partner address is added to the safe list. But that wallet/protocol/DApp is later manipulated (by the project, its users or an attacker) to somehow launch a flash loan attack on the protocol. However, its address cannot be removed from the safe list and the protocol cannot prevent flash loan manipulations from that source because of its exemption. Contract/project will have to be redeployed.</p>\n<p>Recommend changing <code>addSafeAddress()</code> to <code>isSafeAddress()</code> with an additional bool parameter to allow both the enabling <em>AND</em> disabling of safe addresses.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/51#issuecomment-880043980\">kristian-gro (Gro) confirmed but disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>low risk - Made specifically for one partner in beta period, and planned to be removed. We added the removal function for sanity.</p>\n<p>Confirmed and Fix has been implemented in release version.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/51#issuecomment-886327301\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I’ll keep medium risk because this could put the protocol into a one way street and not being able to remove safe addresses is quite dangerous. Medium risk.</p>\n</blockquote>\n<h2 id=\"m-03-basevaultadaptor-assumes-shareprice-is-always-in-underlying-decimals\" style=\"position:relative;\"><a href=\"#m-03-basevaultadaptor-assumes-shareprice-is-always-in-underlying-decimals\" aria-label=\"m 03 basevaultadaptor assumes shareprice is always in underlying decimals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/114\">[M-03] <code>BaseVaultAdaptor</code> assumes <code>sharePrice</code> is always in underlying decimals</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The two <code>BaseVaultAdaptor.calculateShare</code> functions compute <code>share = amount.mul(uint256(10)**decimals).div(sharePrice)</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sharePrice</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getVaultSharePrice</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// amount is in &quot;token&quot; decimals, share should be in &quot;vault&quot; decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">share</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">)**</span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sharePrice</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>This assumes that the <code>sharePrice</code> is always in <em>token</em> decimals and that <em>token</em> decimals is the same as <em>vault</em> decimals.</p>\n<p>Both these assumptions happen to be correct for Yearn vaults, but that will not necessarily be the case for other protocols.\nAs this functionality is in the <code>BaseVaultAdaptor</code>, and not in the specific <code>VaultAdaptorYearnV2_032</code>, consider generalizing the conversion.</p>\n<p>Integrating a token where the token or price is reported in a different precision will lead to potential losses as more shares are computed.</p>\n<p>Because the conversion seems highly protocol-specific, it is recommended that <code>calculateShare</code> should be an abstract function (like <code>_getVaultSharePrice</code>) that is implemented in the specific adaptors.</p>\n<p><strong>- <a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/114\">kristian-gro (Gro) confirmed</a></strong></p>\n<blockquote>\n<p>Confirmed and shares have been removed from release version.</p>\n</blockquote>\n<h2 id=\"m-04-flash-loan-risk-mitigation-is-optional-and-not-robust-enough\" style=\"position:relative;\"><a href=\"#m-04-flash-loan-risk-mitigation-is-optional-and-not-robust-enough\" aria-label=\"m 04 flash loan risk mitigation is optional and not robust enough permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/52\">[M-04] Flash loan risk mitigation is optional and not robust enough</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>The <code>switchEoaOnly()</code> allows the owner to disable <code>preventSmartContracts</code> (the project’s plan apparently is to do so after the beta-period) which will allow any smart contract to interact with the protocol and potentially exploit any underlying flash loan vulnerabilities which are specified as an area of critical concern.</p>\n<p>The current mitigation is to optionally prevent contracts, except whitelisted partner ones, from interacting with the protocol to prevent any flash loan manipulations. A more robust approach would be to add logic preventing multiple txs to the protocol from the same address/<code>tx.origin</code> within the same block when smart contracts are allowed. This will avoid any reliance on trust with integrating partners/protocols.</p>\n<p>Recommend adding logic that prevents multiple txs to the protocol from the same address and within the same block.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/52#issuecomment-880041099\">kristian-gro (Gro) acknowledged but disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Low-severity: This is a temporary blocker to not let SCs interact with gro-protocol, planned to be removed after beta as it might potentially stop other integrations (as per issue 51)</p>\n<p>Acknowledged, this is just a temporary block, and is planned to be removed in future releases - other protection exists to protect the system from flash loan manipulations.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/52#issuecomment-886701698\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>It looks like a low risk issue since it’s a future problem and not something that is an immediate issue, however, it’s not clear how the protocol will protect itself against flash loans after this temporary blocker is off. One of the critical protocol’s concerns are flash loans manipulations therefore I think medium risk is justified here.</p>\n</blockquote>\n<h2 id=\"m-05-use-of-deprecated-chainlink-function-latestanswer\" style=\"position:relative;\"><a href=\"#m-05-use-of-deprecated-chainlink-function-latestanswer\" aria-label=\"m 05 use of deprecated chainlink function latestanswer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/126\">[M-05] Use of deprecated Chainlink function <code>latestAnswer</code></a></h2>\n<p><em>Submitted by shw</em></p>\n<p>According to Chainlink’s documentation (<a href=\"https://docs.chain.link/docs/deprecated-aggregatorinterface-api-reference/\">Deprecated API Reference</a>, <a href=\"https://docs.chain.link/docs/migrating-to-flux-aggregator/#3-use-the-new-functions\">Migration Instructions</a>, and <a href=\"https://docs.chain.link/docs/price-feeds-api-reference/\">API Reference</a>), the <code>latestAnswer</code> function is deprecated. This function does not throw an error if no answer has been reached, but instead returns 0, causing an incorrect price to be fed to the <code>Buoy3Pool</code>. See <code>Buoy3Pool.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L207\">L207</a> and\n<a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L214-L216\">L214-L216</a>.</p>\n<p>Recommend using the <code>latestRoundData</code> function to get the price instead. Also recommend adding checks on the return data with proper revert messages if the price is stale or the round is incomplete, for example:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span><span class=\"mtk12\">uint80</span><span class=\"mtk1\"> </span><span class=\"mtk12\">roundID</span><span class=\"mtk1\">, </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\">, , </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timeStamp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint80</span><span class=\"mtk1\"> </span><span class=\"mtk12\">answeredInRound</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">.</span><span class=\"mtk11\">latestRoundData</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">answeredInRound</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">roundID</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;...&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">timeStamp</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;...&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/126#issuecomment-879972199\">kristian-gro (Gro) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>disagree with severity (Low risk)\nIssue would cause deposits and withdrawals to stop, no funds lost</p>\n</blockquote>\n<p><strong>kristian-gro (Gro) confirmed:</strong></p>\n<blockquote>\n<p>Confirmed and shares have been removed from release version.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/126#issuecomment-886824919\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>In my opinion halting the protocol deserves medium risk. While no funds are lost, from brand perspective it’s a second worst thing. Keeping as medium risk.</p>\n</blockquote>\n<h2 id=\"m-06-early-user-can-break-minting\" style=\"position:relative;\"><a href=\"#m-06-early-user-can-break-minting\" aria-label=\"m 06 early user can break minting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/107\">[M-06] Early user can break minting</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The protocol computes a <code>factor</code> when minting (and burning) tokens, which is the exchange rate of rebase to base tokens (base supply / total assets value), see <code>GToken.factor()</code>.\nThe first user can manipulate this factor such that it always returns <code>0</code>.</p>\n<p><strong>Example:</strong></p>\n<ul>\n<li>Attacker deposits 100.0 DAI and mints 100 * 1e18 PWRD: <code>DepositHandler.depositGToken</code> with <code>dollarAmount = 100.0 = 100 * 1e18</code>, then <code>ctrl.mintGToken(pwrd, msg.sender, 1e18)</code>\ncalls <code>gt.mint(account, gt.factor(), amount=1e18)</code> where <code>gt.factor()</code> returns <code>getInitialBase() = 1e18</code> because the person is the first minter and it mints <code>amount * factor / _BASE = 1e18</code></li>\n<li>The <code>ctrl.mintGToken</code> call also increases total assets: <code>pnl.increaseGTokenLastAmount(...)</code></li>\n<li>The attacker now burns (withdraws) all minted tokens again <strong>except a single wei</strong> using one of the withdrawal functions in <code>WithdrawHandler</code>. Because of the withdrawal fee the total assets are only decreased by the post-fee amount (<code>IPnL(pnl).decreaseGTokenLastAmount(pwrd, amount=userBalance - 1, bonus=fee);</code>), i.e., with a 2% withdrawal fee the total assets stay at 2% of 100$ = 2 * 1e18.</li>\n<li>The result is that <code>GToken.factor()</code> always returns <code>totalSupplyBase().mul(BASE).div(totalAssets) = 1 * 1e18 / (2 * 1e18) = 0</code></li>\n</ul>\n<p>The resulting <code>factor</code> is 0 and thus any user-deposits by <code>depositGToken</code> will mint 0 base tokens to the depositor.\nThis means all deposits and future value accrues to the attacker who holds the only base tokens.</p>\n<p>An attacker could even front-run the first minter to steal their deposit this way.</p>\n<p>Uniswap solves a similar problem by sending the first 1000 tokens to the zero address which makes the attack 1000x more expensive. The same should work here, i.e., on first mint (<code>total base supply == 0</code>), lock some of the first minter’s tokens by minting ~1% of the initial amount to the zero address instead of to the first minter.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/107#issuecomment-879991211\">kristian-gro (Gro) acknowledged but disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Known issue which will be handled by ops - low risk as gro protocol is the first depositor</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/107#issuecomment-886829344\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Even though it’s a known issue its consequences are significant. Only because it can be mitigated by ops quite easily, I’ll degrade it to medium level.</p>\n</blockquote>\n<h1 id=\"low-risk-findings\" style=\"position:relative;\"><a href=\"#low-risk-findings\" aria-label=\"low risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings</h1>\n<h2 id=\"l-01-emergencyhandler-not-checked--not-emitted\" style=\"position:relative;\"><a href=\"#l-01-emergencyhandler-not-checked--not-emitted\" aria-label=\"l 01 emergencyhandler not checked  not emitted permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/5\">[L-01] <code>emergencyHandler</code> not checked &#x26; not emitted</a></h2>\n<p><em>Submitted by gpersoon, also found by shw</em></p>\n<p>The function <code>setWithdrawHandler</code> allows the setting of <code>withdrawHandler</code> and <code>emergencyHandler</code>.\nHowever, <code>emergencyHandler</code> isn’t checked for 0 (like the <code>withdrawHandler</code> ). The value of the <code>emergencyHandler</code> is also not emitted (like the <code>withdrawHandler</code> )</p>\n<p><code>Controller.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/Controller.sol#L105\">L105</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setWithdrawHandler</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_withdrawHandler</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_emergencyHandler</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_withdrawHandler</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;setWithdrawHandler: 0x&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">withdrawHandler</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_withdrawHandler</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emergencyHandler</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_emergencyHandler</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LogNewWithdrawHandler</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_withdrawHandler</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend adding something like:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_emergencyHandler</span><span class=\"mtk1\">!= </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;setEmergencyHandler: 0x&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LogNewEmergencyHandler</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LogNewEmergencyHandler</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_emergencyHandler</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong>- <a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/5\">kristian-gro (Gro) confirmed</a></strong></p>\n<h2 id=\"l-02-lastratio-of-buoy3pool-is-not-initialized\" style=\"position:relative;\"><a href=\"#l-02-lastratio-of-buoy3pool-is-not-initialized\" aria-label=\"l 02 lastratio of buoy3pool is not initialized permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/7\">[L-02] <code>lastRatio</code> of <code>Buoy3Pool</code> is not initialized</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>The values of <code>lastRatio</code> in the contract <code>Buoy3Pool.sol</code> are not initialized (thus they have a value of 0).\nIf <code>safetyCheck()</code> would be called before the first time <code>_updateRatios</code> is called, then <code>safetyCheck()</code> would give unexpected results.</p>\n<p><code>Buoy3Pool.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L25\">L25</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk8\">`Buoy3Pool`</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">FixedStablecoins</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Controllable</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IBuoy</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IChainPrice</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) </span><span class=\"mtk12\">lastRatio</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">safetyCheck</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_ratio</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">curvePool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get_dy</span><span class=\"mtk1\">(</span><span class=\"mtk11\">int128</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk11\">int128</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\">), </span><span class=\"mtk11\">getDecimal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_ratio</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">abs</span><span class=\"mtk1\">(</span><span class=\"mtk11\">int256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_ratio</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">lastRatio</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_ratio</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PERCENTAGE_DECIMAL_FACTOR</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">CURVE_RATIO_DECIMALS_FACTOR</span><span class=\"mtk1\">) &gt; </span><span class=\"mtk12\">BASIS_POINTS</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateRatios</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tolerance</span><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">lastRatio</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">newRatios</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<p>Recommend double checking if this situation can occur and perhaps calling <code>_updateRatios</code> as soon as possible. Or alternatively, check in <code>safetyCheck</code> that the <code>lastRatio</code> values are initialized.</p>\n<p><strong>- <a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/7\">kristian-gro (Gro) acknowledged</a></strong></p>\n<h2 id=\"l-03-buoy3pool_updateratios-unsafe-math\" style=\"position:relative;\"><a href=\"#l-03-buoy3pool_updateratios-unsafe-math\" aria-label=\"l 03 buoy3pool_updateratios unsafe math permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/105\">[L-03] <code>Buoy3Pool._updateRatios</code> unsafe math</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The function performs type conversions and subtraction without over-/underflow checks:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">check</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">abs</span><span class=\"mtk1\">(</span><span class=\"mtk11\">int256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_ratio</span><span class=\"mtk1\">) - </span><span class=\"mtk11\">int256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">chainRatios</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">CHAIN_FACTOR</span><span class=\"mtk1\">)));</span></span></span></code></pre>\n<p>Recommend checking if the values fit within the type range first, otherwise revert with a meaningful error message, as well as checking for underflows.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/105#issuecomment-886260882\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>This is partially a duplicate of #6 but it focuses on low risk issue so I’ll record is as a separate (low risk) issue.</p>\n</blockquote>\n<h2 id=\"l-04-setunderlyingtokenpercent-should-check-percentages\" style=\"position:relative;\"><a href=\"#l-04-setunderlyingtokenpercent-should-check-percentages\" aria-label=\"l 04 setunderlyingtokenpercent should check percentages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/11\">[L-04] <code>setUnderlyingTokenPercent</code> should check percentages</a></h2>\n<p><em>Submitted by gpersoon, also found by cmichel</em></p>\n<p>The function <code>setUnderlyingTokenPercent</code> doesn’t check that the sum of all the percentages is 100%.\nThis way the percentages could be accidentally set up the wrong way, with unpredictable results. Note that the function can only be called by  controller or the owner so the likelihood of mistakes is pretty low.</p>\n<p><code>Insurance.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Insurance.sol#L100\">#L100</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setUnderlyingTokenPercent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">coinIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">percent</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyValidIndex</span><span class=\"mtk1\">(</span><span class=\"mtk12\">coinIndex</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">controller</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">owner</span><span class=\"mtk1\">(), </span><span class=\"mtk8\">&quot;setUnderlyingTokenPercent: !authorized&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">underlyingTokensPercents</span><span class=\"mtk1\">[</span><span class=\"mtk12\">coinIndex</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">percent</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LogNewTargetAllocation</span><span class=\"mtk1\">(</span><span class=\"mtk12\">coinIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">percent</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend changing <code>setUnderlyingTokenPercent</code> to set the percentages for all the coins at the same time.\nAnd check that the sum of the percentages is 100%</p>\n<h2 id=\"l-05-initialize-maxpercentforwithdraw-and-maxpercentfordeposit\" style=\"position:relative;\"><a href=\"#l-05-initialize-maxpercentforwithdraw-and-maxpercentfordeposit\" aria-label=\"l 05 initialize maxpercentforwithdraw and maxpercentfordeposit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/16\">[L-05] initialize <code>maxPercentForWithdraw</code> and <code>maxPercentForDeposit</code>?</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>The parameters <code>maxPercentForWithdraw</code> and <code>maxPercentForDeposit</code>, which are not directly initialized, will work in a suboptimal way If, the functions which rely on these parameters, are called before <code>setWhaleThresholdWithdraw</code>/<code>setWhaleThresholdDeposit</code>.</p>\n<p><code>Insurance.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Insurance.sol#L63\">L63</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxPercentForWithdraw</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxPercentForDeposit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setWhaleThresholdWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_maxPercentForWithdraw</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">maxPercentForWithdraw</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_maxPercentForWithdraw</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LogNewVaultMax</span><span class=\"mtk1\">(</span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_maxPercentForWithdraw</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setWhaleThresholdDeposit</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_maxPercentForDeposit</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyOwner</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">maxPercentForDeposit</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_maxPercentForDeposit</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LogNewVaultMax</span><span class=\"mtk1\">(</span><span class=\"mtk4\">true</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_maxPercentForDeposit</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend assigning a default value to <code>maxPercentForWithdraw</code> and <code>maxPercentForDeposit</code>. Or alternatively, initializing the values via the constructor.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/16#issuecomment-880061444\">kristian-gro (Gro) acknowledged</a>:</strong></p>\n<blockquote>\n<p>This is known and values are updated as part of deployment scripts</p>\n</blockquote>\n<h2 id=\"l-06-use-safemath\" style=\"position:relative;\"><a href=\"#l-06-use-safemath\" aria-label=\"l 06 use safemath permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/22\">[L-06] use <code>safemath</code></a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p><code>Safemath</code> is used in several places but not everywhere. Especially in risky places like <code>PnL</code> and <code>distributeStrategyGainLoss</code> where it is hardly worth the gas-savings of not using <code>safemath</code>.</p>\n<p>In <code>distributeStrategyGainLoss</code> it does make a difference, also due to another issue.</p>\n<p><a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pnl/PnL.sol#L215\"><code>PnL.sol</code> L215</a>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">handleLoss</span><span class=\"mtk1\">( </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gvtAssets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pwrdAssets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">loss</span><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxGvtLoss</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">gvtAssets</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">DEFAULT_DECIMALS_FACTOR</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">loss</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">maxGvtLoss</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">gvtAssets</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">gvtAssets</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">loss</span><span class=\"mtk1\">;    </span><span class=\"mtk3\">// won&#39;t underflow but safemath won&#39;t hurt</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">forceDistribute</span><span class=\"mtk1\">() </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">total</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_controller</span><span class=\"mtk1\">().</span><span class=\"mtk11\">totalAssets</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">total</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">lastPwrdAssets</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">DEFAULT_DECIMALS_FACTOR</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">lastGvtAssets</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">total</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">lastPwrdAssets</span><span class=\"mtk1\">;   </span><span class=\"mtk3\">// won&#39;t underflow but safemath won&#39;t hurt</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   ...</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/Controller.sol#L355\"><code>Controller.sol</code> L355</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">distributeStrategyGainLoss</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gain</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">loss</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vaultIndexes</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">index</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">N_COINS</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;!VaultAdaptor&quot;</span><span class=\"mtk1\">);    </span><span class=\"mtk3\">// always true, see separate issue</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;  </span><span class=\"mtk3\">// can underflow</span></span></span></code></pre>\n<p>Recommend applying <code>safemath</code> or moving to Solidity 0.8.x</p>\n<p><strong>- <a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/22\">kristian-gro (Gro) acknowledged</a></strong></p>\n<h2 id=\"l-07-missing-emits-for-declared-events\" style=\"position:relative;\"><a href=\"#l-07-missing-emits-for-declared-events\" aria-label=\"l 07 missing emits for declared events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/47\">[L-07] Missing emits for declared events</a></h2>\n<p><em>Submitted by 0xRajeev, also found by cmichel</em></p>\n<p>Missing emits for declared events indicate potentially missing logic, redundant declarations, or reduced off-chain monitoring capabilities.</p>\n<p><strong>Scenario:</strong> For example, the event <code>LogFlashSwitchUpdated</code> is missing an emit in <code>Controller.sol</code>. Based on the name, this is presumably related to flash loans being enabled/disabled which could have significant security implications. Or the (misspelled) <code>LogHealhCheckUpdate</code> which is presumably related to a health check logic that is missing in <code>LifeGuard</code>. See issue page for referenced code.</p>\n<p>Recommend evaluating if logic is missing and if so, adding logic+emit or removing event.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/47\">kristian-gro (Gro) confirmed</a></strong></p>\n<h2 id=\"l-08-having-only-owner-unpauserestart-is-risky\" style=\"position:relative;\"><a href=\"#l-08-having-only-owner-unpauserestart-is-risky\" aria-label=\"l 08 having only owner unpauserestart is risky permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/48\">[L-08] Having only owner unpause/restart is risky</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>The design choice seems to allow a whitelist of addresses (bots or trusted parties) that can trigger pause/emergency but <code>onlyOwner</code> can unpause/restart (and perform other privileged functions). While it is recommended in general to have separate privileges/roles for stopping and starting critical functions, having only a single owner for unpause/restart triggering may create a single point of failure if owner is EOA and keys are lost/compromised.</p>\n<p><strong>Scenario:</strong> <code>Protocol</code> is paused or put in emergency mode by a bot/user in whitelist. <code>Owner</code> is an EOA and the private keys are lost. <code>Protocol</code> cannot be unpaused/restarted. See <code>Controller.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L317\">#L317</a>, <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L101\">#L101</a>, and <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L97\">#L97</a>.</p>\n<p>Recommend evaluating this design choice to see if a whitelist should also be allowed to unpause/restart. At a minimum, use a 6-of-9 or higher multisig and not an EOA.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/48#issuecomment-880049331\">kristian-gro (Gro) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Multi sig planned</p>\n</blockquote>\n<h2 id=\"l-09-uninitialized-vaultsaddresses-will-lead-to-reverts\" style=\"position:relative;\"><a href=\"#l-09-uninitialized-vaultsaddresses-will-lead-to-reverts\" aria-label=\"l 09 uninitialized vaultsaddresses will lead to reverts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/50\">[L-09] Uninitialized vaults/addresses will lead to reverts</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>Uninitialized system/curve vaults (default to zero address) will lead to reverts on calls and expect owner to set them before other functions are called because functions do not check if system has been initialized. This requires a robust deployment script which is fail-safe.</p>\n<p>The same applies to many other address parameters in the protocol e.g.: <code>reward</code>.</p>\n<p><strong>Scenario:</strong> All vaults are not initialized because of a script error or an admin mistake. Protocol goes live and user interactions result in exceptions. Users lose trust and protocol reputation takes a hit. See <code>Controller.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L136-L150\">#L136-L150</a> and <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L194-L198\">#L194-L198</a>.</p>\n<p>Recommend evaluating non-zero defaults, initializing from constructor or maintaining/checking an initialization state variable which prevents other functions from being called until all critical system states such as vault addresses are initialized.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/50#issuecomment-880044295\">kristian-gro (Gro) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Controller by gro governance, dealt with in deployment scripts</p>\n</blockquote>\n<h2 id=\"l-10-the-use-of-txorigin-for-smart-contract-safe-list-is-risky-and-not-generic\" style=\"position:relative;\"><a href=\"#l-10-the-use-of-txorigin-for-smart-contract-safe-list-is-risky-and-not-generic\" aria-label=\"l 10 the use of txorigin for smart contract safe list is risky and not generic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/53\">[L-10] The use of <code>tx.origin</code> for smart contract safe list is risky and not generic</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>The <code>addSafeAddress()</code>  takes an address and adds it to a “safe list”. This is used in <code>eoaOnly()</code> to give exemption to safe addresses that are trusted smart contracts, when all other smart contacts are prevented from protocol interaction. The stated purpose is to allow only such partner/trusted smart contract integrations (project rep mentioned Argent wallet as the only one for now but that may change) an exemption from potential flash loan threats.</p>\n<p>The <code>eoaOnly()</code> check used during deposits and withdrawals checks if <code>preventSmartContracts</code> is enabled and if so, makes sure the transaction is coming from an integration/partner smart contract. But instead of using <code>msg.sender</code> in the check it uses <code>tx.origin</code>. This is suspect because <code>tx.origin</code> gives the originating EOA address of the transaction and not a smart contract’s address. (This may get even more complicated with the proposed EIP-3074.)</p>\n<p>Discussion with the project team indicated that this is indeed not the norm but is apparently the case for their only current (none others planned) integration with Argent wallet where the originating account is Argent’s relayer <code>tx.origin</code> i.e. flow:</p>\n<blockquote>\n<p>Argent relayer (<code>tx.origin</code>) => Argent user wallet (<code>msg.sender</code>) => gro protocol while the typically expected flow is: user EOA (<code>tx.origin</code>) => proxy (<code>msg.sender</code>) => gro protocol.</p>\n</blockquote>\n<p>While this has reportedly been verified and tested, it does seem strange and perhaps warrants a re-evaluation because the exemption for this/other trusted integration/partner smart contracts will not work otherwise.</p>\n<p><strong>Scenario:</strong> Partner contract is added to the safe address for exemption but the integration fails because of the use of <code>tx.origin</code> instead of <code>msg.sender</code>. See <code>Controller.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L266-L272\">#L266-L272</a>, <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L176-L178\">#L176-L178</a>, and <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L171-L174\">#L171-L174</a>.</p>\n<p>Recommend re-evaluating the use of <code>tx.origin</code> instead of <code>msg.sender</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/53#issuecomment-880039319\">kristian-gro (Gro) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Made for specific partner, so cannot be generic</p>\n<p><em>While this has reportedly been verified and tested, it does seem strange and perhaps warrants a re-evaluation because the exemption for this/other trusted integration/partner smart contracts will not work otherwise.</em></p>\n<p>This SC protection is only temporary as we are aware of EIP-3074, and consideration of how we need to change this/or if we need this at all are ongoing.</p>\n</blockquote>\n<h2 id=\"l-11-missing-parameter-validation\" style=\"position:relative;\"><a href=\"#l-11-missing-parameter-validation\" aria-label=\"l 11 missing parameter validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/90\">[L-11] Missing parameter validation</a></h2>\n<p><em>Submitted by cmichel, also found by 0xRajeev</em></p>\n<p>Some parameters of functions are not checked for invalid values:</p>\n<ul>\n<li><code>BaseVaultAdaptor.constructor</code>: The addresses should be checked for non-zero values</li>\n<li><code>LifeGuard3Pool.constructor</code>: The addresses should be checked for non-zero values</li>\n<li><code>Buoy3Pool.constructor</code>: The addresses should be checked for non-zero values</li>\n<li><code>PnL.constructor</code>: The addresses should be checked for non-zero values</li>\n<li><code>Controllable.setController</code>: Does not check that <code>newController != controller</code></li>\n</ul>\n<p>A wrong user input,  or wallets defaulting to the zero addresses for a missing input, can lead to the contract needing to redeploy or wasted gas.</p>\n<p>Recommend validating the parameters.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/90#issuecomment-880626823\">kristian-gro (Gro) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Low risk/Non critical - Deployment script handles these cases, but good practice to have 0x checks to stop wasting gas and having to redeploy.</p>\n</blockquote>\n<h2 id=\"l-12-stricter-than-needed-inequalities-may-affect-borderline-scenarios\" style=\"position:relative;\"><a href=\"#l-12-stricter-than-needed-inequalities-may-affect-borderline-scenarios\" aria-label=\"l 12 stricter than needed inequalities may affect borderline scenarios permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/67\">[L-12] Stricter than needed inequalities may affect borderline scenarios</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>Token amounts/prices are typically open-ranged and inclusive of the bounds. Using ‘&#x3C;‘ or ‘>’ instead of ‘&#x3C;=‘ and ‘>=‘ may affect borderline scenarios, be considered unintuitive by users, and affect accounting.</p>\n<p>-<strong>Scenario 1:</strong> In <code>calculateVaultSwapData()</code>, the <code>require()</code> check is:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">withdrawAmount</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalCurrentAssetsUsd</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Withdrawal exceeds system assets&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The ‘&#x3C;‘ could be replaced by ‘&#x3C;=‘</p>\n<p><strong>Scenario 2:</strong> In <code>withdrawSingleByLiquidity()</code>, the <code>require()</code> check is:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">minAmount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;withdrawSingle: !minAmount&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The ‘>’ should be ‘>=‘ as is used in the similar check in <code>withdrawSingleByExchange()</code>.</p>\n<p>See <code>Insurance.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L429\">L429</a>, and <code>LifeGuard3Pool.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/pools/LifeGuard3Pool.sol#L224\">L224</a> and <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/pools/LifeGuard3Pool.sol#L268\">L268</a>.</p>\n<p>Recommend reconsidering strict inequalities and relaxing them if possible.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/67#issuecomment-880031850\">kristian-gro (Gro) acknowledged</a>:</strong></p>\n<blockquote>\n<p>We haven’t been able to model an exploit for this</p>\n</blockquote>\n<h2 id=\"l-13-totalassets--withdrawelusd-should-be-inclusive\" style=\"position:relative;\"><a href=\"#l-13-totalassets--withdrawelusd-should-be-inclusive\" aria-label=\"l 13 totalassets  withdrawelusd should be inclusive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/86\">[L-13] <code>totalAssets</code> > <code>withdrawelUsd</code> should be inclusive</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>The check should be inclusive here to cover the case when <code>totalAssets</code> = <code>withdrawalUsd</code>:</p>\n<p>Recommend changing</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">totalAssets</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">withdrawUsd</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;totalAssets &lt; withdrawalUsd&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>to</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">totalAssets</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">withdrawUsd</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;totalAssets &lt; withdrawalUsd&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/86#issuecomment-880632366\">kristian-gro (Gro) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Edge case that is unlikely to cause issues as gro protocol provides initial seed investment</p>\n</blockquote>\n<h2 id=\"l-14-use-of-uninitialized-value-and-unclearunused-logic\" style=\"position:relative;\"><a href=\"#l-14-use-of-uninitialized-value-and-unclearunused-logic\" aria-label=\"l 14 use of uninitialized value and unclearunused logic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/65\">[L-14] Use of uninitialized value and unclear/unused logic</a></h2>\n<p><em>Submitted by 0xRajeev, also found by cmichel</em></p>\n<p><code>vaultIndexes</code> is uninitialized and it’s unclear what 10000 signifies here. <code>investDelta</code> return value is also ignored at call site. If this is an indication of missed/incorrect logic, then it’s risky. If not, removing will help readability/maintainability. See <code>Insurance.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L166\">#L166</a>, and <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L155\">#L155</a>.</p>\n<p>Recommend evaluating any missing logic or else removing unused code.</p>\n<p><strong>- <a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/65\">kristian-gro (Gro) confirmed</a></strong></p>\n<h2 id=\"l-15-decimals-of-fixedstablecoins\" style=\"position:relative;\"><a href=\"#l-15-decimals-of-fixedstablecoins\" aria-label=\"l 15 decimals of fixedstablecoins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/77\">[L-15] decimals of <code>FixedStablecoins</code></a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>The <code>FixedStablecoins</code> constructor does not validate that addresses in the array are not empty, <code>!= address(0)</code>, and instead relies on the creator passing the correct values for decimals. The comment next to USDC (0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48) says that it is supposed to have 6 decimals:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">`uint256 public immutable USDC_DECIMALS; // = 1E6;`</span></span></span></code></pre>\n<p>However, when querying the actual value on <a href=\"https://etherscan.io/address/0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf#readContract\">Etherscan</a>, it shows 0 decimals:  The problem with USDC is that it uses a proxy pattern, thus the implementation could change (decimals could change but in practice, I think it is very unlikely).</p>\n<p>I think it would be better not to pass decimals separately and, instead of relying on the correctness of the input, recommend using <code>IERC20Detailed</code> to query the decimals in code. Always querying the decimals on the go may be very inefficient and bring new attack vectors so I think you need to do here an assumption that decimals of upgradeable tokens won’t change.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/77#issuecomment-880025922\">kristian-gro (Gro) acknowledged</a>:</strong></p>\n<blockquote>\n<p>We dont expect to see any changes to underlying decimals of stablecoins, worst case scenario we can redeploy the affected contracts</p>\n</blockquote>\n<h2 id=\"l-16-more-accurate-calculation-of-return-usd-of-withdrawsinglebyliquidity\" style=\"position:relative;\"><a href=\"#l-16-more-accurate-calculation-of-return-usd-of-withdrawsinglebyliquidity\" aria-label=\"l 16 more accurate calculation of return usd of withdrawsinglebyliquidity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/121\">[L-16] More accurate calculation of return USD of <code>withdrawSingleByLiquidity</code></a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The <code>withdrawSingleByLiquidity</code> function of <code>LifeGuard3Pool</code> calls <code>buoy.singleStableToUsd</code> to calculate the return USD amount, which internally calls <code>_stableToUsd</code> with the <code>deposit</code> parameter set to <code>true</code>. A more accurate calculation is to set the <code>deposit</code> parameter to <code>false</code> since this action is a withdrawal. A similar issue exists in the function <code>calcProtocolWithdraw</code> of <code>Allocation</code>, where the current strategy’s USD is calculated by <code>buoy.singleStableToUsd</code>. See <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/LifeGuard3Pool.sol#L226\"><code>LifeGuard3Pool.sol</code> #L226</a>, <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L122\"><code>Buoy3Pool.sol</code> #L122</a>, and <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Allocation.sol#L142\"><code>Allocation.sol</code> #L142</a>.</p>\n<p>Recommend considering adding a new boolean parameter, <code>deposit</code>, to the <code>singleStableToUsd</code> function of <code>Buoy3Pool</code> to indicate whether the action is a deposit or not, as that in the <code>stableToUsd</code> and <code>stableToLp</code> functions.</p>\n<p><strong>- <a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/121\">kristian-gro (Gro) confirmed</a></strong></p>\n<h2 id=\"l-17-use-of-txorigin-for-authentication\" style=\"position:relative;\"><a href=\"#l-17-use-of-txorigin-for-authentication\" aria-label=\"l 17 use of txorigin for authentication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/122\">[L-17] Use of <code>tx.origin</code> for authentication</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The <code>eoaOnly</code> function of <code>Controller</code> checks whether the user is whitelisted using <code>tx.origin</code>. Using <code>tx.origin</code> to authenticate users is generally not a good practice since it can be abused by malicious contracts when whitelisted users are interacting with them. Users have to be very careful to avoid being impersonated when interacting with contracts from other protocols, which could unnecessarily burden users. See <a href=\"https://github.com/code-423n4/2021-06-gro/blob/main/contracts/Controller.sol#L269\"><code>Controller.sol</code> #L269</a>. For for more discussion on <code>tx.origin</code>, refer to <a href=\"https://github.com/ethereum/solidity/issues/683\">Solidity issue - Remove tx.origin</a>.</p>\n<p>Recommend changing <code>tx.origin</code> at line 269 to <code>msg.sender</code> to ensure that the entity calling the <code>Controller</code> is the one allowed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/122#issuecomment-886702598\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>This issue touches on different problem so I’ll keep it as stand-alone low risk issue.</p>\n</blockquote>\n<h2 id=\"l-18-vault-assets-can-be-migrated-to-an-arbitrary-address-at-anytime-by-owner\" style=\"position:relative;\"><a href=\"#l-18-vault-assets-can-be-migrated-to-an-arbitrary-address-at-anytime-by-owner\" aria-label=\"l 18 vault assets can be migrated to an arbitrary address at anytime by owner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/59\">[L-18] Vault assets can be migrated to an arbitrary address at anytime by owner</a></h2>\n<p><em>Submitted by 0xRajeev, also found by gpersoon</em></p>\n<p><code>BaseVaultAdaptor</code> contains logic that is “built on top of any vault in order for it to function with Gro protocol.” One of such functions is the <code>migrate()</code> function which is <code>onlyOwner</code> and takes an address parameter which allows owner to migrate the vault’s entire balance at any time to that address. This is extremely risky because it gives an opportunity for, or at least a perception of, a rug-pull by a disgruntled/malicious owner/dev to the protocol users/community. This could also be dangerous if triggered accidentally, especially by an EOA owner address or maliciously via compromised keys.</p>\n<ul>\n<li><strong>Scenario 1:</strong> Protocol launches and starts accumulating TVL. A savvy user analyzes source and shares the presence of this <code>migrate()</code> function as potential owner rug-pull vector. Users withdraw funds and protocol reputation takes a hit.</li>\n<li><strong>Scenario 2:</strong> Protocol launches and hits 100MM TVL. A disgruntled dev/owner migrates vault assets to their address and drains the protocol.</li>\n<li><strong>Scenario 3:</strong> Protocol launches and hits 100MM TVL. Owner EOA keys get compromised and attacker migrates vault assets to their address and drains the protocol.</li>\n</ul>\n<p>See <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/vaults/BaseVaultAdaptor.sol#L294-L302\"><code>BaseVaultAdaptor.sol</code> #L294-L302 </a></p>\n<p>See similar concern on <code>migrate()</code> functionality in ShibaSwap recently from Yearn devs <a href=\"https://twitter.com/bantg/status/1412370758987354116\">here</a> and <a href=\"https://twitter.com/bantg/status/1412388385663164425\">here</a>. Also from <a href=\"https://twitter.com/valentinmihov/status/1412352490918625280\">here</a> and <a href=\"https://twitter.com/shegenerates/status/1412642215537545218\">here</a>.</p>\n<p>Recommend evaluating the need for this function and then avoiding/mitigating the risk appropriately.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/59#issuecomment-880625662\">kristian-gro (Gro) confirmed but disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Low risk</p>\n<ul>\n<li>Owner is timelock, plan for multi sig.\n-assumes malicious owner</li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/59#issuecomment-886763561\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with sponsor. Assuming malicious behavior of owner is low risk if it’s a governance and timelock is used. Low risk.</p>\n</blockquote>\n<h2 id=\"l-19-enabling-preventsmartcontracts-may-lead-to-lockloss-of-funds\" style=\"position:relative;\"><a href=\"#l-19-enabling-preventsmartcontracts-may-lead-to-lockloss-of-funds\" aria-label=\"l 19 enabling preventsmartcontracts may lead to lockloss of funds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/54\">[L-19] Enabling <code>preventSmartContracts</code> may lead to lock/loss of funds</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p><code>preventSmartContracts</code> is initialized to false, which allows users to deposit/withdraw funds from the protocol via (custom) smart contracts because the <code>eoaOnly</code> check during deposits/withdrawals always succeeds. However, if protocol owner decides to suddenly enable <code>preventSmartContracts</code>, then smart contracts are prevented from interaction unless they are exempted in safe addresses.</p>\n<p>The lack of an event in <code>switchEoaOnly()</code> to inform off-chain monitors <code>/interfaces</code> about the enabling/disabling, say from false -> true, and lack of a time-delayed enforcement of this prevention of contracts from depositing/withdrawing, causes users who have previously deposited via smart contracts (that are not <code>safeAddresses</code>) to get locked out of withdrawals leading to fund lock/loss.</p>\n<p><strong>Scenario:</strong> User deposits funds via smart contract (not in safe address list) when <code>preventSmartContracts</code>=false. Protocol owner sets <code>preventSmartContracts</code>=true. User’s funds are locked/lost in protocol. See issue page for affected code.</p>\n<p>Recommend adding event + time-delayed enforcement to <code>switchEoaOnly()</code> so users can monitor and withdraw funds deposited via smart contracts.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/54#issuecomment-880037673\">kristian-gro (Gro) disputed</a>:</strong></p>\n<blockquote>\n<p>Low criticality/Not an issue - Workaround exists (safe addresses)</p>\n<ul>\n<li>Owner will be a timelock</li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/54#issuecomment-886808758\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with sponsor. While the scenario is correct, it all comes down to the management of the protocol. From different context I also assume that this option will be set to true for beta and safe addresses will be whitelisted. I’m making this a low risk because this can create too many angry users to be non-critical.</p>\n</blockquote>\n<h2 id=\"l-20-unauthorized-rebalancetrigger-calls-may-allow-one-to-exploit-arbitrage-opportunity-and-put-system-at-risk\" style=\"position:relative;\"><a href=\"#l-20-unauthorized-rebalancetrigger-calls-may-allow-one-to-exploit-arbitrage-opportunity-and-put-system-at-risk\" aria-label=\"l 20 unauthorized rebalancetrigger calls may allow one to exploit arbitrage opportunity and put system at risk permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/66\">[L-20] Unauthorized <code>rebalanceTrigger</code> calls may allow one to exploit arbitrage opportunity and put system at risk</a></h2>\n<p><em>Submitted by 0xRajeev</em></p>\n<p>The need for an externally visible <code>rebalanceTrigger()</code> (when <code>rebalance()</code> does that check itself) is apparently that the whitelisted bot checks trigger before calling the very expensive/security-sensitive <code>rebalance()</code> operation which again checks to see if anything has changed between then and the previous trigger.</p>\n<p>Exposing the rebalance trigger check externally for convenience may offer a front-running arbitrage opportunity to a non-whitelisted, i.e. any, bot which can check when a rebalance will be triggered by a whitelisted bot and then using that information to arbitrage on underlying stablecoins/strategies, which may affect system exposure.</p>\n<p>Discussion with the project team reported that this is technically possible, but only within the BP limit (25-50) of the current vs cached price (where the <code>BASIS_POINTS</code> is currently set to 20). If not, the <code>Buoy safetyCheck</code> will fail. See <code>Insurance.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L187-L196\">#L187-L196</a> and <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L198-L215\">#L198-L215</a>. Also <code>Buoy3Pool.sol</code> <a href=\"https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/pools/oracle/Buoy3Pool.sol#L30\">#L30</a>.</p>\n<p>Recommend adding <code>onlyWhitelist</code> modifier to <code>rebalanceTrigger()</code>, which allows retaining the convenience of (only whitelisted) bots checking before calling rebalance. This makes it only a little safer because one can always front-run the actual rebalance call. This will only force bots to monitor <code>mempool</code> for rebalances instead of arbing ahead of time. Revisit this aspect for any missed considerations.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/66#issuecomment-880032387\">kristian-gro (Gro) acknowleged and disagreed</a>:</strong></p>\n<blockquote>\n<p>There is price check before rebalance. It is not very useful to add whitelist on view function. Because the code is public, anyone can implement a local function easily.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/66#issuecomment-886818713\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Solution proposed by warden does not solve the problem but the problem still remains valid. The issue looks quite generic and it’s really a MEV problem that most protocols have. For that reason, I think it’s reasonable to degrade to low risk.</p>\n</blockquote>\n<h2 id=\"l-21-rational-actors-will-just-set-themselves-as-referral\" style=\"position:relative;\"><a href=\"#l-21-rational-actors-will-just-set-themselves-as-referral\" aria-label=\"l 21 rational actors will just set themselves as referral permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/108\">[L-21] Rational actors will just set themselves as referral</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>When depositing, a referral can be chosen and the only check is:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">account</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">referral</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">referrals</span><span class=\"mtk1\">[</span><span class=\"mtk12\">account</span><span class=\"mtk1\">] == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>This means that users can refer themselves. It’s not immediately clear from the contracts that are part of this repo, what the referrals are used for. If they are used for anything, rational actors will always refer themselves to maximize profits making the referral system useless.</p>\n<p>Recommend whitelisting big influencers that are allowed to be used as referrals to avoid everyone referring themselves or another account they control.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/108#issuecomment-879989426\">kristian-gro (Gro) disputed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>not an issue/non-critical\nMakes no difference, referrals are calculated offchain and not used for anything on chain</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/108#issuecomment-886820331\">ghoul-sol (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Even if this is calculated off-chain, technically being able to refer ourselves is an issue. Even offchain this needs to be filtered out which is extra work. I’m keeping this as low risk.</p>\n</blockquote>\n<h1 id=\"non-critical-findings-31\" style=\"position:relative;\"><a href=\"#non-critical-findings-31\" aria-label=\"non critical findings 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (31)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/8\">[N-01] hardcoded values</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/9\">[N-02] implicit assumptions about underlying coins</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/10\">[N-03] <code>setFeeToken</code> doesn’t check index</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/12\">[N-04] redundant check of array length</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/13\">[N-05] Outdated comment at <code>calculateWithdrawalAmountsOnPartVaults</code> </a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/14\">[N-06] require comments don’t all follow convention</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/17\">[N-07] Easier way to determine <code>strategiesLength</code> </a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/23\">[N-08] BASIS_POINTS naming convention</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/71\">[N-09] Unused code</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/58\">[N-10] Incorrect error strings used may cause confusion</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/74\">[N-11] <code>updateStrategiesDebtRatio</code> function and <code>LogNewDebtRatios</code> event</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/80\">[N-12] <code>setBigFishThreshold</code> above 100%</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/83\">[N-13] Inconsistent usage of exponentiation for constants</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/88\">[N-14] event <code>LogTransfer</code> is only emitted in function transfer</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/45\">[N-15] Missing input validation on <code>_feeToken</code> in <code>DepositHandler</code> constructor and <code>setFeeToken()</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/57\">[N-16] Emergency disabling can only be done one stablecoin at a time</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/60\">[N-17] Whitelist addition/removal is done unconditionally</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/78\">[N-18] withdrawal fee may be set above 100% or frontrunned</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/87\">[N-19] <code>burnAll</code> should check that factor > 0 and amount > 0</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/95\">[N-20] Loss of precision</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/96\">[N-21] Hardcoded 99 as deadcoin</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/97\">[N-22] Wrong min amount check in <code>withdrawByStablecoin</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/101\">[N-23] <code>Exposure.sortVaultsByDelta</code> does not work for N_COINS != 3</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/110\">[N-24] <code>strategiesLength</code> should not be allowed to exceed MAX_STRATS</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/110\">[N-25] <code>strategiesLength</code> should not be allowed to exceed MAX_STRATS</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/117\">[N-26] Unlocked pragma used in multiple contracts</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/120\">[N-27] Add a proper revert message in <code>_withdrawSingle</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/46\">[N-28] Single-step process for critical ownership transfer is risky</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/49\">[N-29] Missing zero-address check and event parameter for <code>_emergencyHandler</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/55\">[N-30] Critical protocol parameter changes should have time-delayed enforcement</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/56\">[N-31] Critical protocol parameter configuration/changes should have sanity/threshold checks</a></li>\n</ul>\n<h1 id=\"gas-optimizations-24\" style=\"position:relative;\"><a href=\"#gas-optimizations-24\" aria-label=\"gas optimizations 24 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (24)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/32\">[G-01] Simplifying logic will save at least 4200-11,500 gas in deposit flow</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/18\">[G-02] Unnecessary update of amount </a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/20\">[G-03] <code>calcProtocolExposureDelta</code> could use a break</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/24\">[G-04] optimization uses extra gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/27\">[G-05] Unnecessary duplication of array</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/28\">[G-06] Upgrading the solc compiler to >=0.8 may save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/29\">[G-07] Avoid use of state variables in event emissions to save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/30\">[G-08] Using access lists can save gas due to EIP-2930 post-Berlin hard fork</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/31\">[G-09] Caching repeatedly read state variables in local variables can save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/33\">[G-10] Rearranging order of state variable declarations to pack them will save storage slots and gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/34\">[G-11] Removing unnecessary initializations can save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/35\">[G-12] Unnecessary zero-address check</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/36\">[G-13] Moving logic to where required will save >=6800 gas on deposit/withdraw flows</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/37\">[G-14] Changing function visibility from public to external/internal/private can save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/38\">[G-15] Removing unnecessary check can save gas in withdraw flow</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/41\">[G-16] Removing unused return values can save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/42\">[G-17] Removing redundant code can save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/43\">[G-18] Removing unnecessary <code>lpToken.balanceOf</code> can save 4700+ gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/44\">[G-19] Simpler logic can save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/82\">[G-20] Return False early in <code>isValidBigFish</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/84\">[G-21] Two <code>SafeApprove</code> calls when it could be just one</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/91\">[G-22] <code>RebasingGToken</code> emits same events on transfer</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/102\">[G-23] <code>Allocaiton.calcProtocolExposureDelta</code> gas optimization</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-06-gro-findings/issues/116\">[G-24] function withdrawToAdapter should be included in the interface and return withdrawal amount</a></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk14 { color: #F44747; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-4\">High Risk Findings (4)</a></p>\n<ul>\n<li><a href=\"#h-01-implicit-underflows\">[H-01] implicit underflows</a></li>\n<li><a href=\"#h-02-buoy3poolsafetycheck-is-not-precise-and-has-some-assumptions\">[H-02] <code>Buoy3Pool.safetyCheck</code> is not precise and has some assumptions</a></li>\n<li><a href=\"#h-03-incorrect-use-of-operator-leads-to-arbitrary-minting-of-gvt-tokens\">[H-03] Incorrect use of operator leads to arbitrary minting of GVT tokens</a></li>\n<li><a href=\"#h-04-sortvaultsbydelta-doesnt-work-as-expected\">[H-04] <code>sortVaultsByDelta</code> doesn’t work as expected</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-6\">Medium Risk Findings (6)</a></p>\n<ul>\n<li><a href=\"#m-01-usage-of-deprecated-chainlink-api-in-buoy3pool\">[M-01] Usage of deprecated ChainLink API in <code>Buoy3Pool</code></a></li>\n<li><a href=\"#m-02-safe-addresses-can-only-be-added-but-not-removed\">[M-02] Safe addresses can only be added but not removed</a></li>\n<li><a href=\"#m-03-basevaultadaptor-assumes-shareprice-is-always-in-underlying-decimals\">[M-03] <code>BaseVaultAdaptor</code> assumes <code>sharePrice</code> is always in underlying decimals</a></li>\n<li><a href=\"#m-04-flash-loan-risk-mitigation-is-optional-and-not-robust-enough\">[M-04] Flash loan risk mitigation is optional and not robust enough</a></li>\n<li><a href=\"#m-05-use-of-deprecated-chainlink-function-latestanswer\">[M-05] Use of deprecated Chainlink function <code>latestAnswer</code></a></li>\n<li><a href=\"#m-06-early-user-can-break-minting\">[M-06] Early user can break minting</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-findings\">Low Risk Findings</a></p>\n<ul>\n<li><a href=\"#l-01-emergencyhandler-not-checked--not-emitted\">[L-01] <code>emergencyHandler</code> not checked &#x26; not emitted</a></li>\n<li><a href=\"#l-02-lastratio-of-buoy3pool-is-not-initialized\">[L-02] <code>lastRatio</code> of <code>Buoy3Pool</code> is not initialized</a></li>\n<li><a href=\"#l-03-buoy3pool_updateratios-unsafe-math\">[L-03] <code>Buoy3Pool._updateRatios</code> unsafe math</a></li>\n<li><a href=\"#l-04-setunderlyingtokenpercent-should-check-percentages\">[L-04] <code>setUnderlyingTokenPercent</code> should check percentages</a></li>\n<li><a href=\"#l-05-initialize-maxpercentforwithdraw-and-maxpercentfordeposit\">[L-05] initialize <code>maxPercentForWithdraw</code> and <code>maxPercentForDeposit</code>?</a></li>\n<li><a href=\"#l-06-use-safemath\">[L-06] use <code>safemath</code></a></li>\n<li><a href=\"#l-07-missing-emits-for-declared-events\">[L-07] Missing emits for declared events</a></li>\n<li><a href=\"#l-08-having-only-owner-unpauserestart-is-risky\">[L-08] Having only owner unpause/restart is risky</a></li>\n<li><a href=\"#l-09-uninitialized-vaultsaddresses-will-lead-to-reverts\">[L-09] Uninitialized vaults/addresses will lead to reverts</a></li>\n<li><a href=\"#l-10-the-use-of-txorigin-for-smart-contract-safe-list-is-risky-and-not-generic\">[L-10] The use of <code>tx.origin</code> for smart contract safe list is risky and not generic</a></li>\n<li><a href=\"#l-11-missing-parameter-validation\">[L-11] Missing parameter validation</a></li>\n<li><a href=\"#l-12-stricter-than-needed-inequalities-may-affect-borderline-scenarios\">[L-12] Stricter than needed inequalities may affect borderline scenarios</a></li>\n<li><a href=\"#l-13-totalassets--withdrawelusd-should-be-inclusive\">[L-13] <code>totalAssets</code> > <code>withdrawelUsd</code> should be inclusive</a></li>\n<li><a href=\"#l-14-use-of-uninitialized-value-and-unclearunused-logic\">[L-14] Use of uninitialized value and unclear/unused logic</a></li>\n<li><a href=\"#l-15-decimals-of-fixedstablecoins\">[L-15] decimals of <code>FixedStablecoins</code></a></li>\n<li><a href=\"#l-16-more-accurate-calculation-of-return-usd-of-withdrawsinglebyliquidity\">[L-16] More accurate calculation of return USD of <code>withdrawSingleByLiquidity</code></a></li>\n<li><a href=\"#l-17-use-of-txorigin-for-authentication\">[L-17] Use of <code>tx.origin</code> for authentication</a></li>\n<li><a href=\"#l-18-vault-assets-can-be-migrated-to-an-arbitrary-address-at-anytime-by-owner\">[L-18] Vault assets can be migrated to an arbitrary address at anytime by owner</a></li>\n<li><a href=\"#l-19-enabling-preventsmartcontracts-may-lead-to-lockloss-of-funds\">[L-19] Enabling <code>preventSmartContracts</code> may lead to lock/loss of funds</a></li>\n<li><a href=\"#l-20-unauthorized-rebalancetrigger-calls-may-allow-one-to-exploit-arbitrage-opportunity-and-put-system-at-risk\">[L-20] Unauthorized <code>rebalanceTrigger</code> calls may allow one to exploit arbitrage opportunity and put system at risk</a></li>\n<li><a href=\"#l-21-rational-actors-will-just-set-themselves-as-referral\">[L-21] Rational actors will just set themselves as referral</a></li>\n</ul>\n</li>\n<li><a href=\"#non-critical-findings-31\">Non-Critical Findings (31)</a></li>\n<li><a href=\"#gas-optimizations-24\">Gas Optimizations (24)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of of the Gro Protocol smart contract system written in Solidity. The code contest took place between June 30 — July 7, 2021.\n\n## Wardens\n\n7 Wardens contributed reports to the Gro code contest:\n\n- [cmichel](https://twitter.com/cmichelio)\n- [0xRajeev](https://twitter.com/0xRajeev)\n- [gpersoon](https://twitter.com/gpersoon)\n- [shw](https://github.com/x9453)\n- [pauliax](https://twitter.com/SolidityDev)\n- [a_delamo](https://twitter.com/a_delamo)\n- [GalloDaSballo](https://twitter.com/gallodasballo)\n\nThis contest was judged by [ghoul.sol](https://twitter.com/ghoulsol).\n\nFinal report assembled by [moneylegobatman](https://twitter.com/money_lego) and [ninek](https://twitter.com/_ninek_).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 31 unique vulnerabilities. All of the issues presented here are linked back to their original finding\n\nOf these vulnerabilities, 4 received a risk rating in the category of HIGH severity, 6 received a risk rating in the category of MEDIUM severity, and 21 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 54 non-critical recommendations.\n\n# Scope\n\nThe code under review can be found within the [C4 Gro Protocol code contest repository](https://github.com/code-423n4/2021-06-gro) is comprised of 61 smart contracts written in the Solidity programming language.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (4)\n\n## [[H-01] implicit underflows](https://github.com/code-423n4/2021-06-gro-findings/issues/6)\n_Submitted by gpersoon, also found by cmichel_\n\nThere are a few underflows that are converted via a typecast afterwards to the expected value. If solidity 0.8.x would be used, then the code would revert.\n* `int256(a-b)` where a and b are uint: For example, if `a=1` and `b=2`, then the intermediate result would be `uint(-1) == 2**256-1`\n* `int256(-x)` where x is a uint. For example, if `x=1`, then the intermediate result would be `uint(-1) == 2**256-1`\n\nIt's better not to have underflows by using the appropriate typecasts. This is especially relevant when moving to solidity 0.8.x.\n\nFrom `Exposure.sol` [L178](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Exposure.sol#L178):\n```solidity\nfunction sortVaultsByDelta(..)\n..\n    for (uint256 i = 0; i < N_COINS; i++) {\n        // Get difference between vault current assets and vault target\n        int256 delta = int256(unifiedAssets[i] - unifiedTotalAssets.mul(targetPercents[i]).div(PERCENTAGE_DECIMAL_FACTOR)); // underflow in intermediate result\n```\n\nFrom `PnL.sol` [L112](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pnl/PnL.sol#L112):\n```solidity\n function decreaseGTokenLastAmount(bool pwrd, uint256 dollarAmount, uint256 bonus)...\n..\n emit LogNewGtokenChange(pwrd, int256(-dollarAmount)); // underflow in intermediate result\n```\n\nFrom `Buoy3Pool.sol` [L87](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L87):\n```solidity\nfunction safetyCheck() external view override returns (bool) {\n    ...\n        _ratio = abs(int256(_ratio - lastRatio[i])); // underflow in intermediate result\n```\n\nRecommend replacing `int256(a-b)` with `int256(a)-int256(b)`, and replacing `int256(-x)` with `-int256(x)`\n\n**[kristian-gro (Gro) confirmed but disagreed with severity](https://github.com/code-423n4/2021-06-gro-findings/issues/6#issuecomment-886260551):**\n> Confirmed and We've mitigated this issue in our release version.\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/6#issuecomment-886260551):**\n > Majority of overflow listed above seems low risk with one exception of `safetyCheck`. Underflow is a real risk here.`safetyCheck` is run every time a deposit is made. Ratios can change and the change does not need to be substantial for it to overflow. For that reason it's a high risk.\n\n\n## [[H-02] `Buoy3Pool.safetyCheck` is not precise and has some assumptions](https://github.com/code-423n4/2021-06-gro-findings/issues/104)\n_Submitted by cmichel, also found by shw_\n\nThe `safetyCheck` function has several issues that impact how precise the checks are:\n\n1. Only checks if the `a/b` and `a/c` ratios are within `BASIS_POINTS`.\nBy transitivity, `b/c` is only within `2 * BASIS_POINTS` if `a/b` and `a/c` are in range.\nFor a more precise check whether both USDC and USDT are within range, `b/c` must be checked as well.\n\n2. If `a/b` is within range, this does not imply that `b/a` is within range.\n* > \"inverted ratios, a/b bs b/a, while producing different results should both reflect the same change in any one of the two underlying assets, but in opposite directions\"\n\n* Example: `lastRatio = 1.0`\n`ratio: a = 1.0, b = 0.8` => `a/b = 1.25`, `b/a = 0.8`\nIf `a/b` was used with a 20% range, it'd be out of range, but `b/a` is in range.\n\n3. The NatSpec for the function states that it checks Curve and an external oracle, but no external oracle calls are checked, both `_ratio` and `lastRatio` are only from Curve. Only `_updateRatios` checks the oracle.\n\nTo address this issue, it is recommended to check if `b/c` is within `BASIS_POINTS` .\n\n**[kristian-gro (Gro) confirmed but disagreed with severity](https://github.com/code-423n4/2021-06-gro-findings/issues/104#issuecomment-880192089):**\n > Makes strong assumption about the range of possible values - small differences between a and b will result in small differences between a/b and b/a - Extreme cases are handled by emergency. Agree on b/c check\n\n**[kristian-gro (Gro) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/104#issuecomment-880192847):**\n > medium severity - will only cause stop of deposits/withdrawals against curve, work around to put in emergency mode\n\n**kristian-gro (Gro) commented:**\n> Acknowledged, but the differences between variables are in basis points, we've simulated flash loan manipulations of curve and come to the conclusion that this approximation has a sufficiently small error margin to not cause issues.\n> The B/C check (usdc/usdt) has been added in release version.\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/104#issuecomment-886346641):**\n > A possibility of stopping deposits or withdrawals deserves high risk.\n\n## [[H-03] Incorrect use of operator leads to arbitrary minting of GVT tokens](https://github.com/code-423n4/2021-06-gro-findings/issues/69)\n_Submitted by 0xRajeev, also found by pauliax and gpersoon_\n\nThe `distributeStrategyGainLoss()` function distributes any gains or losses generated from a harvest and is expected to be called only by valid protocol vault adaptors. It is an externally visible function and the access control is indirectly enforced on `msg.sender` by checking that `vaultIndexes[msg.sender]` is a valid index range 1-4. However, the operator used in the `require()` is `||` instead of `&&`, which allows an arbitrary `msg.sender`, i.e. attacker, to bypass the check.\n\n**Scenario**: An arbitrary non-vault address calling this function will get an index of 0 because of default mapping value in `vaultIndexes[msg.sender]`, which will fail the `> 0` check, but pass the `<= N_COINS + 1` check (`N_COINS = 3`) because `0 <= 4` which will allow control to go past this check.\n\nFurthermore, on L362, `index=0` will underflow the -1 decrement (due to lack of `SafeMath.sub` and use of < 0.8.0 solc) and the index will be set to `(uint256_MAX - 1)`. This will allow execution to proceed to the \"else\" part of conditional meant for curve LP vault. Therefore, this will allow any random address to call this function with arbitrary values of gain/loss and distribute arbitrary gain/loss appearing to come from Curve vault.\n\nThe attack control flow:\n* -> `Controller.distributeStrategyGainLoss(ARBITRARY_HIGH_VALUE_OF_GAIN, 0)`\n* -> `index = 0` passes check for the `index <= N_COINS + 1` part of predicate on L357 in `Controller.sol`\n* -> `index = uint256_MAX` after L362\n* -> `gainUsd = ibuoy.lpToUsd(ARBITRARY_HIGH_VALUE_OF_GAIN);` on L371 in `Controller.sol`\n* -> `ipnl.distributeStrategyGainLoss(gainUsd, lossUsd, reward);` on L376 in `Controller.sol`\n* -> `(gvtAssets, pwrdAssets, performanceBonus) = handleInvestGain(lastGA, lastPA, gain, reward);` on L254 in `PnL.sol`\n* -> `performanceBonus = profit.mul(performanceFee).div(PERCENTAGE_DECIMAL_FACTOR);` on L186 of `PnL.sol`\n* ->  `gvt.mint(reward, gvt.factor(gvtAssets), performanceBonus);` on L256 in `PnL.sol`\n\n\nRecommend changing `||` to `&&` in `require()` on L357 of `Controller.sol` to prevent arbitrary addresses from going past this check. Or, consider exercising explicit access control for the authorized vault adaptors.\n\n**[kristian-gro (Gro) confirmed](https://github.com/code-423n4/2021-06-gro-findings/issues/69)**\n> Confirmed and Fix has been implemented in release version.\n\n## [[H-04] `sortVaultsByDelta` doesn't work as expected](https://github.com/code-423n4/2021-06-gro-findings/issues/2)\n_Submitted by gpersoon, also found by shw_\n\nThe function `sortVaultsByDelta` doesn't always work as expected.\n\nSuppose all the delta's are positive, and delta1 >= delta2 >= delta3 > 0. Then `maxIndex = 0`. And `(delta < minDelta (==0) )` is never true, so `minIndex = 0`.\n\nThen (assuming `bigFirst==true`):\n\n```solidity\nvaultIndexes[0] = maxIndex = 0\nvaultIndexes[2] = minIndex = 0\nvaultIndexes[1] = N_COINS - maxIndex - minIndex = 3-0-0 = 3\n```\n\nThis is clearly not what is wanted, all `vaultIndexes` should be different and should be in the range [0..2]. This is due to the fact that `maxDelta` and `minDelta` are initialized with the value 0. This all could results in withdrawing from the wrong vaults and reverts (because `vaultIndexes`[1]  is out of range).\n\n`Exposure.sol` [L178](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Exposure.sol#L178):\n```solidity\nfunction sortVaultsByDelta(bool bigFirst,uint256 unifiedTotalAssets,uint256[N_COINS] calldata unifiedAssets,uint256[N_COINS] calldata targetPercents) external pure override returns (uint256[N_COINS] memory vaultIndexes) {\n        uint256 maxIndex;\n        uint256 minIndex;\n        int256 maxDelta;\n        int256 minDelta;\n        for (uint256 i = 0; i < N_COINS; i++) {\n            // Get difference between vault current assets and vault target\n            int256 delta = int256(\n                unifiedAssets[i] - unifiedTotalAssets.mul(targetPercents[i]).div(PERCENTAGE_DECIMAL_FACTOR)\n            );\n            // Establish order\n            if (delta > maxDelta) {\n                maxDelta = delta;\n                maxIndex = i;\n            } else if (delta < minDelta) {\n                minDelta = delta;\n                minIndex = i;\n            }\n        }\n        if (bigFirst) {\n            vaultIndexes[0] = maxIndex;\n            vaultIndexes[2] = minIndex;\n        } else {\n            vaultIndexes[0] = minIndex;\n            vaultIndexes[2] = maxIndex;\n        }\n        vaultIndexes[1] = N_COINS - maxIndex - minIndex;\n    }\n```\n\nRecommend the following\n1. Initializing `maxDelta` and `minDelta`:\n```solidity\n        int256 maxDelta = -2**255; // or type(int256).min when using a newer solidity version\n        int256 minDelta  = 2**255; // or type(int256).max when using a newer solidity version\n```\n2. Check that `maxIndex` and `minIndex` are not the same\n3. require (`maxIndex` != `minIndex`);\n\n**kristian-gro (Gro) confirmed:**\n> Confirmed and Fix has been implemented in release version.\n\n# Medium Risk Findings (6)\n\n## [[M-01] Usage of deprecated ChainLink API in `Buoy3Pool`](https://github.com/code-423n4/2021-06-gro-findings/issues/106)\n_Submitted by cmichel, also found by 0xRajeev and a_delamo_\n\nThe Chainlink API (`latestAnswer`) used in the `Buoy3Pool` oracle wrappers is deprecated:\n\n> This API is deprecated. Please see API Reference for the latest Price Feed API. [Chainlink Docs](https://docs.chain.link/docs/deprecated-aggregatorinterface-api-reference/#latestanswer)\n\nIt seems like the old API can return stale data. Checks similar to that of the new API using `latestTimestamp` and `latestRoundare` are needed, as this could lead to stale prices according to the Chainlink documentation:\n* [under current notifications: \"if answeredInRound < roundId could indicate stale data.\"](https://docs.chain.link/docs/developer-communications#current-notifications)\n* [under historical price data: \"A timestamp with zero value means the round is not complete and should not be used.\"](https://docs.chain.link/docs/historical-price-data#solidity)\n\nRecommend adding checks similar to `latestTimestamp` and `latestRoundare`\n\n```solidity\n(\n    uint80 roundID,\n    int256 price,\n    ,\n    uint256 timeStamp,\n    uint80 answeredInRound\n) = chainlink.latestRoundData();\nrequire(\n    timeStamp != 0,\n    “ChainlinkOracle::getLatestAnswer: round is not complete”\n);\nrequire(\n    answeredInRound >= roundID,\n    “ChainlinkOracle::getLatestAnswer: stale data”\n);\nrequire(price != 0, \"Chainlink Malfunction”);\n```\n\n**[kristian-gro (Gro) confirmed](https://github.com/code-423n4/2021-06-gro-findings/issues/106)**\n> Confirmed and Fix has been implemented in release version.\n\n## [[M-02] Safe addresses can only be added but not removed](https://github.com/code-423n4/2021-06-gro-findings/issues/51)\n_Submitted by 0xRajeev, also found by pauliax_\n\n\nThe `addSafeAddress()`  takes an address and adds it to a “safe list\". This is used in `eoaOnly()` to give exemption to safe addresses that are trusted smart contracts, when all other smart contacts are prevented from protocol interaction. The stated purpose is to allow only such partner/trusted smart contract integrations (project rep mentioned Argent wallet as the only one for now but that may change) an exemption from potential flash loan threats. But if there is a safe listed integration that needs to be later disabled, it cannot be done. The protocol will have to rely on other measures (outside the scope of this contest) to prevent flash loan manipulations which are specified as an area of critical concern.\n\n**Scenario:** A trusted integration/partner address is added to the safe list. But that wallet/protocol/DApp is later manipulated (by the project, its users or an attacker) to somehow launch a flash loan attack on the protocol. However, its address cannot be removed from the safe list and the protocol cannot prevent flash loan manipulations from that source because of its exemption. Contract/project will have to be redeployed.\n\nRecommend changing `addSafeAddress()` to `isSafeAddress()` with an additional bool parameter to allow both the enabling _AND_ disabling of safe addresses.\n\n**[kristian-gro (Gro) confirmed but disagreed with severity](https://github.com/code-423n4/2021-06-gro-findings/issues/51#issuecomment-880043980):**\n> low risk - Made specifically for one partner in beta period, and planned to be removed. We added the removal function for sanity.\n> \n> Confirmed and Fix has been implemented in release version.\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/51#issuecomment-886327301):**\n > I'll keep medium risk because this could put the protocol into a one way street and not being able to remove safe addresses is quite dangerous. Medium risk.\n\n## [[M-03] `BaseVaultAdaptor` assumes `sharePrice` is always in underlying decimals](https://github.com/code-423n4/2021-06-gro-findings/issues/114)\n_Submitted by cmichel_\n\nThe two `BaseVaultAdaptor.calculateShare` functions compute `share = amount.mul(uint256(10)**decimals).div(sharePrice)`\n\n```solidity\nuint256 sharePrice = _getVaultSharePrice();\n// amount is in \"token\" decimals, share should be in \"vault\" decimals\nshare = amount.mul(uint256(10)**decimals).div(sharePrice);\n```\n\nThis assumes that the `sharePrice` is always in _token_ decimals and that _token_ decimals is the same as _vault_ decimals.\n\nBoth these assumptions happen to be correct for Yearn vaults, but that will not necessarily be the case for other protocols.\nAs this functionality is in the `BaseVaultAdaptor`, and not in the specific `VaultAdaptorYearnV2_032`, consider generalizing the conversion.\n\nIntegrating a token where the token or price is reported in a different precision will lead to potential losses as more shares are computed.\n\nBecause the conversion seems highly protocol-specific, it is recommended that `calculateShare` should be an abstract function (like `_getVaultSharePrice`) that is implemented in the specific adaptors.\n\n**- [kristian-gro (Gro) confirmed](https://github.com/code-423n4/2021-06-gro-findings/issues/114)**\n> Confirmed and shares have been removed from release version.\n\n## [[M-04] Flash loan risk mitigation is optional and not robust enough](https://github.com/code-423n4/2021-06-gro-findings/issues/52)\n_Submitted by 0xRajeev_\n\nThe `switchEoaOnly()` allows the owner to disable `preventSmartContracts` (the project’s plan apparently is to do so after the beta-period) which will allow any smart contract to interact with the protocol and potentially exploit any underlying flash loan vulnerabilities which are specified as an area of critical concern.\n\nThe current mitigation is to optionally prevent contracts, except whitelisted partner ones, from interacting with the protocol to prevent any flash loan manipulations. A more robust approach would be to add logic preventing multiple txs to the protocol from the same address/`tx.origin` within the same block when smart contracts are allowed. This will avoid any reliance on trust with integrating partners/protocols.\n\nRecommend adding logic that prevents multiple txs to the protocol from the same address and within the same block.\n\n**[kristian-gro (Gro) acknowledged but disagreed with severity](https://github.com/code-423n4/2021-06-gro-findings/issues/52#issuecomment-880041099):**\n> Low-severity: This is a temporary blocker to not let SCs interact with gro-protocol, planned to be removed after beta as it might potentially stop other integrations (as per issue 51)\n> \n> Acknowledged, this is just a temporary block, and is planned to be removed in future releases - other protection exists to protect the system from flash loan manipulations.\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/52#issuecomment-886701698):**\n > It looks like a low risk issue since it's a future problem and not something that is an immediate issue, however, it's not clear how the protocol will protect itself against flash loans after this temporary blocker is off. One of the critical protocol's concerns are flash loans manipulations therefore I think medium risk is justified here.\n\n\n## [[M-05] Use of deprecated Chainlink function `latestAnswer`](https://github.com/code-423n4/2021-06-gro-findings/issues/126)\n_Submitted by shw_\n\nAccording to Chainlink's documentation ([Deprecated API Reference](https://docs.chain.link/docs/deprecated-aggregatorinterface-api-reference/), [Migration Instructions](https://docs.chain.link/docs/migrating-to-flux-aggregator/#3-use-the-new-functions), and [API Reference](https://docs.chain.link/docs/price-feeds-api-reference/)), the `latestAnswer` function is deprecated. This function does not throw an error if no answer has been reached, but instead returns 0, causing an incorrect price to be fed to the `Buoy3Pool`. See `Buoy3Pool.sol` [L207](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L207) and\n[L214-L216](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L214-L216).\n\nRecommend using the `latestRoundData` function to get the price instead. Also recommend adding checks on the return data with proper revert messages if the price is stale or the round is incomplete, for example:\n\n```solidity\n(uint80 roundID, int256 price, , uint256 timeStamp, uint80 answeredInRound) = oracle.latestRoundData();\nrequire(answeredInRound >= roundID, \"...\");\nrequire(timeStamp != 0, \"...\");\n```\n\n**[kristian-gro (Gro) disagreed with severity](https://github.com/code-423n4/2021-06-gro-findings/issues/126#issuecomment-879972199):**\n> disagree with severity (Low risk)\n> Issue would cause deposits and withdrawals to stop, no funds lost\n\n**kristian-gro (Gro) confirmed:**\n> Confirmed and shares have been removed from release version.\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/126#issuecomment-886824919):**\n > In my opinion halting the protocol deserves medium risk. While no funds are lost, from brand perspective it's a second worst thing. Keeping as medium risk.\n\n## [[M-06] Early user can break minting](https://github.com/code-423n4/2021-06-gro-findings/issues/107)\n_Submitted by cmichel_\n\nThe protocol computes a `factor` when minting (and burning) tokens, which is the exchange rate of rebase to base tokens (base supply / total assets value), see `GToken.factor()`.\nThe first user can manipulate this factor such that it always returns `0`.\n\n**Example:**\n- Attacker deposits 100.0 DAI and mints 100 * 1e18 PWRD: `DepositHandler.depositGToken` with `dollarAmount = 100.0 = 100 * 1e18`, then `ctrl.mintGToken(pwrd, msg.sender, 1e18)`\ncalls `gt.mint(account, gt.factor(), amount=1e18)` where `gt.factor()` returns `getInitialBase() = 1e18` because the person is the first minter and it mints `amount * factor / _BASE = 1e18`\n- The `ctrl.mintGToken` call also increases total assets: `pnl.increaseGTokenLastAmount(...)`\n- The attacker now burns (withdraws) all minted tokens again **except a single wei** using one of the withdrawal functions in `WithdrawHandler`. Because of the withdrawal fee the total assets are only decreased by the post-fee amount (`IPnL(pnl).decreaseGTokenLastAmount(pwrd, amount=userBalance - 1, bonus=fee);`), i.e., with a 2% withdrawal fee the total assets stay at 2% of 100\\$ = 2 * 1e18.\n- The result is that `GToken.factor()` always returns `totalSupplyBase().mul(BASE).div(totalAssets) = 1 * 1e18 / (2 * 1e18) = 0`\n\nThe resulting `factor` is 0 and thus any user-deposits by `depositGToken` will mint 0 base tokens to the depositor.\nThis means all deposits and future value accrues to the attacker who holds the only base tokens.\n\nAn attacker could even front-run the first minter to steal their deposit this way.\n\nUniswap solves a similar problem by sending the first 1000 tokens to the zero address which makes the attack 1000x more expensive. The same should work here, i.e., on first mint (`total base supply == 0`), lock some of the first minter's tokens by minting ~1% of the initial amount to the zero address instead of to the first minter.\n\n**[kristian-gro (Gro) acknowledged but disagreed with severity](https://github.com/code-423n4/2021-06-gro-findings/issues/107#issuecomment-879991211):**\n > Known issue which will be handled by ops - low risk as gro protocol is the first depositor\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/107#issuecomment-886829344):**\n > Even though it's a known issue its consequences are significant. Only because it can be mitigated by ops quite easily, I'll degrade it to medium level.\n\n# Low Risk Findings\n\n## [[L-01] `emergencyHandler` not checked & not emitted](https://github.com/code-423n4/2021-06-gro-findings/issues/5)\n_Submitted by gpersoon, also found by shw_\n\nThe function `setWithdrawHandler` allows the setting of `withdrawHandler` and `emergencyHandler`.\nHowever, `emergencyHandler` isn't checked for 0 (like the `withdrawHandler` ). The value of the `emergencyHandler` is also not emitted (like the `withdrawHandler` )\n\n`Controller.sol` [L105](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/Controller.sol#L105):\n```solidity\nfunction setWithdrawHandler(address _withdrawHandler, address _emergencyHandler) external onlyOwner {\n    require(_withdrawHandler != address(0), \"setWithdrawHandler: 0x\");\n    withdrawHandler = _withdrawHandler;\n    emergencyHandler = _emergencyHandler;\n    emit LogNewWithdrawHandler(_withdrawHandler);\n}\n```\n\nRecommend adding something like:\n```solidity\n    require(_emergencyHandler!= address(0), \"setEmergencyHandler: 0x\");\n    event LogNewEmergencyHandler(address tokens);\n    emit LogNewEmergencyHandler(_emergencyHandler);\n```\n\n**- [kristian-gro (Gro) confirmed](https://github.com/code-423n4/2021-06-gro-findings/issues/5)**\n\n## [[L-02] `lastRatio` of `Buoy3Pool` is not initialized](https://github.com/code-423n4/2021-06-gro-findings/issues/7)\n_Submitted by gpersoon_\n\nThe values of `lastRatio` in the contract `Buoy3Pool.sol` are not initialized (thus they have a value of 0).\nIf `safetyCheck()` would be called before the first time `_updateRatios` is called, then `safetyCheck()` would give unexpected results.\n\n`Buoy3Pool.sol` [L25](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L25):\n```solidity\ncontract `Buoy3Pool` is FixedStablecoins, Controllable, IBuoy, IChainPrice {\n...\n    mapping(uint256 => uint256) lastRatio;\n\n function safetyCheck() external view override returns (bool) {\n        for (uint256 i = 1; i < N_COINS; i++) {\n            uint256 _ratio = curvePool.get_dy(int128(0), int128(i), getDecimal(0));\n            _ratio = abs(int256(_ratio - lastRatio[i]));\n            if (_ratio.mul(PERCENTAGE_DECIMAL_FACTOR).div(CURVE_RATIO_DECIMALS_FACTOR) > BASIS_POINTS) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n function _updateRatios(uint256 tolerance) private returns (bool) {\n    ...\n        for (uint256 i = 1; i < N_COINS; i++) {\n            lastRatio[i] = newRatios[i];\n```\n\nRecommend double checking if this situation can occur and perhaps calling `_updateRatios` as soon as possible. Or alternatively, check in `safetyCheck` that the `lastRatio` values are initialized.\n\n**- [kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/7)**\n\n## [[L-03] `Buoy3Pool._updateRatios` unsafe math](https://github.com/code-423n4/2021-06-gro-findings/issues/105)\n_Submitted by cmichel_\n\nThe function performs type conversions and subtraction without over-/underflow checks:\n\n```solidity\nuint256 check = abs(int256(_ratio) - int256(chainRatios[i].div(CHAIN_FACTOR)));\n```\n\nRecommend checking if the values fit within the type range first, otherwise revert with a meaningful error message, as well as checking for underflows.\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/105#issuecomment-886260882):**\n > This is partially a duplicate of #6 but it focuses on low risk issue so I'll record is as a separate (low risk) issue.\n\n## [[L-04] `setUnderlyingTokenPercent` should check percentages](https://github.com/code-423n4/2021-06-gro-findings/issues/11)\n_Submitted by gpersoon, also found by cmichel_\n\nThe function `setUnderlyingTokenPercent` doesn't check that the sum of all the percentages is 100%.\nThis way the percentages could be accidentally set up the wrong way, with unpredictable results. Note that the function can only be called by  controller or the owner so the likelihood of mistakes is pretty low.\n\n`Insurance.sol` [#L100](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Insurance.sol#L100):\n```solidity\nfunction setUnderlyingTokenPercent(uint256 coinIndex, uint256 percent) external override onlyValidIndex(coinIndex) {\n    require(msg.sender == controller || msg.sender == owner(), \"setUnderlyingTokenPercent: !authorized\");\n    underlyingTokensPercents[coinIndex] = percent;\n    emit LogNewTargetAllocation(coinIndex, percent);\n}\n```\n\nRecommend changing `setUnderlyingTokenPercent` to set the percentages for all the coins at the same time.\nAnd check that the sum of the percentages is 100%\n\n## [[L-05] initialize `maxPercentForWithdraw` and `maxPercentForDeposit`?](https://github.com/code-423n4/2021-06-gro-findings/issues/16)\n_Submitted by gpersoon_\n\nThe parameters `maxPercentForWithdraw` and `maxPercentForDeposit`, which are not directly initialized, will work in a suboptimal way If, the functions which rely on these parameters, are called before `setWhaleThresholdWithdraw`/`setWhaleThresholdDeposit`.\n\n`Insurance.sol` [L63](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Insurance.sol#L63):\n```solidity\nuint256 public maxPercentForWithdraw;\nuint256 public maxPercentForDeposit;\n\nfunction setWhaleThresholdWithdraw(uint256 _maxPercentForWithdraw) external onlyOwner {\n    maxPercentForWithdraw = _maxPercentForWithdraw;\n    emit LogNewVaultMax(false, _maxPercentForWithdraw);\n}\nfunction setWhaleThresholdDeposit(uint256 _maxPercentForDeposit) external onlyOwner {\n    maxPercentForDeposit = _maxPercentForDeposit;\n    emit LogNewVaultMax(true, _maxPercentForDeposit);\n}\n```\n\nRecommend assigning a default value to `maxPercentForWithdraw` and `maxPercentForDeposit`. Or alternatively, initializing the values via the constructor.\n\n**[kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/16#issuecomment-880061444):**\n > This is known and values are updated as part of deployment scripts\n\n## [[L-06] use `safemath`](https://github.com/code-423n4/2021-06-gro-findings/issues/22)\n_Submitted by gpersoon_\n\n`Safemath` is used in several places but not everywhere. Especially in risky places like `PnL` and `distributeStrategyGainLoss` where it is hardly worth the gas-savings of not using `safemath`.\n\nIn `distributeStrategyGainLoss` it does make a difference, also due to another issue.\n\n[`PnL.sol` L215](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pnl/PnL.sol#L215):\n```solidity\nfunction handleLoss( uint256 gvtAssets, uint256 pwrdAssets, uint256 loss) private pure returns (uint256, uint256) {\n        uint256 maxGvtLoss = gvtAssets.sub(DEFAULT_DECIMALS_FACTOR);\n        if (loss > maxGvtLoss) {\n          ...\n        } else {\n            gvtAssets = gvtAssets - loss;    // won't underflow but safemath won't hurt\n        }\n\n    function forceDistribute() private {\n        uint256 total = _controller().totalAssets();\n        if (total > lastPwrdAssets.add(DEFAULT_DECIMALS_FACTOR)) {\n            lastGvtAssets = total - lastPwrdAssets;   // won't underflow but safemath won't hurt\n        } else {\n   ...\n```\n\n[`Controller.sol` L355](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/Controller.sol#L355)\n```solidity\nfunction distributeStrategyGainLoss(uint256 gain, uint256 loss) external override {\n    uint256 index = vaultIndexes[msg.sender];\n    require(index > 0 || index <= N_COINS + 1, \"!VaultAdaptor\");    // always true, see separate issue\n    ..\n    index = index - 1;  // can underflow\n```\nRecommend applying `safemath` or moving to Solidity 0.8.x\n\n**- [kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/22)**\n\n## [[L-07] Missing emits for declared events](https://github.com/code-423n4/2021-06-gro-findings/issues/47)\n_Submitted by 0xRajeev, also found by cmichel_\n\nMissing emits for declared events indicate potentially missing logic, redundant declarations, or reduced off-chain monitoring capabilities.\n\n**Scenario:** For example, the event `LogFlashSwitchUpdated` is missing an emit in `Controller.sol`. Based on the name, this is presumably related to flash loans being enabled/disabled which could have significant security implications. Or the (misspelled) `LogHealhCheckUpdate` which is presumably related to a health check logic that is missing in `LifeGuard`. See issue page for referenced code.\n\nRecommend evaluating if logic is missing and if so, adding logic+emit or removing event.\n\n**[kristian-gro (Gro) confirmed](https://github.com/code-423n4/2021-06-gro-findings/issues/47)**\n\n## [[L-08] Having only owner unpause/restart is risky](https://github.com/code-423n4/2021-06-gro-findings/issues/48)\n_Submitted by 0xRajeev_\n\nThe design choice seems to allow a whitelist of addresses (bots or trusted parties) that can trigger pause/emergency but `onlyOwner` can unpause/restart (and perform other privileged functions). While it is recommended in general to have separate privileges/roles for stopping and starting critical functions, having only a single owner for unpause/restart triggering may create a single point of failure if owner is EOA and keys are lost/compromised.\n\n**Scenario:** `Protocol` is paused or put in emergency mode by a bot/user in whitelist. `Owner` is an EOA and the private keys are lost. `Protocol` cannot be unpaused/restarted. See `Controller.sol` [#L317](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L317), [#L101](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L101), and [#L97](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L97).\n\nRecommend evaluating this design choice to see if a whitelist should also be allowed to unpause/restart. At a minimum, use a 6-of-9 or higher multisig and not an EOA.\n\n**[kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/48#issuecomment-880049331):**\n > Multi sig planned\n\n## [[L-09] Uninitialized vaults/addresses will lead to reverts](https://github.com/code-423n4/2021-06-gro-findings/issues/50)\n_Submitted by 0xRajeev_\n\nUninitialized system/curve vaults (default to zero address) will lead to reverts on calls and expect owner to set them before other functions are called because functions do not check if system has been initialized. This requires a robust deployment script which is fail-safe.\n\nThe same applies to many other address parameters in the protocol e.g.: `reward`.\n\n**Scenario:** All vaults are not initialized because of a script error or an admin mistake. Protocol goes live and user interactions result in exceptions. Users lose trust and protocol reputation takes a hit. See `Controller.sol` [#L136-L150](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L136-L150) and [#L194-L198](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L194-L198).\n\nRecommend evaluating non-zero defaults, initializing from constructor or maintaining/checking an initialization state variable which prevents other functions from being called until all critical system states such as vault addresses are initialized.\n\n**[kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/50#issuecomment-880044295):**\n > Controller by gro governance, dealt with in deployment scripts\n\n## [[L-10] The use of `tx.origin` for smart contract safe list is risky and not generic](https://github.com/code-423n4/2021-06-gro-findings/issues/53)\n_Submitted by 0xRajeev_\n\nThe `addSafeAddress()`  takes an address and adds it to a “safe list\". This is used in `eoaOnly()` to give exemption to safe addresses that are trusted smart contracts, when all other smart contacts are prevented from protocol interaction. The stated purpose is to allow only such partner/trusted smart contract integrations (project rep mentioned Argent wallet as the only one for now but that may change) an exemption from potential flash loan threats.\n\nThe `eoaOnly()` check used during deposits and withdrawals checks if `preventSmartContracts` is enabled and if so, makes sure the transaction is coming from an integration/partner smart contract. But instead of using `msg.sender` in the check it uses `tx.origin`. This is suspect because `tx.origin` gives the originating EOA address of the transaction and not a smart contract’s address. (This may get even more complicated with the proposed EIP-3074.)\n\nDiscussion with the project team indicated that this is indeed not the norm but is apparently the case for their only current (none others planned) integration with Argent wallet where the originating account is Argent’s relayer `tx.origin` i.e. flow:\n> Argent relayer (`tx.origin`) => Argent user wallet (`msg.sender`) => gro protocol while the typically expected flow is: user EOA (`tx.origin`) => proxy (`msg.sender`) => gro protocol.\n\nWhile this has reportedly been verified and tested, it does seem strange and perhaps warrants a re-evaluation because the exemption for this/other trusted integration/partner smart contracts will not work otherwise.\n\n**Scenario:** Partner contract is added to the safe address for exemption but the integration fails because of the use of `tx.origin` instead of `msg.sender`. See `Controller.sol` [#L266-L272](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L266-L272), [#L176-L178](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L176-L178), and [#L171-L174](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/Controller.sol#L171-L174).\n\nRecommend re-evaluating the use of `tx.origin` instead of `msg.sender`.\n\n**[kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/53#issuecomment-880039319):**\n > Made for specific partner, so cannot be generic\n>\n> _While this has reportedly been verified and tested, it does seem strange and perhaps warrants a re-evaluation because the exemption for this/other trusted integration/partner smart contracts will not work otherwise._\n>\n> This SC protection is only temporary as we are aware of EIP-3074, and consideration of how we need to change this/or if we need this at all are ongoing.\n\n## [[L-11] Missing parameter validation](https://github.com/code-423n4/2021-06-gro-findings/issues/90)\n_Submitted by cmichel, also found by 0xRajeev_\n\nSome parameters of functions are not checked for invalid values:\n- `BaseVaultAdaptor.constructor`: The addresses should be checked for non-zero values\n- `LifeGuard3Pool.constructor`: The addresses should be checked for non-zero values\n- `Buoy3Pool.constructor`: The addresses should be checked for non-zero values\n- `PnL.constructor`: The addresses should be checked for non-zero values\n- `Controllable.setController`: Does not check that `newController != controller`\n\nA wrong user input,  or wallets defaulting to the zero addresses for a missing input, can lead to the contract needing to redeploy or wasted gas.\n\nRecommend validating the parameters.\n\n**[kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/90#issuecomment-880626823):**\n > Low risk/Non critical - Deployment script handles these cases, but good practice to have 0x checks to stop wasting gas and having to redeploy.\n\n\n## [[L-12] Stricter than needed inequalities may affect borderline scenarios](https://github.com/code-423n4/2021-06-gro-findings/issues/67)\n_Submitted by 0xRajeev_\n\nToken amounts/prices are typically open-ranged and inclusive of the bounds. Using ‘<‘ or ‘>’ instead of ‘<=‘ and ‘>=‘ may affect borderline scenarios, be considered unintuitive by users, and affect accounting.\n\n-**Scenario 1:** In `calculateVaultSwapData()`, the `require()` check is:\n```solidity\nrequire(withdrawAmount < state.totalCurrentAssetsUsd, \"Withdrawal exceeds system assets\");\n```\nThe ‘<‘ could be replaced by ‘<=‘\n\n**Scenario 2:** In `withdrawSingleByLiquidity()`, the `require()` check is:\n```solidity\nrequire(balance > minAmount, \"withdrawSingle: !minAmount\");\n```\nThe ‘>’ should be ‘>=‘ as is used in the similar check in `withdrawSingleByExchange()`.\n\nSee `Insurance.sol` [L429](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L429), and `LifeGuard3Pool.sol` [L224](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/pools/LifeGuard3Pool.sol#L224) and [L268](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/pools/LifeGuard3Pool.sol#L268).\n\nRecommend reconsidering strict inequalities and relaxing them if possible.\n\n**[kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/67#issuecomment-880031850):**\n > We haven't been able to model an exploit for this\n\n## [[L-13] `totalAssets` > `withdrawelUsd` should be inclusive](https://github.com/code-423n4/2021-06-gro-findings/issues/86)\n_Submitted by pauliax_\n\nThe check should be inclusive here to cover the case when `totalAssets` = `withdrawalUsd`:\n\nRecommend changing\n```solidity\nrequire(totalAssets > withdrawUsd, \"totalAssets < withdrawalUsd\");\n```\nto\n```solidity\nrequire(totalAssets >= withdrawUsd, \"totalAssets < withdrawalUsd\");\n```\n\n**[kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/86#issuecomment-880632366):**\n > Edge case that is unlikely to cause issues as gro protocol provides initial seed investment\n\n## [[L-14] Use of uninitialized value and unclear/unused logic](https://github.com/code-423n4/2021-06-gro-findings/issues/65)\n_Submitted by 0xRajeev, also found by cmichel_\n\n`vaultIndexes` is uninitialized and it's unclear what 10000 signifies here. `investDelta` return value is also ignored at call site. If this is an indication of missed/incorrect logic, then it's risky. If not, removing will help readability/maintainability. See `Insurance.sol` [#L166](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L166), and [#L155](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L155).\n\nRecommend evaluating any missing logic or else removing unused code.\n\n**- [kristian-gro (Gro) confirmed](https://github.com/code-423n4/2021-06-gro-findings/issues/65)**\n\n## [[L-15] decimals of `FixedStablecoins`](https://github.com/code-423n4/2021-06-gro-findings/issues/77)\n_Submitted by pauliax_\n\nThe `FixedStablecoins` constructor does not validate that addresses in the array are not empty, `!= address(0)`, and instead relies on the creator passing the correct values for decimals. The comment next to USDC (0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48) says that it is supposed to have 6 decimals:\n```solidity\n    `uint256 public immutable USDC_DECIMALS; // = 1E6;`\n```\nHowever, when querying the actual value on [Etherscan](https://etherscan.io/address/0xa2327a938febf5fec13bacfb16ae10ecbc4cbdcf#readContract), it shows 0 decimals:  The problem with USDC is that it uses a proxy pattern, thus the implementation could change (decimals could change but in practice, I think it is very unlikely).\n\nI think it would be better not to pass decimals separately and, instead of relying on the correctness of the input, recommend using `IERC20Detailed` to query the decimals in code. Always querying the decimals on the go may be very inefficient and bring new attack vectors so I think you need to do here an assumption that decimals of upgradeable tokens won't change.\n\n**[kristian-gro (Gro) acknowledged](https://github.com/code-423n4/2021-06-gro-findings/issues/77#issuecomment-880025922):**\n > We dont expect to see any changes to underlying decimals of stablecoins, worst case scenario we can redeploy the affected contracts\n\n## [[L-16] More accurate calculation of return USD of `withdrawSingleByLiquidity`](https://github.com/code-423n4/2021-06-gro-findings/issues/121)\n_Submitted by shw_\n\nThe `withdrawSingleByLiquidity` function of `LifeGuard3Pool` calls `buoy.singleStableToUsd` to calculate the return USD amount, which internally calls `_stableToUsd` with the `deposit` parameter set to `true`. A more accurate calculation is to set the `deposit` parameter to `false` since this action is a withdrawal. A similar issue exists in the function `calcProtocolWithdraw` of `Allocation`, where the current strategy's USD is calculated by `buoy.singleStableToUsd`. See [`LifeGuard3Pool.sol` #L226](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/LifeGuard3Pool.sol#L226), [`Buoy3Pool.sol` #L122](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/pools/oracle/Buoy3Pool.sol#L122), and [`Allocation.sol` #L142](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/insurance/Allocation.sol#L142).\n\nRecommend considering adding a new boolean parameter, `deposit`, to the `singleStableToUsd` function of `Buoy3Pool` to indicate whether the action is a deposit or not, as that in the `stableToUsd` and `stableToLp` functions.\n\n**- [kristian-gro (Gro) confirmed](https://github.com/code-423n4/2021-06-gro-findings/issues/121)**\n\n## [[L-17] Use of `tx.origin` for authentication](https://github.com/code-423n4/2021-06-gro-findings/issues/122)\n_Submitted by shw_\n\nThe `eoaOnly` function of `Controller` checks whether the user is whitelisted using `tx.origin`. Using `tx.origin` to authenticate users is generally not a good practice since it can be abused by malicious contracts when whitelisted users are interacting with them. Users have to be very careful to avoid being impersonated when interacting with contracts from other protocols, which could unnecessarily burden users. See [`Controller.sol` #L269](https://github.com/code-423n4/2021-06-gro/blob/main/contracts/Controller.sol#L269). For for more discussion on `tx.origin`, refer to [Solidity issue - Remove tx.origin](https://github.com/ethereum/solidity/issues/683).\n\nRecommend changing `tx.origin` at line 269 to `msg.sender` to ensure that the entity calling the `Controller` is the one allowed.\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/122#issuecomment-886702598):**\n > This issue touches on different problem so I'll keep it as stand-alone low risk issue.\n\n## [[L-18] Vault assets can be migrated to an arbitrary address at anytime by owner](https://github.com/code-423n4/2021-06-gro-findings/issues/59)\n_Submitted by 0xRajeev, also found by gpersoon_\n\n`BaseVaultAdaptor` contains logic that is “built on top of any vault in order for it to function with Gro protocol.” One of such functions is the `migrate()` function which is `onlyOwner` and takes an address parameter which allows owner to migrate the vault’s entire balance at any time to that address. This is extremely risky because it gives an opportunity for, or at least a perception of, a rug-pull by a disgruntled/malicious owner/dev to the protocol users/community. This could also be dangerous if triggered accidentally, especially by an EOA owner address or maliciously via compromised keys.\n\n- **Scenario 1:** Protocol launches and starts accumulating TVL. A savvy user analyzes source and shares the presence of this `migrate()` function as potential owner rug-pull vector. Users withdraw funds and protocol reputation takes a hit.\n- **Scenario 2:** Protocol launches and hits 100MM TVL. A disgruntled dev/owner migrates vault assets to their address and drains the protocol.\n- **Scenario 3:** Protocol launches and hits 100MM TVL. Owner EOA keys get compromised and attacker migrates vault assets to their address and drains the protocol.\n\nSee [`BaseVaultAdaptor.sol` #L294-L302 ](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/vaults/BaseVaultAdaptor.sol#L294-L302)\n\nSee similar concern on `migrate()` functionality in ShibaSwap recently from Yearn devs [here](https://twitter.com/bantg/status/1412370758987354116) and [here](https://twitter.com/bantg/status/1412388385663164425). Also from [here](https://twitter.com/valentinmihov/status/1412352490918625280) and [here](https://twitter.com/shegenerates/status/1412642215537545218).\n\nRecommend evaluating the need for this function and then avoiding/mitigating the risk appropriately.\n\n**[kristian-gro (Gro) confirmed but disagreed with severity](https://github.com/code-423n4/2021-06-gro-findings/issues/59#issuecomment-880625662):**\n > Low risk\n>  - Owner is timelock, plan for multi sig.\n>  -assumes malicious owner\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/59#issuecomment-886763561):**\n > Agree with sponsor. Assuming malicious behavior of owner is low risk if it's a governance and timelock is used. Low risk.\n\n## [[L-19] Enabling `preventSmartContracts` may lead to lock/loss of funds](https://github.com/code-423n4/2021-06-gro-findings/issues/54)\n_Submitted by 0xRajeev_\n\n`preventSmartContracts` is initialized to false, which allows users to deposit/withdraw funds from the protocol via (custom) smart contracts because the `eoaOnly` check during deposits/withdrawals always succeeds. However, if protocol owner decides to suddenly enable `preventSmartContracts`, then smart contracts are prevented from interaction unless they are exempted in safe addresses.\n\nThe lack of an event in `switchEoaOnly()` to inform off-chain monitors `/interfaces` about the enabling/disabling, say from false -> true, and lack of a time-delayed enforcement of this prevention of contracts from depositing/withdrawing, causes users who have previously deposited via smart contracts (that are not `safeAddresses`) to get locked out of withdrawals leading to fund lock/loss.\n\n**Scenario:** User deposits funds via smart contract (not in safe address list) when `preventSmartContracts`=false. Protocol owner sets `preventSmartContracts`=true. User’s funds are locked/lost in protocol. See issue page for affected code.\n\nRecommend adding event + time-delayed enforcement to `switchEoaOnly()` so users can monitor and withdraw funds deposited via smart contracts.\n\n**[kristian-gro (Gro) disputed](https://github.com/code-423n4/2021-06-gro-findings/issues/54#issuecomment-880037673):**\n > Low criticality/Not an issue - Workaround exists (safe addresses)\n>  - Owner will be a timelock\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/54#issuecomment-886808758):**\n > Agree with sponsor. While the scenario is correct, it all comes down to the management of the protocol. From different context I also assume that this option will be set to true for beta and safe addresses will be whitelisted. I'm making this a low risk because this can create too many angry users to be non-critical.\n\n## [[L-20] Unauthorized `rebalanceTrigger` calls may allow one to exploit arbitrage opportunity and put system at risk](https://github.com/code-423n4/2021-06-gro-findings/issues/66)\n_Submitted by 0xRajeev_\n\nThe need for an externally visible `rebalanceTrigger()` (when `rebalance()` does that check itself) is apparently that the whitelisted bot checks trigger before calling the very expensive/security-sensitive `rebalance()` operation which again checks to see if anything has changed between then and the previous trigger.\n\nExposing the rebalance trigger check externally for convenience may offer a front-running arbitrage opportunity to a non-whitelisted, i.e. any, bot which can check when a rebalance will be triggered by a whitelisted bot and then using that information to arbitrage on underlying stablecoins/strategies, which may affect system exposure.\n\nDiscussion with the project team reported that this is technically possible, but only within the BP limit (25-50) of the current vs cached price (where the `BASIS_POINTS` is currently set to 20). If not, the `Buoy safetyCheck` will fail. See `Insurance.sol` [#L187-L196](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L187-L196) and [#L198-L215](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/insurance/Insurance.sol#L198-L215). Also `Buoy3Pool.sol` [#L30](https://github.com/code-423n4/2021-06-gro/blob/091660467fc8d13741f8aafcec80f1e8cf129a33/contracts/pools/oracle/Buoy3Pool.sol#L30).\n\nRecommend adding `onlyWhitelist` modifier to `rebalanceTrigger()`, which allows retaining the convenience of (only whitelisted) bots checking before calling rebalance. This makes it only a little safer because one can always front-run the actual rebalance call. This will only force bots to monitor `mempool` for rebalances instead of arbing ahead of time. Revisit this aspect for any missed considerations.\n\n**[kristian-gro (Gro) acknowleged and disagreed](https://github.com/code-423n4/2021-06-gro-findings/issues/66#issuecomment-880032387):**\n > There is price check before rebalance. It is not very useful to add whitelist on view function. Because the code is public, anyone can implement a local function easily.\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/66#issuecomment-886818713):**\n > Solution proposed by warden does not solve the problem but the problem still remains valid. The issue looks quite generic and it's really a MEV problem that most protocols have. For that reason, I think it's reasonable to degrade to low risk.\n\n## [[L-21] Rational actors will just set themselves as referral](https://github.com/code-423n4/2021-06-gro-findings/issues/108)\n_Submitted by cmichel_\n\nWhen depositing, a referral can be chosen and the only check is:\n\n```solidity\naccount != address(0) && referral != address(0) && referrals[account] == address(0)\n```\n\nThis means that users can refer themselves. It's not immediately clear from the contracts that are part of this repo, what the referrals are used for. If they are used for anything, rational actors will always refer themselves to maximize profits making the referral system useless.\n\nRecommend whitelisting big influencers that are allowed to be used as referrals to avoid everyone referring themselves or another account they control.\n\n**[kristian-gro (Gro) disputed and disagreed with severity](https://github.com/code-423n4/2021-06-gro-findings/issues/108#issuecomment-879989426):**\n > not an issue/non-critical\n> Makes no difference, referrals are calculated offchain and not used for anything on chain\n\n**[ghoul-sol (Judge) commented](https://github.com/code-423n4/2021-06-gro-findings/issues/108#issuecomment-886820331):**\n > Even if this is calculated off-chain, technically being able to refer ourselves is an issue. Even offchain this needs to be filtered out which is extra work. I'm keeping this as low risk.\n\n\n# Non-Critical Findings (31)\n\n- [[N-01] hardcoded values](https://github.com/code-423n4/2021-06-gro-findings/issues/8)\n- [[N-02] implicit assumptions about underlying coins](https://github.com/code-423n4/2021-06-gro-findings/issues/9)\n- [[N-03] `setFeeToken` doesn't check index](https://github.com/code-423n4/2021-06-gro-findings/issues/10)\n- [[N-04] redundant check of array length](https://github.com/code-423n4/2021-06-gro-findings/issues/12)\n- [[N-05] Outdated comment at `calculateWithdrawalAmountsOnPartVaults` ](https://github.com/code-423n4/2021-06-gro-findings/issues/13)\n- [[N-06] require comments don't all follow convention](https://github.com/code-423n4/2021-06-gro-findings/issues/14)\n- [[N-07] Easier way to determine `strategiesLength` ](https://github.com/code-423n4/2021-06-gro-findings/issues/17)\n- [[N-08] BASIS_POINTS naming convention](https://github.com/code-423n4/2021-06-gro-findings/issues/23)\n- [[N-09] Unused code](https://github.com/code-423n4/2021-06-gro-findings/issues/71)\n- [[N-10] Incorrect error strings used may cause confusion](https://github.com/code-423n4/2021-06-gro-findings/issues/58)\n- [[N-11] `updateStrategiesDebtRatio` function and `LogNewDebtRatios` event](https://github.com/code-423n4/2021-06-gro-findings/issues/74)\n- [[N-12] `setBigFishThreshold` above 100%](https://github.com/code-423n4/2021-06-gro-findings/issues/80)\n- [[N-13] Inconsistent usage of exponentiation for constants](https://github.com/code-423n4/2021-06-gro-findings/issues/83)\n- [[N-14] event `LogTransfer` is only emitted in function transfer](https://github.com/code-423n4/2021-06-gro-findings/issues/88)\n- [[N-15] Missing input validation on `_feeToken` in `DepositHandler` constructor and `setFeeToken()`](https://github.com/code-423n4/2021-06-gro-findings/issues/45)\n- [[N-16] Emergency disabling can only be done one stablecoin at a time](https://github.com/code-423n4/2021-06-gro-findings/issues/57)\n- [[N-17] Whitelist addition/removal is done unconditionally](https://github.com/code-423n4/2021-06-gro-findings/issues/60)\n- [[N-18] withdrawal fee may be set above 100% or frontrunned](https://github.com/code-423n4/2021-06-gro-findings/issues/78)\n- [[N-19] `burnAll` should check that factor > 0 and amount > 0](https://github.com/code-423n4/2021-06-gro-findings/issues/87)\n- [[N-20] Loss of precision](https://github.com/code-423n4/2021-06-gro-findings/issues/95)\n- [[N-21] Hardcoded 99 as deadcoin](https://github.com/code-423n4/2021-06-gro-findings/issues/96)\n- [[N-22] Wrong min amount check in `withdrawByStablecoin`](https://github.com/code-423n4/2021-06-gro-findings/issues/97)\n- [[N-23] `Exposure.sortVaultsByDelta` does not work for N_COINS != 3](https://github.com/code-423n4/2021-06-gro-findings/issues/101)\n- [[N-24] `strategiesLength` should not be allowed to exceed MAX_STRATS](https://github.com/code-423n4/2021-06-gro-findings/issues/110)\n- [[N-25] `strategiesLength` should not be allowed to exceed MAX_STRATS](https://github.com/code-423n4/2021-06-gro-findings/issues/110)\n- [[N-26] Unlocked pragma used in multiple contracts](https://github.com/code-423n4/2021-06-gro-findings/issues/117)\n- [[N-27] Add a proper revert message in `_withdrawSingle`](https://github.com/code-423n4/2021-06-gro-findings/issues/120)\n- [[N-28] Single-step process for critical ownership transfer is risky](https://github.com/code-423n4/2021-06-gro-findings/issues/46)\n- [[N-29] Missing zero-address check and event parameter for `_emergencyHandler`](https://github.com/code-423n4/2021-06-gro-findings/issues/49)\n- [[N-30] Critical protocol parameter changes should have time-delayed enforcement](https://github.com/code-423n4/2021-06-gro-findings/issues/55)\n- [[N-31] Critical protocol parameter configuration/changes should have sanity/threshold checks](https://github.com/code-423n4/2021-06-gro-findings/issues/56)\n\n# Gas Optimizations (24)\n\n- [[G-01] Simplifying logic will save at least 4200-11,500 gas in deposit flow](https://github.com/code-423n4/2021-06-gro-findings/issues/32)\n- [[G-02] Unnecessary update of amount ](https://github.com/code-423n4/2021-06-gro-findings/issues/18)\n- [[G-03] `calcProtocolExposureDelta` could use a break](https://github.com/code-423n4/2021-06-gro-findings/issues/20)\n- [[G-04] optimization uses extra gas](https://github.com/code-423n4/2021-06-gro-findings/issues/24)\n- [[G-05] Unnecessary duplication of array](https://github.com/code-423n4/2021-06-gro-findings/issues/27)\n- [[G-06] Upgrading the solc compiler to >=0.8 may save gas](https://github.com/code-423n4/2021-06-gro-findings/issues/28)\n- [[G-07] Avoid use of state variables in event emissions to save gas](https://github.com/code-423n4/2021-06-gro-findings/issues/29)\n- [[G-08] Using access lists can save gas due to EIP-2930 post-Berlin hard fork](https://github.com/code-423n4/2021-06-gro-findings/issues/30)\n- [[G-09] Caching repeatedly read state variables in local variables can save gas](https://github.com/code-423n4/2021-06-gro-findings/issues/31)\n- [[G-10] Rearranging order of state variable declarations to pack them will save storage slots and gas](https://github.com/code-423n4/2021-06-gro-findings/issues/33)\n- [[G-11] Removing unnecessary initializations can save gas](https://github.com/code-423n4/2021-06-gro-findings/issues/34)\n- [[G-12] Unnecessary zero-address check](https://github.com/code-423n4/2021-06-gro-findings/issues/35)\n- [[G-13] Moving logic to where required will save >=6800 gas on deposit/withdraw flows](https://github.com/code-423n4/2021-06-gro-findings/issues/36)\n- [[G-14] Changing function visibility from public to external/internal/private can save gas](https://github.com/code-423n4/2021-06-gro-findings/issues/37)\n- [[G-15] Removing unnecessary check can save gas in withdraw flow](https://github.com/code-423n4/2021-06-gro-findings/issues/38)\n- [[G-16] Removing unused return values can save gas](https://github.com/code-423n4/2021-06-gro-findings/issues/41)\n- [[G-17] Removing redundant code can save gas](https://github.com/code-423n4/2021-06-gro-findings/issues/42)\n- [[G-18] Removing unnecessary `lpToken.balanceOf` can save 4700+ gas](https://github.com/code-423n4/2021-06-gro-findings/issues/43)\n- [[G-19] Simpler logic can save gas](https://github.com/code-423n4/2021-06-gro-findings/issues/44)\n- [[G-20] Return False early in `isValidBigFish`](https://github.com/code-423n4/2021-06-gro-findings/issues/82)\n- [[G-21] Two `SafeApprove` calls when it could be just one](https://github.com/code-423n4/2021-06-gro-findings/issues/84)\n- [[G-22] `RebasingGToken` emits same events on transfer](https://github.com/code-423n4/2021-06-gro-findings/issues/91)\n- [[G-23] `Allocaiton.calcProtocolExposureDelta` gas optimization](https://github.com/code-423n4/2021-06-gro-findings/issues/102)\n- [[G-24] function withdrawToAdapter should be included in the interface and return withdrawal amount](https://github.com/code-423n4/2021-06-gro-findings/issues/116)\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}