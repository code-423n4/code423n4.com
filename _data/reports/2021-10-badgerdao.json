{
  "circa": {
    "title": "BadgerDAO ibBTC Wrapper contest",
    "sponsor": "BadgerDAO",
    "slug": "2021-10-badgerdao",
    "date": "2021-12-16",
    "findings": "https://github.com/code-423n4/2021-10-badgerdao-findings/issues",
    "contest": 47
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of the BadgerDAO ibBTC Wrapper smart contract system written in Solidity. The code contest took place between October 28—October 30 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>20 Wardens contributed reports to the BadgerDAO ibBTC Wrapper contest:</p>\n<ol>\n<li>hyh</li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/jonah1005w\">jonah1005</a></li>\n<li><a href=\"https://twitter.com/KenzoAgada\">kenzo</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/hack3r_0m\">hack3r-0m</a></li>\n<li><a href=\"https://twitter.com/MukeshJ_eth\">JMukesh</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li>pants</li>\n<li>TomFrench</li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li><a href=\"https://twitter.com/loop_225\">loop</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://twitter.com/liam_eastwood13\">leastwood</a></li>\n<li><a href=\"https://twitter.com/jah_s3\">jah</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://www.linkedin.com/in/yahia-chaabane/\">ych18</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/liam_eastwood13\">leastwood</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/money_lego\">moneylegobatman</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 23 unique vulnerabilities and 51 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 4 received a risk rating in the category of HIGH severity, 4 received a risk rating in the category of MEDIUM severity, and 15 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 12 non-critical recommendations and 16 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-10-badgerdao\">C4 BadgerDAO ibBTC Wrapper contest repository</a>, and is composed of 90 smart contracts written in the Solidity programming language and includes 7479 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-4\" style=\"position:relative;\"><a href=\"#high-risk-findings-4\" aria-label=\"high risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (4)</h1>\n<h2 id=\"h-01-the-design-of-wibbtc-is-not-fully-compatible-with-the-current-curve-stableswap-pool\" style=\"position:relative;\"><a href=\"#h-01-the-design-of-wibbtc-is-not-fully-compatible-with-the-current-curve-stableswap-pool\" aria-label=\"h 01 the design of wibbtc is not fully compatible with the current curve stableswap pool permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/65\">[H-01] The design of <code>wibBTC</code> is not fully compatible with the current Curve StableSwap pool</a></h2>\n<p><em>Submitted by WatchPug, also found by gzeon</em></p>\n<p>Per the documentation, <code>wibBTC</code> is designed for a Curve StableSwap pool. However, the design of <code>wibBTC</code> makes the balances change dynamically and automatically. This is unusual for an ERC20 token, and it’s not fully compatible with the current Curve StableSwap pool.</p>\n<p>Specifically, a Curve StableSwap pool will maintain the balances of its <code>coins</code> based on the amount of tokens added, removed, and exchanged each time. In another word, it can not adopt the dynamic changes of the balances that happened automatically.</p>\n<p>The pool’s actual dynamic balance of <code>wibBTC</code> will deviate from the recorded balance in the pool contract as the <code>pricePerShare</code> increases.</p>\n<p>Furthermore, there is no such way in Curve StableSwap similar to the <code>sync()</code> function of UNI v2, which will force sync the stored <code>reserves</code> to match the balances.</p>\n<h5 id=\"poc\" style=\"position:relative;\"><a href=\"#poc\" aria-label=\"poc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PoC</h5>\n<p>Given:</p>\n<ul>\n<li>The current <code>pricePerShare</code> is: <code>1</code>;</li>\n<li>The Curve pool is newly created with 0 liquidity;</li>\n<li>Alice added <code>100 wibBTC</code> and <code>100 wBTC</code> to the Curve pool; Alice holds 100% of the pool;</li>\n<li>After 1 month with no activity (no other users, no trading), and the <code>pricePerShare</code> of <code>ibBTC</code> increases to <code>1.2</code>;</li>\n<li>Alice removes all the liquidity from the Curve pool.</li>\n</ul>\n<p>While it’s expected to receive <code>150 wibBTC</code> and <code>100 wBTC</code>, Alice actually can only receive <code>100 wibBTC</code> and <code>100 wBTC</code>.</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider creating a revised version of the Curve StableSwap contract that can handle dynamic balances properly.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/65#issuecomment-963668495\">dapp-whisperer (BadgerDAO) confirmed</a>:</strong></p>\n<blockquote>\n<p>We will be creating a custom pool that takes this into account based on the rate_multiplier variable on the MetaPools.</p>\n<ul>\n<li><a href=\"https://github.com/shuklaayush/ibbtc-curve-zap/commit/36f5900bb276a61a2f85425f496c1ba99c1ddd7c\">Draft implementation</a></li>\n</ul>\n</blockquote>\n<h2 id=\"h-02-approved-spender-can-spend-too-many-tokens\" style=\"position:relative;\"><a href=\"#h-02-approved-spender-can-spend-too-many-tokens\" aria-label=\"h 02 approved spender can spend too many tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/43\">[H-02] Approved spender can spend too many tokens</a></h2>\n<p><em>Submitted by cmichel, also found by WatchPug, jonah1005, gzeon, and TomFrench</em>\nThe <code>approve</code> function has not been overridden and therefore uses the internal <em>shares</em>, whereas <code>transfer(From)</code> uses the rebalanced amount.</p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The approved spender may spend more tokens than desired. In fact, the approved amount that can be transferred keeps growing with <code>pricePerShare</code>.</p>\n<p>Many contracts also use the same amount for the <code>approve</code> call as for the amount they want to have transferred in a subsequent <code>transferFrom</code> call, and in this case, they approve an amount that is too large (as the approved <code>shares</code> amount yields a higher rebalanced amount).</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The <code>_allowances</code> field should track the rebalanced amounts such that the approval value does not grow. (This does not actually require overriding the <code>approve</code> function.)\nIn <code>transferFrom</code>, the approvals should then be subtracted by the <em>transferred</em> <code>amount</code>, not the <code>amountInShares</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// _allowances are in rebalanced amounts such that they don&#39;t grow</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// need to subtract the transferred amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">_allowances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">()].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;ERC20: transfer amount exceeds allowance&quot;</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/43#issuecomment-957197908\">tabshaikh (Badger) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p>Fix here: <a href=\"https://github.com/Badger-Finance/rebasing-ibbtc/pull/7\">https://github.com/Badger-Finance/rebasing-ibbtc/pull/7</a></p>\n</blockquote>\n<h2 id=\"h-03-wrappedibbtceth-contract-will-use-stalled-price-for-mintburn-if-updatepricepershare-wasnt-run-properly\" style=\"position:relative;\"><a href=\"#h-03-wrappedibbtceth-contract-will-use-stalled-price-for-mintburn-if-updatepricepershare-wasnt-run-properly\" aria-label=\"h 03 wrappedibbtceth contract will use stalled price for mintburn if updatepricepershare wasnt run properly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/86\">[H-03] <code>WrappedIbbtcEth</code> contract will use stalled price for mint/burn if <code>updatePricePerShare</code> wasn’t run properly</a></h2>\n<p><em>Submitted by hyh, also found by cmichel, gpersoon, leastwood, hack3r-0m, kenzo, WatchPug, and loop</em></p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Malicious user can monitor <code>SetPricePerShare</code> event and, if it was run long enough time ago and market moved, but, since there were no <code>SetPricePerShare</code> fired, the contract’s <code>pricePerShare</code> is outdated, so a user can <code>mint()</code> with <code>pricePerShare</code> that is current for contract, but outdated for market, then wait for price update and <code>burn()</code> with updated <code>pricePerShare</code>, yielding risk-free profit at expense of contract holdings.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><code>WrappedIbbtcEth</code> updates <code>pricePerShare</code> variable by externally run <code>updatePricePerShare</code> function. The variable is then used in mint/burn/transfer functions without any additional checks, even if outdated/stalled. This can happen if the external function wasn’t run for any reason.\nThe variable is used via <code>balanceToShares</code> function: <a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L155\"><code>WrappedIbbtcEth.sol</code> L155</a></p>\n<p>This is feasible as <code>updatePricePerShare</code> to be run by off-chain script being a part of the system, and malfunction of this script leads to contract exposure by stalling the price. The malfunction can happen both by internal reasons (bugs) and by external ones (any system-level dependencies, network outrages).\n<code>updatePricePerShare</code> function: <a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L72\"><code>WrappedIbbtcEth.sol</code> L72</a></p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The risk comes with system design. Wrapping price updates with contract level variable for gas costs minimization is a viable approach, but it needs to be paired with corner cases handling. One of the ways to reduce the risk is as follows:</p>\n<p>Introduce a threshold variable for maximum time elapsed since last <code>pricePerShare</code> update to <code>WrappedIbbtcEth</code> contract.</p>\n<p>Then 2 variants of <code>transferFrom</code> and <code>transfer</code> functions can be introduced, both check condition {now - time since last price update &#x3C; threshold}. If condition holds both variants, do the transfer. If it doesn’t, then the first variant reverts, while the second do costly price update.\nI.e. it will be cheap transfer (that works only if price is recent) and full transfer (that is similar to the first when price is recent, but do price update on its own when price is stalled). This way, this full transfer is guaranteed to run and is usually cheap, costing more if price is stalled and it does the update.</p>\n<p>After this, whenever scheduled price update malfunctions (for example because of network conditions), the risk will be limited by market volatility during threshold time at maximum, i.e. capped.</p>\n<p>See <a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/86\">issue page</a> for example code:</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/86#issuecomment-962180704\">dapp-whisperer (BadgerDAO) confirmed</a>:</strong></p>\n<blockquote>\n<p>Agreed, appreciate the thorough breakdown. We will add a “max staleness” to the ppfs update.</p>\n<p>I do see some merit in the idea of “updating when needed” at expense of the next user, but due to interface considerations we’d like to keep that consistent for users. In practice, we will run a bot to ensure timely updates.</p>\n<p>The pps updates are small and infrequent.</p>\n</blockquote>\n<h2 id=\"h-04-wrappedibbtc-and-wrappedibbtceth-contracts-do-not-filter-out-price-feed-outliers\" style=\"position:relative;\"><a href=\"#h-04-wrappedibbtc-and-wrappedibbtceth-contracts-do-not-filter-out-price-feed-outliers\" aria-label=\"h 04 wrappedibbtc and wrappedibbtceth contracts do not filter out price feed outliers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/87\">[H-04] <code>WrappedIbbtc</code> and <code>WrappedIbbtcEth</code> contracts do not filter out price feed outliers</a></h2>\n<p><em>Submitted by hyh</em></p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>If price feed is manipulated in any way or there is any malfunction based volatility on the market, both contracts will pass it on a user.\nIn the same time it’s possible to construct mitigation mechanics for such cases, so user economics would be affected by sustainable price movements only.\nAs price outrages provide a substantial attack surface for the project it’s worth adding some complexity to the implementation.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>In <code>WrappedIbbtcEth</code> <code>pricePerShare</code> variable is updated by externally run <code>updatePricePerShare</code> function (<a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L72\">WrappedIbbtcEth.sol L72</a>), and then used in mint/burn/transfer functions without additional checks via <code>balanceToShares</code> function: <a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L155\"><code>WrappedIbbtcEth.sol</code> L155</a></p>\n<p>In <code>WrappedIbbtc</code> price is requested via <code>pricePerShare</code> function(<a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L123\"><code>WrappedIbbtc.sol</code> L123</a>), and used in the same way without additional checks via <code>balanceToShares</code> <a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L147\">function</a>.</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Introduce a minting/burning query that runs on a schedule, separating user funds contribution and actual mint/burn. With user deposit or burn, the corresponding action to be added to commitment query, which execution for mint or redeem will later be sparked by off-chain script according to fixed schedule.\nThis also can be open to public execution with gas compensation incentive, for example as it’s done in Tracer protocol: <a href=\"https://github.com/tracer-protocol/perpetual-pools-contracts/blob/develop/contracts/implementation/PoolKeeper.sol#L131\"><code>PoolKeeper.sol</code> L131</a></p>\n<p>Full code of an implementation is too big to include in the report, but viable versions are available publicly (Tracer protocol version can be found at the same repo, <a href=\"https://github.com/tracer-protocol/perpetual-pools-contracts/blob/develop/contracts/implementation/PoolCommitter.sol\"><code>implementation/PoolCommitter</code> sol</a>\n).</p>\n<p>Once the scheduled mint/redeem query is added, the additional logic to control for price outliers will become possible there, as in this case mint/redeem execution can be conditioned to happen on calm market only, where various definitions of calm can be implemented.\nOne of the approaches is to keep track of recent prices and require that new price each time be within a threshold from median of their array.</p>\n<p>Example:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Introduce small price tracking arrays:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\">\\[] </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">times</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\">\\[] </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">prices</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Current position in array</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">curPos</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Current length, grows from 0 to totalMaxPos as prices are being added</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">curMaxPos</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Maximum length, we track up to totalMaxPos prices</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalMaxPos</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Price movement threshold</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">moveThreshold</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0.1</span><span class=\"mtk1\">\\*</span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>We omit the full implementation here as it is lengthy enough and can vary.\nThe key steps are:</p>\n<ul>\n<li>Run query for scheduled mint/redeem with logic: if next price is greater than median of currently recorded prices by threshold, add it to the records, but do not mint/redeem.</li>\n<li>That is, when scheduled mint/redeem is run, on new price request, WrappedIbbtcEth.core.pricePerShare() or WrappedIbbtc.oracle.pricePerShare(), get newPrice and calculate current price array median, curMed</li>\n<li>prices[curPos] = newPrice</li>\n<li>if (curMaxPos &#x3C; totalMaxPos) {curMaxPos += 1}</li>\n<li>if (curPos == curMaxPos) {curPos = 0} else {curPos += 1}</li>\n<li>if (absolute<em>value</em>of(newPrice - curMed) &#x3C; moveThreshold * curMed / 1e18) {do<em>mint/redeem; return\\</em>0_status}</li>\n<li>else {return_1_status}</li>\n</ul>\n<p>Schedule should be frequent enough, say once per 30 minutes, which is kept while returned status is 0. While threshold condition isn’t met and returned status is 1, it runs once per 10 minutes. The parameters here are subject to calibration.</p>\n<p>This way if the price movement is sustained the mint/redeem happens after price array median comes to a new equilibrium. If price reverts, the outbreak will not have material effect mint/burn operations. This way the contract vulnerability is considerably reduced as attacker would need to keep distorted price for period long enough, which will happen after the first part of deposit/withdraw cycle. I.e. deposit and mint, burn and redeem operations will happen not simultaneously, preventing flash loans to be used to elevate the quantities, and for price to be effectively distorted it would be needed to keep it so for substantial amount of time.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/87#issuecomment-958145768\">dapp-whisperer (BadgerDAO) confirmed</a>:</strong></p>\n<blockquote>\n<p>Minting and burning happens atomically within larger function calls and our current approach isn’t amenable to this change.</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-4\" style=\"position:relative;\"><a href=\"#medium-risk-findings-4\" aria-label=\"medium risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (4)</h1>\n<h2 id=\"m-01-unable-to-transfer-wrappedibbtc-if-oracle-go-down\" style=\"position:relative;\"><a href=\"#m-01-unable-to-transfer-wrappedibbtc-if-oracle-go-down\" aria-label=\"m 01 unable to transfer wrappedibbtc if oracle go down permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/20\">[M-01] Unable to transfer <code>WrappedIbbtc</code> if Oracle go down</a></h2>\n<p><em>Submitted by gzeon</em></p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>In <code>WrappedIbbtc</code>, user will not be able to transfer if <code>oracle.pricePerShare()</code> (L124) revert. This is because <code>balanceToShares()</code> is called in both transfer and <code>transferFrom</code>, which included a call to <code>pricePerShare()</code>.</p>\n<p>If this is the expected behavior, note that <code>WrappedIbbtcEth</code> is behaving the opposite as it uses the cached value in a local variable <code>pricePerShare</code>, which is only updated upon call to <code>updatePricePerShare()</code>.</p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Depending on the specification, one of them need to be changed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/20\">dapp-whisperer (BadgerDAO) confirmed</a></strong></p>\n<h2 id=\"m-02-null-check-in-pricepershare\" style=\"position:relative;\"><a href=\"#m-02-null-check-in-pricepershare\" aria-label=\"m 02 null check in pricepershare permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/90\">[M-02] Null check in <code>pricePerShare</code></a></h2>\n<p><em>Submitted by hack3r-0m, also found by defsec</em></p>\n<p> oracle can <code>0</code> as a price of the share, in that case, 0 will be the denominator in some calculations which can cause reverts from SafeMath (for e.g here: <a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L148\"><code>WrappedIbbtc.sol</code> L148</a>) resulting in Denial Of Service.</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L73\"><code>WrappedIbbtcEth.sol</code> L73</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L123\"><code>WrappedIbbtc.sol</code> L123</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a null check to ensure that on every update, the price is greater than 0.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/90#issuecomment-962178554\">dapp-whisperer (BadgerDAO) confirmed</a>:</strong></p>\n<blockquote>\n<p>Agreed. we will implicitly or explicitly add this check.</p>\n</blockquote>\n<h2 id=\"m-03-hard-to-clear-balance\" style=\"position:relative;\"><a href=\"#m-03-hard-to-clear-balance\" aria-label=\"m 03 hard to clear balance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/24\">[M-03] hard to clear balance</a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<p>The contract does not allow users to transfer by share. Therefore, It is hard for users to clear out all the shares.\nThere will be users using this token with Metamask and it is likely the <code>pricePerShare</code> would increase after the user sends transactions. I consider this is a medium-risk issue.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L110-L118\">WrappedIbbtc.sol#L110-L118</a></p>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>A new <code>transferShares</code> beside the original <code>transfer()</code> would build a better UX. sushi’s bento box would be a good ref <a href=\"https://github.com/sushiswap/bentobox/blob/master/contracts/BentoBox.sol\">BentoBox.sol</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/24\">dapp-whisperer (BadgerDAO) confirmed</a></strong></p>\n<h2 id=\"m-04-no-sanity-check-on-pricepershare-might-lead-to-lost-value\" style=\"position:relative;\"><a href=\"#m-04-no-sanity-check-on-pricepershare-might-lead-to-lost-value\" aria-label=\"m 04 no sanity check on pricepershare might lead to lost value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/68\">[M-04] No sanity check on <code>pricePerShare</code> might lead to lost value</a></h2>\n<p><em>Submitted by kenzo</em></p>\n<p><code>pricePerShare</code> is read either from an oracle or from ibBTC’s core.</p>\n<p>If one of these is bugged or exploited, there are no safety checks to prevent loss of funds.</p>\n<h4 id=\"impact-4\" style=\"position:relative;\"><a href=\"#impact-4\" aria-label=\"impact 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>As <code>pricePerShare</code> is used to calculate transfer amount, a bug or wrong data retuning a smaller <code>pricePerShare</code> than it really is, could result in drainage of wibbtc from Curve pool.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Curve’s swap and remove liquidity functions will both call wibbtc’s <code>transfer</code> function:</p>\n<ul>\n<li><a href=\"https://etherscan.io/address/0xFbdCA68601f835b27790D98bbb8eC7f05FDEaA9B#code%23L790\">https://etherscan.io/address/0xFbdCA68601f835b27790D98bbb8eC7f05FDEaA9B#code%23L790</a></li>\n<li><a href=\"https://etherscan.io/address/0xFbdCA68601f835b27790D98bbb8eC7f05FDEaA9B#code%23L831\">https://etherscan.io/address/0xFbdCA68601f835b27790D98bbb8eC7f05FDEaA9B#code%23L831</a></li>\n<li>The <code>transfer</code> function calculates the amount to send by calling <code>balanceToShares</code>: <a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L127\"><code>WrappedIbbtcEth.sol</code> L127</a></li>\n<li><code>balanceToShares</code> calculates the shares (=amount to send) by dividing in <code>pricePerShare</code>: <a href=\"https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L156\"><code>WrappedIbbtcEth.sol</code> L156</a></li>\n</ul>\n<p>Therefore, if due to a bug or exploit in ibBTC core / the trusted oracle <code>pricePerShare</code> is smaller than it really is, the amount that will be sent will grow larger. So Curve will send to the user/exploiter doing swap/remove liquidity more tokens that he deserves.</p>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Manual analysis, hardhat</p>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add sanity check:</p>\n<p><code>pricePerShare</code> should never decrease but only increase with time (as ibbtc accrues interest) (validated with DefiDollar team). This means that on every <code>pricePerShare</code> read/update, if the new <code>pricePerShare</code> is smaller than the current one, we can discard the update as bad data.</p>\n<p>This will prevent an exploiter from draining Curve pool’s wibbtc reserves by decreasing <code>pricePerShare</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/68\">dapp-whisperer (BadgerDAO) confirmed</a></strong></p>\n<h1 id=\"low-risk-findings-15\" style=\"position:relative;\"><a href=\"#low-risk-findings-15\" aria-label=\"low risk findings 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (15)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/62\">[L-01] The <code>value</code> parameter of the <code>Transfer</code> event is wrong</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/74\">[L-02] pendingGovernance and  Governace address can be same</a> <em>Submitted by JMukesh, also found by hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/83\">[L-03] use of depreciated “now” </a> <em>Submitted by JMukesh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/85\">[L-04] In <code>updatePricePerShare()</code> no value is returned</a> <em>Submitted by JMukesh, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/61\">[L-05] <code>updatePricePerShare</code> should be run atomically with <code>setCore()</code> to make sure <code>pricePerShare</code> is up-to-date with the new Core</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/64\">[L-06] Redundant use of <code>virtual</code></a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/40\">[L-07] <code>initialize</code> functions can be frontrun</a> <em>Submitted by cmichel, also found by pants, ych18, and defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/41\">[L-08] Missing parameter validation</a> <em>Submitted by cmichel, also found by jah, pants, and JMukesh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/42\">[L-09] Pending governance is not cleared</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/35\">[L-10] Add zero address validation in the setPendingGovernance function</a> <em>Submitted by defsec, also found by JMukesh</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/69\">[L-11] Deprecated Function Usage</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/70\">[L-12] PREVENT DIV BY 0</a> <em>Submitted by defsec, also found by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/11\">[L-13] use safeTransfer instead of transfer of ibbtc</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/76\">[L-14] Consider making contracts Pausable</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/26\">[L-15] Lack of <code>address(0)</code> check</a> <em>Submitted by pmerkleplant</em></li>\n</ul>\n<h1 id=\"non-critical-findings-12\" style=\"position:relative;\"><a href=\"#non-critical-findings-12\" aria-label=\"non critical findings 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (12)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/71\">[N-01] use of floating pragma</a> <em>Submitted by JMukesh, also found by loop and pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/49\">[N-02] Outdated compiler version</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/50\">[N-03] Outdated versions of OpenZeppelin library</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/52\">[N-04] Missing error messages in require statements</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/54\">[N-05] Inconsistent use of <code>_msgSender()</code></a> <em>Submitted by WatchPug, also found by ye0lde and hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/56\">[N-06] Consider removing <code>ICore.sol</code></a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/57\">[N-07] Constants are not explicitly declared</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/60\">[N-08] Critical changes should use two-step procedure</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/78\">[N-09]  modified _balances in OZ contract </a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/27\">[N-10] Remove unused functions in dependencys</a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/28\">[N-11] <code>WrappedIbbtc.sol</code> implements, but does not inherit, the <code>ICoreOracle</code> interface</a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/22\">[N-12] No Initial Ownership Event  (WrappedIbbtcEth.sol, WrappedIbbtcEth.sol)</a> <em>Submitted by ye0lde</em></li>\n</ul>\n<h1 id=\"gas-optimizations-16\" style=\"position:relative;\"><a href=\"#gas-optimizations-16\" aria-label=\"gas optimizations 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (16)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/48\">[G-01] Avoid unnecessary storage read can save gas</a> <em>Submitted by WatchPug, also found by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/51\">[G-02] Cache external call result in the stack can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/55\">[G-03] Consider caching <code>pricePerShare</code> for <code>WrappedIbbtc.sol</code> to save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/58\">[G-04] Avoid unnecessary external calls and storage writes can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/34\">[G-05] Upgrade pragma to at least 0.8.4</a> <em>Submitted by defsec, also found by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/45\">[G-06] Gas: Event parameters read from storage</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/19\">[G-07] Gas Optimization: Retrieve internal variables directly </a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/91\">[G-08] Use Minimal Interface for gas optimizations</a> <em>Submitted by hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/81\">[G-09] Immutable variable</a> <em>Submitted by pauliax, also found by pants and hack3r-0m</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/3\">[G-10] Gas Saving by changing the visibility of initialize function from public to external</a> <em>Submitted by jah, also found by WatchPug and loop</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/5\">[G-11] missing zero-address check </a> <em>Submitted by jah</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/46\">[G-12] Events are emitting storage vars instead of user/system values</a> <em>Submitted by kenzo</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/79\">[G-13] ICore import</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/80\">[G-14] onlyOracle never used</a> <em>Submitted by pauliax, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/82\">[G-15] Check if amount is not zero</a> <em>Submitted by pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-badgerdao-findings/issues/21\">[G-16] Use existing memory value of state variable (setPendingGovernance)</a> <em>Submitted by ye0lde</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-4\">High Risk Findings (4)</a></p>\n<ul>\n<li><a href=\"#h-01-the-design-of-wibbtc-is-not-fully-compatible-with-the-current-curve-stableswap-pool\">[H-01] The design of <code>wibBTC</code> is not fully compatible with the current Curve StableSwap pool</a></li>\n<li><a href=\"#h-02-approved-spender-can-spend-too-many-tokens\">[H-02] Approved spender can spend too many tokens</a></li>\n<li><a href=\"#h-03-wrappedibbtceth-contract-will-use-stalled-price-for-mintburn-if-updatepricepershare-wasnt-run-properly\">[H-03] <code>WrappedIbbtcEth</code> contract will use stalled price for mint/burn if <code>updatePricePerShare</code> wasn’t run properly</a></li>\n<li><a href=\"#h-04-wrappedibbtc-and-wrappedibbtceth-contracts-do-not-filter-out-price-feed-outliers\">[H-04] <code>WrappedIbbtc</code> and <code>WrappedIbbtcEth</code> contracts do not filter out price feed outliers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-4\">Medium Risk Findings (4)</a></p>\n<ul>\n<li><a href=\"#m-01-unable-to-transfer-wrappedibbtc-if-oracle-go-down\">[M-01] Unable to transfer <code>WrappedIbbtc</code> if Oracle go down</a></li>\n<li><a href=\"#m-02-null-check-in-pricepershare\">[M-02] Null check in <code>pricePerShare</code></a></li>\n<li><a href=\"#m-03-hard-to-clear-balance\">[M-03] hard to clear balance</a></li>\n<li><a href=\"#m-04-no-sanity-check-on-pricepershare-might-lead-to-lost-value\">[M-04] No sanity check on <code>pricePerShare</code> might lead to lost value</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-15\">Low Risk Findings (15)</a></li>\n<li><a href=\"#non-critical-findings-12\">Non-Critical Findings (12)</a></li>\n<li><a href=\"#gas-optimizations-16\">Gas Optimizations (16)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of the BadgerDAO ibBTC Wrapper smart contract system written in Solidity. The code contest took place between October 28—October 30 2021.\n\n## Wardens\n\n20 Wardens contributed reports to the BadgerDAO ibBTC Wrapper contest:\n\n1. hyh\n2. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n3. [gzeon](https://twitter.com/gzeon)\n4. [jonah1005](https://twitter.com/jonah1005w)\n5. [kenzo](https://twitter.com/KenzoAgada)\n6. [cmichel](https://twitter.com/cmichelio)\n7. [defsec](https://twitter.com/defsec_)\n8. [hack3r-0m](https://twitter.com/hack3r_0m)\n9. [JMukesh](https://twitter.com/MukeshJ_eth)\n10. [pauliax](https://twitter.com/SolidityDev)\n11. pants\n12. TomFrench\n13. [pmerkleplant](https://twitter.com/merkleplant_eth)\n14. [loop](https://twitter.com/loop_225)\n15. [gpersoon](https://twitter.com/gpersoon)\n16. [leastwood](https://twitter.com/liam_eastwood13)\n17. [jah](https://twitter.com/jah_s3)\n18. [ye0lde](https://twitter.com/_ye0lde)\n19. [ych18](https://www.linkedin.com/in/yahia-chaabane/)\n\nThis contest was judged by [leastwood](https://twitter.com/liam_eastwood13).\n\nFinal report assembled by [moneylegobatman](https://twitter.com/money_lego) and [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 23 unique vulnerabilities and 51 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 4 received a risk rating in the category of HIGH severity, 4 received a risk rating in the category of MEDIUM severity, and 15 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 12 non-critical recommendations and 16 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 BadgerDAO ibBTC Wrapper contest repository](https://github.com/code-423n4/2021-10-badgerdao), and is composed of 90 smart contracts written in the Solidity programming language and includes 7479 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (4)\n\n## [[H-01] The design of `wibBTC` is not fully compatible with the current Curve StableSwap pool](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/65)\n_Submitted by WatchPug, also found by gzeon_\n\nPer the documentation, `wibBTC` is designed for a Curve StableSwap pool. However, the design of `wibBTC` makes the balances change dynamically and automatically. This is unusual for an ERC20 token, and it's not fully compatible with the current Curve StableSwap pool.\n\nSpecifically, a Curve StableSwap pool will maintain the balances of its `coins` based on the amount of tokens added, removed, and exchanged each time. In another word, it can not adopt the dynamic changes of the balances that happened automatically.\n\nThe pool's actual dynamic balance of `wibBTC` will deviate from the recorded balance in the pool contract as the `pricePerShare` increases.\n\nFurthermore, there is no such way in Curve StableSwap similar to the `sync()` function of UNI v2, which will force sync the stored `reserves` to match the balances.\n\n##### PoC\nGiven:\n\n*   The current `pricePerShare` is: `1`;\n*   The Curve pool is newly created with 0 liquidity;\n\n1.  Alice added `100 wibBTC` and `100 wBTC` to the Curve pool; Alice holds 100% of the pool;\n2.  After 1 month with no activity (no other users, no trading), and the `pricePerShare` of `ibBTC` increases to `1.2`;\n3.  Alice removes all the liquidity from the Curve pool.\n\nWhile it's expected to receive `150 wibBTC` and `100 wBTC`, Alice actually can only receive `100 wibBTC` and `100 wBTC`.\n\n#### Recommended Mitigation Steps\nConsider creating a revised version of the Curve StableSwap contract that can handle dynamic balances properly.\n\n**[dapp-whisperer (BadgerDAO) confirmed](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/65#issuecomment-963668495):**\n > We will be creating a custom pool that takes this into account based on the rate_multiplier variable on the MetaPools.\n> * [Draft implementation](https://github.com/shuklaayush/ibbtc-curve-zap/commit/36f5900bb276a61a2f85425f496c1ba99c1ddd7c)\n\n## [[H-02] Approved spender can spend too many tokens](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/43)\n_Submitted by cmichel, also found by WatchPug, jonah1005, gzeon, and TomFrench_\nThe `approve` function has not been overridden and therefore uses the internal *shares*, whereas `transfer(From)` uses the rebalanced amount.\n\n#### Impact\nThe approved spender may spend more tokens than desired. In fact, the approved amount that can be transferred keeps growing with `pricePerShare`.\n\nMany contracts also use the same amount for the `approve` call as for the amount they want to have transferred in a subsequent `transferFrom` call, and in this case, they approve an amount that is too large (as the approved `shares` amount yields a higher rebalanced amount).\n\n#### Recommended Mitigation Steps\n\nThe `_allowances` field should track the rebalanced amounts such that the approval value does not grow. (This does not actually require overriding the `approve` function.)\nIn `transferFrom`, the approvals should then be subtracted by the *transferred* `amount`, not the `amountInShares`:\n\n```solidity\n// _allowances are in rebalanced amounts such that they don't grow\n// need to subtract the transferred amount\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n```\n\n**[tabshaikh (Badger) confirmed and resolved](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/43#issuecomment-957197908):**\n > Fix here: https://github.com/Badger-Finance/rebasing-ibbtc/pull/7\n\n## [[H-03] `WrappedIbbtcEth` contract will use stalled price for mint/burn if `updatePricePerShare` wasn't run properly](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/86)\n_Submitted by hyh, also found by cmichel, gpersoon, leastwood, hack3r-0m, kenzo, WatchPug, and loop_\n\n#### Impact\n\nMalicious user can monitor `SetPricePerShare` event and, if it was run long enough time ago and market moved, but, since there were no `SetPricePerShare` fired, the contract's `pricePerShare` is outdated, so a user can `mint()` with `pricePerShare` that is current for contract, but outdated for market, then wait for price update and `burn()` with updated `pricePerShare`, yielding risk-free profit at expense of contract holdings.\n\n#### Proof of Concept\n\n`WrappedIbbtcEth` updates `pricePerShare` variable by externally run `updatePricePerShare` function. The variable is then used in mint/burn/transfer functions without any additional checks, even if outdated/stalled. This can happen if the external function wasn't run for any reason.\nThe variable is used via `balanceToShares` function: [`WrappedIbbtcEth.sol` L155](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L155)\n\n\nThis is feasible as `updatePricePerShare` to be run by off-chain script being a part of the system, and malfunction of this script leads to contract exposure by stalling the price. The malfunction can happen both by internal reasons (bugs) and by external ones (any system-level dependencies, network outrages).\n`updatePricePerShare` function: [`WrappedIbbtcEth.sol` L72](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L72)\n\n#### Recommended Mitigation Steps\nThe risk comes with system design. Wrapping price updates with contract level variable for gas costs minimization is a viable approach, but it needs to be paired with corner cases handling. One of the ways to reduce the risk is as follows:\n\nIntroduce a threshold variable for maximum time elapsed since last `pricePerShare` update to `WrappedIbbtcEth` contract.\n\nThen 2 variants of `transferFrom` and `transfer` functions can be introduced, both check condition {now - time since last price update < threshold}. If condition holds both variants, do the transfer. If it doesn't, then the first variant reverts, while the second do costly price update.\nI.e. it will be cheap transfer (that works only if price is recent) and full transfer (that is similar to the first when price is recent, but do price update on its own when price is stalled). This way, this full transfer is guaranteed to run and is usually cheap, costing more if price is stalled and it does the update.\n\nAfter this, whenever scheduled price update malfunctions (for example because of network conditions), the risk will be limited by market volatility during threshold time at maximum, i.e. capped.\n\nSee [issue page](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/86) for example code:\n\n**[dapp-whisperer (BadgerDAO) confirmed](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/86#issuecomment-962180704):**\n > Agreed, appreciate the thorough breakdown. We will add a \"max staleness\" to the ppfs update.\n>\n> I do see some merit in the idea of \"updating when needed\" at expense of the next user, but due to interface considerations we'd like to keep that consistent for users. In practice, we will run a bot to ensure timely updates.\n>\n> The pps updates are small and infrequent.\n\n## [[H-04] `WrappedIbbtc` and `WrappedIbbtcEth` contracts do not filter out price feed outliers](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/87)\n_Submitted by hyh_\n\n#### Impact\nIf price feed is manipulated in any way or there is any malfunction based volatility on the market, both contracts will pass it on a user.\nIn the same time it's possible to construct mitigation mechanics for such cases, so user economics would be affected by sustainable price movements only.\nAs price outrages provide a substantial attack surface for the project it's worth adding some complexity to the implementation.\n\n#### Proof of Concept\nIn `WrappedIbbtcEth` `pricePerShare` variable is updated by externally run `updatePricePerShare` function ([WrappedIbbtcEth.sol L72](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L72)), and then used in mint/burn/transfer functions without additional checks via `balanceToShares` function: [`WrappedIbbtcEth.sol` L155](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L155)\n\nIn `WrappedIbbtc` price is requested via `pricePerShare` function([`WrappedIbbtc.sol` L123](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L123)), and used in the same way without additional checks via `balanceToShares` [function](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L147).\n\n#### Recommended Mitigation Steps\nIntroduce a minting/burning query that runs on a schedule, separating user funds contribution and actual mint/burn. With user deposit or burn, the corresponding action to be added to commitment query, which execution for mint or redeem will later be sparked by off-chain script according to fixed schedule.\nThis also can be open to public execution with gas compensation incentive, for example as it's done in Tracer protocol: [`PoolKeeper.sol` L131](https://github.com/tracer-protocol/perpetual-pools-contracts/blob/develop/contracts/implementation/PoolKeeper.sol#L131)\n\nFull code of an implementation is too big to include in the report, but viable versions are available publicly (Tracer protocol version can be found at the same repo, [`implementation/PoolCommitter` sol](https://github.com/tracer-protocol/perpetual-pools-contracts/blob/develop/contracts/implementation/PoolCommitter.sol)\n).\n\nOnce the scheduled mint/redeem query is added, the additional logic to control for price outliers will become possible there, as in this case mint/redeem execution can be conditioned to happen on calm market only, where various definitions of calm can be implemented.\nOne of the approaches is to keep track of recent prices and require that new price each time be within a threshold from median of their array.\n\nExample:\n```solidity\n// Introduce small price tracking arrays:\nuint256\\[] private times;\nuint256\\[] private prices;\n\n// Current position in array\nuint8 curPos;\n\n// Current length, grows from 0 to totalMaxPos as prices are being added\nuint8 curMaxPos;\n\n// Maximum length, we track up to totalMaxPos prices\nuint8 totalMaxPos = 10;\n\n// Price movement threshold\nuint256 moveThreshold = 0.1\\*1e18;\n```\n\nWe omit the full implementation here as it is lengthy enough and can vary.\nThe key steps are:\n*   Run query for scheduled mint/redeem with logic: if next price is greater than median of currently recorded prices by threshold, add it to the records, but do not mint/redeem.\n*   That is, when scheduled mint/redeem is run, on new price request, WrappedIbbtcEth.core.pricePerShare() or WrappedIbbtc.oracle.pricePerShare(), get newPrice and calculate current price array median, curMed\n*   prices\\[curPos] = newPrice\n*   if (curMaxPos < totalMaxPos) {curMaxPos += 1}\n*   if (curPos == curMaxPos) {curPos = 0} else {curPos += 1}\n*   if (absolute_value_of(newPrice - curMed) < moveThreshold \\* curMed / 1e18) {do_mint/redeem; return\\_0\\_status}\n*   else {return\\_1\\_status}\n\nSchedule should be frequent enough, say once per 30 minutes, which is kept while returned status is 0. While threshold condition isn't met and returned status is 1, it runs once per 10 minutes. The parameters here are subject to calibration.\n\nThis way if the price movement is sustained the mint/redeem happens after price array median comes to a new equilibrium. If price reverts, the outbreak will not have material effect mint/burn operations. This way the contract vulnerability is considerably reduced as attacker would need to keep distorted price for period long enough, which will happen after the first part of deposit/withdraw cycle. I.e. deposit and mint, burn and redeem operations will happen not simultaneously, preventing flash loans to be used to elevate the quantities, and for price to be effectively distorted it would be needed to keep it so for substantial amount of time.\n\n**[dapp-whisperer (BadgerDAO) confirmed](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/87#issuecomment-958145768):**\n > Minting and burning happens atomically within larger function calls and our current approach isn't amenable to this change.\n\n# Medium Risk Findings (4)\n\n## [[M-01] Unable to transfer `WrappedIbbtc` if Oracle go down](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/20)\n_Submitted by gzeon_\n\n#### Impact\nIn `WrappedIbbtc`, user will not be able to transfer if `oracle.pricePerShare()` (L124) revert. This is because `balanceToShares()` is called in both transfer and `transferFrom`, which included a call to `pricePerShare()`.\n\nIf this is the expected behavior, note that `WrappedIbbtcEth` is behaving the opposite as it uses the cached value in a local variable `pricePerShare`, which is only updated upon call to `updatePricePerShare()`.\n\n#### Recommended Mitigation Steps\nDepending on the specification, one of them need to be changed.\n\n**[dapp-whisperer (BadgerDAO) confirmed](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/20)**\n\n## [[M-02] Null check in `pricePerShare`](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/90)\n_Submitted by hack3r-0m, also found by defsec_\n\n oracle can `0` as a price of the share, in that case, 0 will be the denominator in some calculations which can cause reverts from SafeMath (for e.g here: [`WrappedIbbtc.sol` L148](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L148)) resulting in Denial Of Service.\n\n- [`WrappedIbbtcEth.sol` L73](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L73)\n- [`WrappedIbbtc.sol` L123](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L123)\n\n\n#### Recommended Mitigation Steps\nAdd a null check to ensure that on every update, the price is greater than 0.\n\n**[dapp-whisperer (BadgerDAO) confirmed](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/90#issuecomment-962178554):**\n > Agreed. we will implicitly or explicitly add this check.\n\n## [[M-03] hard to clear balance](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/24)\n_Submitted by jonah1005_\n\nThe contract does not allow users to transfer by share. Therefore, It is hard for users to clear out all the shares.\nThere will be users using this token with Metamask and it is likely the `pricePerShare` would increase after the user sends transactions. I consider this is a medium-risk issue.\n\n#### Proof of Concept\n[WrappedIbbtc.sol#L110-L118](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtc.sol#L110-L118)\n\n#### Recommended Mitigation Steps\nA new `transferShares` beside the original `transfer()` would build a better UX. sushi's bento box would be a good ref [BentoBox.sol](https://github.com/sushiswap/bentobox/blob/master/contracts/BentoBox.sol)\n\n**[dapp-whisperer (BadgerDAO) confirmed](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/24)**\n\n## [[M-04] No sanity check on `pricePerShare` might lead to lost value](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/68)\n_Submitted by kenzo_\n\n`pricePerShare` is read either from an oracle or from ibBTC's core.\n\nIf one of these is bugged or exploited, there are no safety checks to prevent loss of funds.\n\n#### Impact\nAs `pricePerShare` is used to calculate transfer amount, a bug or wrong data retuning a smaller `pricePerShare` than it really is, could result in drainage of wibbtc from Curve pool.\n\n#### Proof of Concept\nCurve's swap and remove liquidity functions will both call wibbtc's `transfer` function:\n- https://etherscan.io/address/0xFbdCA68601f835b27790D98bbb8eC7f05FDEaA9B#code%23L790\n- https://etherscan.io/address/0xFbdCA68601f835b27790D98bbb8eC7f05FDEaA9B#code%23L831\n- The `transfer` function calculates the amount to send by calling `balanceToShares`: [`WrappedIbbtcEth.sol` L127](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L127)\n- `balanceToShares` calculates the shares (=amount to send) by dividing in `pricePerShare`: [`WrappedIbbtcEth.sol` L156](https://github.com/code-423n4/2021-10-badgerdao/blob/main/contracts/WrappedIbbtcEth.sol#L156)\n\nTherefore, if due to a bug or exploit in ibBTC core / the trusted oracle `pricePerShare` is smaller than it really is, the amount that will be sent will grow larger. So Curve will send to the user/exploiter doing swap/remove liquidity more tokens that he deserves.\n\n#### Tools Used\nManual analysis, hardhat\n\n#### Recommended Mitigation Steps\nAdd sanity check:\n\n`pricePerShare` should never decrease but only increase with time (as ibbtc accrues interest) (validated with DefiDollar team). This means that on every `pricePerShare` read/update, if the new `pricePerShare` is smaller than the current one, we can discard the update as bad data.\n\nThis will prevent an exploiter from draining Curve pool's wibbtc reserves by decreasing `pricePerShare`.\n\n**[dapp-whisperer (BadgerDAO) confirmed](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/68)**\n\n# Low Risk Findings (15)\n- [[L-01] The `value` parameter of the `Transfer` event is wrong](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/62) _Submitted by WatchPug_\n- [[L-02] pendingGovernance and  Governace address can be same](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/74) _Submitted by JMukesh, also found by hack3r-0m_\n- [[L-03] use of depreciated \"now\" ](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/83) _Submitted by JMukesh_\n- [[L-04] In `updatePricePerShare()` no value is returned](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/85) _Submitted by JMukesh, also found by pauliax_\n- [[L-05] `updatePricePerShare` should be run atomically with `setCore()` to make sure `pricePerShare` is up-to-date with the new Core](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/61) _Submitted by WatchPug_\n- [[L-06] Redundant use of `virtual`](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/64) _Submitted by WatchPug_\n- [[L-07] `initialize` functions can be frontrun](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/40) _Submitted by cmichel, also found by pants, ych18, and defsec_\n- [[L-08] Missing parameter validation](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/41) _Submitted by cmichel, also found by jah, pants, and JMukesh_\n- [[L-09] Pending governance is not cleared](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/42) _Submitted by cmichel_\n- [[L-10] Add zero address validation in the setPendingGovernance function](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/35) _Submitted by defsec, also found by JMukesh_\n- [[L-11] Deprecated Function Usage](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/69) _Submitted by defsec_\n- [[L-12] PREVENT DIV BY 0](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/70) _Submitted by defsec, also found by pauliax_\n- [[L-13] use safeTransfer instead of transfer of ibbtc](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/11) _Submitted by pants_\n- [[L-14] Consider making contracts Pausable](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/76) _Submitted by pauliax_\n- [[L-15] Lack of `address(0)` check](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/26) _Submitted by pmerkleplant_\n\n# Non-Critical Findings (12)\n- [[N-01] use of floating pragma](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/71) _Submitted by JMukesh, also found by loop and pants_\n- [[N-02] Outdated compiler version](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/49) _Submitted by WatchPug_\n- [[N-03] Outdated versions of OpenZeppelin library](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/50) _Submitted by WatchPug_\n- [[N-04] Missing error messages in require statements](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/52) _Submitted by WatchPug_\n- [[N-05] Inconsistent use of `_msgSender()`](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/54) _Submitted by WatchPug, also found by ye0lde and hack3r-0m_\n- [[N-06] Consider removing `ICore.sol`](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/56) _Submitted by WatchPug_\n- [[N-07] Constants are not explicitly declared](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/57) _Submitted by WatchPug_\n- [[N-08] Critical changes should use two-step procedure](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/60) _Submitted by WatchPug_\n- [[N-09]  modified _balances in OZ contract ](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/78) _Submitted by pauliax_\n- [[N-10] Remove unused functions in dependencys](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/27) _Submitted by pmerkleplant_\n- [[N-11] `WrappedIbbtc.sol` implements, but does not inherit, the `ICoreOracle` interface](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/28) _Submitted by pmerkleplant_\n- [[N-12] No Initial Ownership Event  (WrappedIbbtcEth.sol, WrappedIbbtcEth.sol)](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/22) _Submitted by ye0lde_\n\n# Gas Optimizations (16)\n- [[G-01] Avoid unnecessary storage read can save gas](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/48) _Submitted by WatchPug, also found by pants_\n- [[G-02] Cache external call result in the stack can save gas](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/51) _Submitted by WatchPug_\n- [[G-03] Consider caching `pricePerShare` for `WrappedIbbtc.sol` to save gas](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/55) _Submitted by WatchPug_\n- [[G-04] Avoid unnecessary external calls and storage writes can save gas](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/58) _Submitted by WatchPug_\n- [[G-05] Upgrade pragma to at least 0.8.4](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/34) _Submitted by defsec, also found by cmichel_\n- [[G-06] Gas: Event parameters read from storage](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/45) _Submitted by cmichel_\n- [[G-07] Gas Optimization: Retrieve internal variables directly ](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/19) _Submitted by gzeon_\n- [[G-08] Use Minimal Interface for gas optimizations](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/91) _Submitted by hack3r-0m_\n- [[G-09] Immutable variable](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/81) _Submitted by pauliax, also found by pants and hack3r-0m_\n- [[G-10] Gas Saving by changing the visibility of initialize function from public to external](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/3) _Submitted by jah, also found by WatchPug and loop_\n- [[G-11] missing zero-address check ](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/5) _Submitted by jah_\n- [[G-12] Events are emitting storage vars instead of user/system values](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/46) _Submitted by kenzo_\n- [[G-13] ICore import](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/79) _Submitted by pauliax_\n- [[G-14] onlyOracle never used](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/80) _Submitted by pauliax, also found by WatchPug_\n- [[G-15] Check if amount is not zero](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/82) _Submitted by pauliax_\n- [[G-16] Use existing memory value of state variable (setPendingGovernance)](https://github.com/code-423n4/2021-10-badgerdao-findings/issues/21) _Submitted by ye0lde_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}