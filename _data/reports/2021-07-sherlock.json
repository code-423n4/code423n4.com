{
  "circa": {
    "title": "Sherlock",
    "sponsor": "Sherlock",
    "slug": "2021-07-sherlock",
    "date": "2021-09-16",
    "findings": "https://github.com/code-423n4/2021-07-sherlock-findings/issues",
    "contest": 21
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of the Sherlock smart contract system written in Solidity. The code contest took place between July 21—July 28.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>14 Wardens contributed reports to the Sherlock code contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://github.com/x9453\">shw</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/JoranHonig\">walker</a></li>\n<li><a href=\"https://twitter.com/_hrkrshnn\">hrkrshnn</a></li>\n<li><a href=\"https://twitter.com/jonah1005w\">jonah1005</a></li>\n<li><a href=\"https://twitter.com/HickupH\">hickuphh3</a></li>\n<li><a href=\"https://twitter.com/eriksal1217\">eriksal1217</a></li>\n<li><a href=\"https://twitter.com/patitonar\">patitonar</a></li>\n<li><a href=\"https://github.com/0xsanson\">0xsanson</a></li>\n<li><a href=\"https://twitter.com/Tensors8\">tensors</a></li>\n<li><a href=\"https://twitter.com/a_delamo\">a_delamo</a></li>\n<li><a href=\"https://github.com/bernard-wagner\">bw</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/ghoulsol\">ghoul.sol</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/money_lego\">moneylegobatman</a> and <a href=\"https://twitter.com/_ninek_\">ninek</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 37 unique vulnerabilities. All of the issues presented here are linked back to their original finding</p>\n<p>Of these vulnerabilities, 2 received a risk rating in the category of HIGH severity, 4 received a risk rating in the category of MEDIUM severity, and 31 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 19 non-critical recommendations and 36 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-07-sherlock\">C4 Sherlock code contest repository</a> which is comprised of 50 smart contracts written in the Solidity programming language and includes 3,063 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-2\" style=\"position:relative;\"><a href=\"#high-risk-findings-2\" aria-label=\"high risk findings 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (2)</h1>\n<h2 id=\"h-01-single-under-funded-protocol-can-break-paying-off-debt\" style=\"position:relative;\"><a href=\"#h-01-single-under-funded-protocol-can-break-paying-off-debt\" aria-label=\"h 01 single under funded protocol can break paying off debt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/119\">[H-01] Single under-funded protocol can break paying off debt</a></h2>\n<p><em>Submitted by cmichel, also found by walker and gpersoon</em></p>\n<p>The <code>SherXERC20.payOffDebtAll</code> function iterates over all protocols of the token.\nIf <em>a single project</em> does not have enough funds to cover the premium payments, the transactions come to a halt, see <code>_payOffDebt</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">debt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_accruedDebt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_protocol</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_blocks</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// this can revert tx</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">protocolBalance</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_protocol</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">protocolBalance</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_protocol</span><span class=\"mtk1\">].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">debt</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Many core functions require paying off debt first and can therefore revert when a single protocol cannot pay the token premium:</p>\n<ul>\n<li><code>setTokenPrice</code></li>\n<li><code>setProtocolPremium</code></li>\n<li><code>withdrawProtocolBalance</code></li>\n<li><code>redeem</code></li>\n<li>etc.</li>\n</ul>\n<p>This scenario that a protocol is unable to pay a premium does not seem unlikely especially as there can be many protocols and each protocol can pay premiums in potentially many tokens and have to continuously re-deposit to their account to increase the balance.\nIt is also rather involved to remove the protocol’s coverage and remove the premium payments for the token. It requires governance interaction and potentially paying for the accumulated debt themselves.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/119#issuecomment-889143141\">Evert0x (Sherlock) acknowledged</a>:</strong></p>\n<blockquote>\n<p>This was a design tradeoff. As governance we can see it coming as the balance is slowly draining. But the fact the protocols are able to withdraw the full amount at any time could surprise the governance. (and make the reverts in the functions above happening)</p>\n<p>We are thinking to add a rule in the <code>withdrawProtocolBalance</code> to only allow withdrawals with at least 2 days of remaining balance. Allowing enough time for governance calls to remove the protocol.</p>\n</blockquote>\n<h2 id=\"h-02-bug-a-critical-bug-in-bps-function\" style=\"position:relative;\"><a href=\"#h-02-bug-a-critical-bug-in-bps-function\" aria-label=\"h 02 bug a critical bug in bps function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/90\">[H-02] [Bug] A critical bug in <code>bps</code> function</a></h2>\n<p><em>Submitted by hrkrshnn, also found by jonah1005 and walker</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">bps</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rt</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// These fields are not accessible from assembly</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">array</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// solhint-disable-next-line no-inline-assembly</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    rt := </span><span class=\"mtk11\">and</span><span class=\"mtk1\">(</span><span class=\"mtk11\">mload</span><span class=\"mtk1\">(</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">array</span><span class=\"mtk1\">, </span><span class=\"mtk12\">index</span><span class=\"mtk1\">)), </span><span class=\"mtk7\">0xffffffffffffffffffffffffffffffffffffffff</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The above function is designed to expect the token at the end of <code>calldata</code>, but a malicious user can inject extra values at the end of <code>calldata</code> and fake return values.</p>\n<p>The following contract demonstrates an example:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">6</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IERC20</span><span class=\"mtk1\"> {}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">error</span><span class=\"mtk1\"> </span><span class=\"mtk11\">StaticCallFailed</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">BadEncoding</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">/// Will return address(1). But address(0) is expected!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">f</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">actual</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">injected</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ret</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk11\">staticcall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">g</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">actual</span><span class=\"mtk1\">, </span><span class=\"mtk12\">injected</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">success</span><span class=\"mtk1\">) </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">StaticCallFailed</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ret</span><span class=\"mtk1\">, (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">g</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// to get rid of the unused warning</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Does it always match _token?</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">bps</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// From Sherlock Protocol: PoolBase.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">bps</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rt</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// These fields are not accessible from assembly</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">array</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">index</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">data</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// solhint-disable-next-line no-inline-assembly</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">assembly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      rt := </span><span class=\"mtk11\">and</span><span class=\"mtk1\">(</span><span class=\"mtk11\">mload</span><span class=\"mtk1\">(</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">array</span><span class=\"mtk1\">, </span><span class=\"mtk12\">index</span><span class=\"mtk1\">)), </span><span class=\"mtk7\">0xffffffffffffffffffffffffffffffffffffffff</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>This example can be used to exploit the protocol:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unstake</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_id</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">PoolStorage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Base</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ps</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">baseData</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;RECEIVER&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">GovStorage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Base</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">gs</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">GovStorage</span><span class=\"mtk1\">.</span><span class=\"mtk11\">gs</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">PoolStorage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">UnstakeEntry</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">withdraw</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unstakeEntries</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_id</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">withdraw</span><span class=\"mtk1\">.</span><span class=\"mtk12\">blockInitiated</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;WITHDRAW_NOT_ACTIVE&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// period is including</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">withdraw</span><span class=\"mtk1\">.</span><span class=\"mtk12\">blockInitiated</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">gs</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unstakeCooldown</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk11\">uint40</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;COOLDOWN_ACTIVE&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">withdraw</span><span class=\"mtk1\">.</span><span class=\"mtk12\">blockInitiated</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">gs</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unstakeCooldown</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">gs</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unstakeWindow</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk11\">uint40</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&#39;UNSTAKE_WINDOW_EXPIRED&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">withdraw</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LibPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stakeBalance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lockToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unstakeEntries</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_id</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lockToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">withdraw</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lock</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>State token <code>Token1</code>. Let’s say there is a more expensive token\n<code>Token2</code>.</p>\n<p>Here’s an example exploit:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">exploitPayload</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSignature</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">PoolBase</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unstake</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  (</span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_id</span><span class=\"mtk1\">), </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">), </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Token2</span><span class=\"mtk1\">), </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Token1</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">poolAddress</span><span class=\"mtk1\">.</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">exploitPayload</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>All the calculations on <code>ps</code> would be done on <code>Token2</code>, but at the end, because of, <code>_token.safeTransfer(_receiver, amount);</code>, <code>Token2</code> would be transferred. Assuming that <code>Token2</code> is more expensive than <code>Token1</code>, the attacker makes a profit.</p>\n<p>Similarly, the same technique can be used at a lot of other places. Even if this exploit is not profitable, the fact that the computations can be done on two different tokens is buggy.</p>\n<p>There are several other places where the same pattern is used. All of them needs to be fixed. I’ve not written an exhaustive list.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/90\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h1 id=\"medium-risk-findings-4\" style=\"position:relative;\"><a href=\"#medium-risk-findings-4\" aria-label=\"medium risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (4)</h1>\n<h2 id=\"m-01-incorrect-internal-balance-bookkeeping\" style=\"position:relative;\"><a href=\"#m-01-incorrect-internal-balance-bookkeeping\" aria-label=\"m 01 incorrect internal balance bookkeeping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/12\">[M-01] Incorrect internal balance bookkeeping</a></h2>\n<p><em>Submitted by walker, also found by cmichel and shw</em></p>\n<p>The sherlock smart contract system uses internal bookkeeping of arbitrary ERC20 token balances. It doesn’t assert that the ERC20 doesn’t implement some non-standard behavior. For example, deflationary tokens, or tokens with a transfer fee, will result in incorrect internal balances. In summary, an attacker can perform stake and deposit actions without actually depositing the amount that sherlock assumes. As a result, an attacker is unduly rewarded balance and yield.</p>\n<blockquote>\n<p>Balancer had a similar vulnerability in their system <a href=\"https://blog.1inch.io/balancer-hack-2020-a8f7131c980e\">https://blog.1inch.io/balancer-hack-2020-a8f7131c980e</a>.</p>\n</blockquote>\n<p>An example location where such internal bookkeeping happens can be found <a href=\"https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/PoolBase.sol#L271\">here</a></p>\n<p>Mitigating the issue is possible by requiring the amount to be added to the contracts’ balance. Alternatively, it’s possible to update the pool based on actual balance changes.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/12#issuecomment-890312115\">Evert0x (Sherlock) acknowledged and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>2 med-risk, as extensive research will be done before adding certain tokens. This finding could even be noted a 0 non-critical if only ‘standard’ ERC20s are being used.</p>\n<p>med-risk because certain popular tokens are up-gradable and could potentially implement non-standard behavior</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/12#issuecomment-907912401\">ghoul-sol (judge) commented</a>:</strong></p>\n<blockquote>\n<p>since there will be a curation process, I agree with sponsor, this is medium risk</p>\n</blockquote>\n<h2 id=\"m-02-_dosherx-optimistically-assumes-premiums-will-be-paid\" style=\"position:relative;\"><a href=\"#m-02-_dosherx-optimistically-assumes-premiums-will-be-paid\" aria-label=\"m 02 _dosherx optimistically assumes premiums will be paid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/107\">[M-02] <code>_doSherX</code> optimistically assumes premiums will be paid</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>_doSherX</code> function does not attempt to pay off the accrued premiums (“pay off debt”) for most tokens, only for the ones that would otherwise revert the tx:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Expensive operation, only execute to prevent tx reverts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] &gt; </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sherXUnderlying</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">LibPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">payOffDebtAll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The <code>amounts = LibSherX.calcUnderlying(totalSherX)</code> array is an optimistic view assuming all outstanding, accrued premiums would indeed be paid until now. However, it could be that a protocol does not have enough balance to pay out these premiums and updating the state using <code>LibPool.payOffDebtAll(tokens[i]);</code> would fail for a token.</p>\n<p>An inflated amount is then paid out to the user based on the optimistic <code>calcUnderlying</code> call.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/107#issuecomment-889148550\">Evert0x (Sherlock) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Fair point, the protocol is optimistic the protocols can payoff their debt.</p>\n</blockquote>\n<h2 id=\"m-03-reputation-risks-with-updatesolution\" style=\"position:relative;\"><a href=\"#m-03-reputation-risks-with-updatesolution\" aria-label=\"m 03 reputation risks with updatesolution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/4\">[M-03] reputation risks with <code>updateSolution</code></a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p><code>GovDev.so</code>l has a function <code>updateSolution</code> to upgrade parts of the contract via the Diamond construction.\nVia <code>updateSolution</code>, any functionality can be changed and all the funds can be accessed/rugged.\nEven if this is well intended the project could still be called out resulting in a reputation risk, see for [example(<a href=\"https://twitter.com/RugDocIO/status/1411732108029181960\">https://twitter.com/RugDocIO/status/1411732108029181960</a>).</p>\n<p>Note: there is a function <code>transferGovDev</code> which can be used to disable the <code>updateSolution</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"25\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"26\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateSolution</span><span class=\"mtk1\">(IDiamondCut.FacetCut[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_diamondCut</span><span class=\"mtk1\">,</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_init</span><span class=\"mtk1\">,</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_calldata</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"27\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">LibDiamond</span><span class=\"mtk1\">.</span><span class=\"mtk11\">contractOwner</span><span class=\"mtk1\">(), </span><span class=\"mtk8\">&#39;NOT_DEV&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"28\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LibDiamond</span><span class=\"mtk1\">.</span><span class=\"mtk11\">diamondCut</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_diamondCut</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_init</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_calldata</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"29\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend applying extra safeguards for example to limit the time period where <code>updateSolution</code> can be used.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/4#issuecomment-889940845\">Evert0x (Sherlock) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Fair point, although we are not anonymous, we still want to mitigate this risk.</p>\n<p>I’m thinking something like this</p>\n<ul>\n<li>update is pushed, everyone can review the code changes</li>\n<li>14 days of waiting, people are able to get their funds out</li>\n<li>update is executed.</li>\n</ul>\n<p>Downside is that it doesn’t allow us to fix potential critical issues fast.</p>\n</blockquote>\n<h2 id=\"m-04-yield-distribution-after-large-payout-seems-unfair\" style=\"position:relative;\"><a href=\"#m-04-yield-distribution-after-large-payout-seems-unfair\" aria-label=\"m 04 yield distribution after large payout seems unfair permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/50\">[M-04] Yield distribution after large payout seems unfair</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>When a large payout occurs, it will lower <code>unallocatedSherX</code>. This could mean some parties might not be able to get their Yield.</p>\n<p>The first couple of users (for which harvest is called or which transfer tokens) will be able to get their full Yield, until the moment <code>unallocatedSherX</code> is depleted. The next users don’t get any yield at all. This doesn’t seem fair.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"309\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"310\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">doYield</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ILock</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"311\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"312\"></span><span class=\"grvsc-source\"><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unallocatedSherX</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unallocatedSherX</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">withdrawable_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"313\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"108\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"109\"></span><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payout</span><span class=\"mtk1\">( </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_payout</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_firstMoneyOut</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amounts</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_unallocatedSherX</span><span class=\"mtk1\">,  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_exclude</span><span class=\"mtk1\"> ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyGovPayout</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"110\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// all pools (including SherX pool) can be deducted fmo and balance</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"111\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// deducting balance will reduce the users underlying value of stake token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"112\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// for every pool, _unallocatedSherX can be deducted, this will decrease outstanding SherX rewards</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"113\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// for users that did not claim them (e.g materialized them and included in SherX pool)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"114\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">....</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"115\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Subtract from unallocated, as the tokens are now allocated to this payout call</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"116\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unallocatedSherX</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unallocatedSherX</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">unallocatedSherX</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Recommend that If <code>unallocatedSherX</code> is insufficient to provide for all the yields, only give the yields partly (so that each user gets their fair share).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/50#issuecomment-889996060\">Evert0x (Sherlock) disputed</a>:</strong></p>\n<blockquote>\n<p>Not only <code>unallocatedSherX</code> is subtracted but also <code>sWeight</code>, which is used to calculate the reward. I wrote some extra tests and in my experience the remaining SherX (in the unallocatedSherX variable) is splitted in a fair way.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/50#issuecomment-891724441\">Evert0x (Sherlock) confirmed</a>:</strong></p>\n<blockquote>\n<p>Together with gpersoon I discussed both issue #49 and #50 and based on both findings we found a med-risk issue. In case <code>payout()</code> is called with <code>_unallocatedSherX > 0</code> and a user called <code>harvest()</code> before the payout call. It blocks the user from calling <code>harvest()</code> again. + blocks the lock token transfer.</p>\n<p>Mitigations step is to stop calling <code>payout()</code> with <code>_unallocatedSherX > 0</code></p>\n</blockquote>\n<h1 id=\"low-risk-findings-31\" style=\"position:relative;\"><a href=\"#low-risk-findings-31\" aria-label=\"low risk findings 31 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (31)</h1>\n<h2 id=\"l-01-govsol-use-safeerc20safeapprove-in-tokenunload\" style=\"position:relative;\"><a href=\"#l-01-govsol-use-safeerc20safeapprove-in-tokenunload\" aria-label=\"l 01 govsol use safeerc20safeapprove in tokenunload permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/51\">[L-01] Gov.sol: Use <code>SafeERC20.safeApprove</code> in <code>tokenUnload()</code></a></h2>\n<p><em>Submitted by hickuphh3, also found by eriksal1217 and shw</em></p>\n<p>This is probably an oversight since <code>SafeERC20</code> was imported and <code>safeTransfer()</code> was used for ERC20 token transfers. Nevertheless, note that <code>approve()</code> will fail for certain token implementations that do not return a boolean value (Eg. OMG and ADX tokens). Hence it is recommend to use <code>safeApprove()</code>.</p>\n<p>Recommend updating to <code>_token.safeApprove(address(_native), totalToken)</code> in <code>tokenUnload()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/51\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-02-withdraw-returns-the-final-amount-withdrawn\" style=\"position:relative;\"><a href=\"#l-02-withdraw-returns-the-final-amount-withdrawn\" aria-label=\"l 02 withdraw returns the final amount withdrawn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/78\">[L-02] <code>withdraw</code> returns the final amount withdrawn</a></h2>\n<p><em>Submitted by pauliax, also found by eriksal1217</em></p>\n<p>function <code>withdraw</code> in ILendingPool returns the actual withdrawn amount, however, function <code>withdraw</code> in AaveV2 strategy does not check this return value so e.g. function strategyWithdraw may actually withdraw less but still add the full amount to the staked balance:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">strategy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Recommend that function <code>withdraw</code> in <code>IStrategy</code> should return uint indicating the actual withdrawn amount and functions that use it should account for that.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/78#issuecomment-889330294\">Evert0x (Sherlock) confirmed</a>:</strong></p>\n<blockquote>\n<p>When looking at the LendingPool withdraw implementation: <a href=\"https://github.com/aave/protocol-v2/blob/master/contracts/protocol/lendingpool/LendingPool.sol#L142\">https://github.com/aave/protocol-v2/blob/master/contracts/protocol/lendingpool/LendingPool.sol#L142</a></p>\n<p>It will revert if the _amount > balance. It basically only returns a different value then _amount in case it is uint256(-1), correct?</p>\n</blockquote>\n<h2 id=\"l-03-series-of-divs\" style=\"position:relative;\"><a href=\"#l-03-series-of-divs\" aria-label=\"l 03 series of divs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/24\">[L-03] series of divs</a></h2>\n<p><em>Submitted by gpersoon, also found by hickuphh3 and shw</em></p>\n<p>The function <code>payout</code> contains an expression with 3 sequential divs. This is generally not recommended because it could lead to rounding errors / loss of precision. Also, a div is usually more expensive than a mul. Also, an intermediate division by 0 (if <code>SherXERC20Storage.sx20().totalSupply</code> == 0) could occur.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"108\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"109\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payout</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"110\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"111\"></span><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deduction</span><span class=\"mtk1\"> =  </span><span class=\"mtk12\">excludeUsd</span><span class=\"mtk1\">.</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">curTotalUsdPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">SherXERC20Storage</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sx20</span><span class=\"mtk1\">().</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10e17</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Recommend verifying the formula and replace with something like:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deduction</span><span class=\"mtk1\"> =  </span><span class=\"mtk12\">excludeUsd</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">SherXERC20Storage</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sx20</span><span class=\"mtk1\">().</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(  </span><span class=\"mtk12\">curTotalUsdPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10e17</span><span class=\"mtk1\">) )</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/24\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-04-erc20-non-standard-names\" style=\"position:relative;\"><a href=\"#l-04-erc20-non-standard-names\" aria-label=\"l 04 erc20 non standard names permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/117\">[L-04] ERC20 non-standard names</a></h2>\n<p><em>Submitted by cmichel, also found by shw</em></p>\n<p>Usually, the functions to increase the allowance are called <code>increaseAllowance</code> and <code>decreaseAllowance</code> but in <code>SherXERC20</code> they are called <code>increaseApproval</code> and <code>decreaseApproval</code></p>\n<p>Recommend renaming these functions to the more common names.</p>\n<p><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/117\">Evert0x (Sherlock) confirmed</a> sponsor confirmed- <a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/117\">Evert0x (Sherlock) labeled</a> disagree with severity</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/117#issuecomment-889109082\">Evert0x (Sherlock) confirmed</a>:</strong></p>\n<blockquote>\n<p>Good point <a href=\"https://docs.openzeppelin.com/contracts/2.x/api/token/erc20#ERC20\">https://docs.openzeppelin.com/contracts/2.x/api/token/erc20#ERC20</a></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/117#issuecomment-889110446\">Evert0x (Sherlock) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>0 non-critical</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/117#issuecomment-907919774\">ghoul-sol (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree with warden, low risk looks reasonable here.</p>\n</blockquote>\n<h2 id=\"l-05-users-calcunderlyinginstoredusd-value-is-underestimated\" style=\"position:relative;\"><a href=\"#l-05-users-calcunderlyinginstoredusd-value-is-underestimated\" aria-label=\"l 05 users calcunderlyinginstoredusd value is underestimated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/144\">[L-05] User’s <code>calcUnderlyingInStoredUSD</code> value is underestimated</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The <code>calcUnderlyingInStoredUSD()</code> function of <code>SherX</code> should return <code>calcUnderlyingInStoredUSD(getSherXBalance())</code> instead of <code>calcUnderlyingInStoredUSD(sx20.balances[msg.sender])</code> since there could be <code>SherX</code> unallocated to the user at the time of the function call. A similar function, <code>calcUnderlying()</code>, calculates the user’s underlying tokens based on the user’s current balance plus the unallocated ones.</p>\n<p>Recommend changing <code>sx20.balances[msg.sender]</code> to <code>getSherXBalance()</code> at <a href=\"https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/SherX.sol#L141\">L141</a> in <code>SherX.sol</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/144#issuecomment-890312866\">Evert0x (Sherlock) confirmed</a>:</strong></p>\n<blockquote>\n<p>1 (low risk); as the function is called ‘..inStored..’, at it is using the stored variables. I agree it is a confusing function name.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/144#issuecomment-907921044\">ghoul-sol (judge) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>agree with sponsor, low risk</p>\n</blockquote>\n<h2 id=\"l-06-poolstrategysol-consider-minimizing-trust-with-implemented-strategies\" style=\"position:relative;\"><a href=\"#l-06-poolstrategysol-consider-minimizing-trust-with-implemented-strategies\" aria-label=\"l 06 poolstrategysol consider minimizing trust with implemented strategies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/44\">[L-06] <code>PoolStrategy.sol</code>: Consider minimizing trust with implemented strategies</a></h2>\n<p><em>Submitted by hickuphh3, also found by shw</em></p>\n<p><code>PoolStrategy</code> trusts the implemented strategy <code>ps.strategy</code> (Eg. <code>AaveV2.sol</code>) to:</p>\n<ul>\n<li>return the right amount for <code>ps.strategy.balanceOf()</code></li>\n<li>have sent back the withdrawn funds when <code>ps.strategy.withdraw()</code> is called</li>\n<li>report the correct withdrawn amount when <code>ps.strategy.withdrawAll()</code> is called</li>\n</ul>\n<p>While <code>ps.strategy</code> is assumed to have been scrutinized and  its code verified before adding it as a strategy, and can therefore be trusted, consider minimizing trust between <code>PoolStrategy</code> and <code>ps.strategy</code>, since strategies are themselves reliant on other protocols and therefore subject to external risk.</p>\n<ul>\n<li>Verify the amount sent back to <code>PoolStrategy</code> for withdrawals instead</li>\n<li>\n<p>The reliance on <code>balanceOf()</code> can be mitigated slightly by using a counter <code>uint256 depositedAmount</code> that increments / decrements upon deposits and withdrawals to the strategy respectively. This value can then be used in lieu of <code>ps.strategy.balanceOf()</code>. However, the downsides to this are that</p>\n<ul>\n<li>this counter does not account for yield amounts from the strategy and</li>\n<li>it increases complexity</li>\n</ul>\n</li>\n</ul>\n<p>A simple implementation to checking the withdrawal amounts is provided below.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">strategyWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balanceBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">strategy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balanceBefore</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)), </span><span class=\"mtk8\">&quot;REASON&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">strategyWithdrawAll</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">PoolStorage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Base</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ps</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">baseData</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_enforceGovPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">_enforceStrategy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balanceBefore</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">strategy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">withdrawAll</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// alternatively, verify amount returned by withdrawAll() method</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">balanceBefore</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/44\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/44#issuecomment-907934239\">ghoul-sol (judge) commented</a>:</strong></p>\n<blockquote>\n<p>This looks like low risk issue.</p>\n</blockquote>\n<h2 id=\"l-07-unbounded-iteration-over-all-premium-tokens\" style=\"position:relative;\"><a href=\"#l-07-unbounded-iteration-over-all-premium-tokens\" aria-label=\"l 07 unbounded iteration over all premium tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/102\">[L-07] Unbounded iteration over all premium tokens</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>Gov.protocolRemove</code> function iterates over all elements of the <code>tokensSherX</code> array.</p>\n<p>The transactions could fail if the arrays get too big and the transaction would consume more gas than the block limit.\nThis will then result in a denial of service for the desired functionality and break core functionality.</p>\n<p>The severity is low as only governance can whitelist these tokens but not the protocols themselves.</p>\n<p>Recommendation is to keep the array size small.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/102\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<h2 id=\"l-08-unbounded-iteration-over-all-staking-tokens\" style=\"position:relative;\"><a href=\"#l-08-unbounded-iteration-over-all-staking-tokens\" aria-label=\"l 08 unbounded iteration over all staking tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/103\">[L-08] Unbounded iteration over all staking tokens</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>SherX.getTotalSherXUnminted</code> function iterates over all elements of the <code>tokensStaker</code> array.</p>\n<p>The transactions could fail if the arrays get too big and the transaction would consume more gas than the block limit.\nThis will then result in a denial of service for the desired functionality and break core functionality.</p>\n<p>The severity is low as only governance can whitelist these tokens but not the protocols themselves.</p>\n<p>Recommend keeping the array size small.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/103\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<h2 id=\"l-09-unbounded-iteration-over-all-protocols\" style=\"position:relative;\"><a href=\"#l-09-unbounded-iteration-over-all-protocols\" aria-label=\"l 09 unbounded iteration over all protocols permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/104\">[L-09] Unbounded iteration over all protocols</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>LibPool.payOffDebtAll</code> function iterates over all elements of the <code>ps.protocols</code> array.</p>\n<p>The transactions could fail if the arrays get too big and the transaction would consume more gas than the block limit.\nThis will then result in a denial of service for the desired functionality and break core functionality.</p>\n<p>The severity is low as only governance can whitelist protocols per token but not the protocols themselves.</p>\n<p>Recommendation is to keep the array size small.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/104\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<h2 id=\"l-10-missing-verification-on-tokeninits-lock\" style=\"position:relative;\"><a href=\"#l-10-missing-verification-on-tokeninits-lock\" aria-label=\"l 10 missing verification on tokeninits lock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/105\">[L-10] Missing verification on <code>tokenInit</code>’s lock</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>Gov.tokenInit</code> skips the underlying token check if the <code>_token</code> is SHERX:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">underlying</span><span class=\"mtk1\">() == </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;UNDERLYING&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>This check should still be performed even for <code>_token == address(this) // SHERX</code>, otherwise, the lock can have a different underlying and potentially pay out wrong tokens.</p>\n<p>Recommendation is to verify the underlying of all locks.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/105\">Evert0x (Sherlock) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/105#issuecomment-889137829\">Evert0x (Sherlock) commented</a>:</strong></p>\n<blockquote>\n<p>Good catch!</p>\n</blockquote>\n<h2 id=\"l-11-_dosherx-does-not-return-correct-precision-and-its-confusing\" style=\"position:relative;\"><a href=\"#l-11-_dosherx-does-not-return-correct-precision-and-its-confusing\" aria-label=\"l 11 _dosherx does not return correct precision and its confusing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/108\">[L-11] <code>_doSherX</code> does not return correct precision and it’s confusing</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>_doSherX</code> function does not return the correct precision of <code>sherUsd</code> and it is <strong>not</strong> the “Total amount of USD of the underlying tokens that are being transferred” that the documentation mentions.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">sherUsd</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sx</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenUSD</span><span class=\"mtk1\">[</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]]);</span></span></span></code></pre>\n<p>Instead, the amount is inflated by <code>1e18</code>, it should divide the amount by <code>1e18</code> to get a USD value with 18 decimal precision.</p>\n<p>The severity is low as the calling site in <code>payout</code> makes up for it by dividing by <code>1e18</code> in the <code>deduction</code> computation.</p>\n<p>We still recommend returning the correct amount in <code>_doSherX</code> already to match the documentation and avoid any future errors when using its unintuitive return value.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/108\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-12-anyone-can-unstake-on-behalf-of-someone\" style=\"position:relative;\"><a href=\"#l-12-anyone-can-unstake-on-behalf-of-someone\" aria-label=\"l 12 anyone can unstake on behalf of someone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/114\">[L-12] Anyone can unstake on behalf of someone</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>PoolBase.unstakeWindowExpiry</code> function allows unstaking tokens of other users.\nWhile the tokens are sent to the correct address, this can lead to issues with smart contracts that might rely on claiming the tokens themselves.</p>\n<p>For example, suppose the <code>_to</code> address corresponds to a smart contract that has a function of the following form:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">withdrawAndDoSomething</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">contract</span><span class=\"mtk1\">.</span><span class=\"mtk11\">unstakeWindowExpiry</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">token</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">externalWallet</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend considering that, If the contract has no other functions to transfer out funds, they may be locked forever in this contract.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/114\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-13-sanitize-_weights-in-setweights-on-every-use\" style=\"position:relative;\"><a href=\"#l-13-sanitize-_weights-in-setweights-on-every-use\" aria-label=\"l 13 sanitize _weights in setweights on every use permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/115\">[L-13] Sanitize <code>_weights</code> in <code>setWeights</code> on every use</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>setWeights</code> function only stores the <code>uint16</code> part of <code>_weights[i]</code> in storage (<code>ps.sherXWeight = uint16(_weights[i])</code>).\nHowever, to calculate <code>weightAdd/weightSub</code> the full value (not truncated to 16 bits) is used.\nThis can lead to discrepancies as the actually added part is different from the one tracked in the <code>weightAdd</code> variable.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/115#issuecomment-889122225\">Evert0x (Sherlock) confirmed</a>:</strong></p>\n<blockquote>\n<p>Your recommendation is to do <code>.add(uint16(_weights[i]))</code> for both weightAdd and weightSub?</p>\n</blockquote>\n<h2 id=\"l-14-initializesherxerc20-can-be-called-more-than-once\" style=\"position:relative;\"><a href=\"#l-14-initializesherxerc20-can-be-called-more-than-once\" aria-label=\"l 14 initializesherxerc20 can be called more than once permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/116\">[L-14] <code>initializeSherXERC20</code> can be called more than once</a></h2>\n<p><em>Submitted by cmichel, also found by pauliax</em></p>\n<p>The <code>SherXERC20.initializeSherXERC20</code> function has <code>initialize</code> in its name which indicates that it should only be called once to initialize the storage. But it can be repeatedly called to overwrite and update the ERC20 name and symbol.</p>\n<p>Recommend considering an <code>initializer</code> modifier or reverting if <code>name</code> or <code>symbol</code> is already set.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/116\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-15-erc20-can-accidentally-burn-tokens\" style=\"position:relative;\"><a href=\"#l-15-erc20-can-accidentally-burn-tokens\" aria-label=\"l 15 erc20 can accidentally burn tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/118\">[L-15] ERC20 can accidentally burn tokens</a></h2>\n<p><em>Submitted by cmichel, also found by shw</em></p>\n<p>The <code>SherXERC20.transfer</code>/<code>transferFrom</code> actions allow transferring tokens to the zero address.\nThis is usually prohibited to accidentally avoid “burning” tokens by sending them to an unrecoverable zero address.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/118#issuecomment-889103134\">Evert0x (Sherlock) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Does it make more sense to include an extra <code>burn()</code> function? As removing the possibility to send to zero address removes the ability to burn.</p>\n</blockquote>\n<h2 id=\"l-16-extra-check-setunstakewindow-and-setcooldown\" style=\"position:relative;\"><a href=\"#l-16-extra-check-setunstakewindow-and-setcooldown\" aria-label=\"l 16 extra check setunstakewindow and setcooldown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/18\">[L-16] extra check <code>setUnstakeWindow</code> and <code>setCooldown</code></a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>The function <code>setUnstakeWindow</code> and <code>setCooldown</code> don’t check that the input parameter isn’t 0. So the values could accidentally be set to 0 (although unlikely).\nHowever you wouldn’t want the to be 0 because that would allow attacks with flashloans (stake and unstake in the same transaction)</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"124\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">https:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"125\"></span><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setUnstakeWindow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint40</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_unstakeWindow</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyGovMain</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"126\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_unstakeWindow</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">25000000</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;MAX&#39;</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// ~ approximate 10 years of blocks</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"127\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">GovStorage</span><span class=\"mtk1\">.</span><span class=\"mtk11\">gs</span><span class=\"mtk1\">().</span><span class=\"mtk12\">unstakeWindow</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_unstakeWindow</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"128\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"129\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"130\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setCooldown</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint40</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_period</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyGovMain</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"131\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_period</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">25000000</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;MAX&#39;</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// ~ approximate 10 years of blocks</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"132\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">GovStorage</span><span class=\"mtk1\">.</span><span class=\"mtk11\">gs</span><span class=\"mtk1\">().</span><span class=\"mtk12\">unstakeCooldown</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_period</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"133\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p>Recommend checking the input parameter of <code>setUnstakeWindow</code> and <code>setCooldown</code> isn’t 0</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/18\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-17-delete-psstakebalance\" style=\"position:relative;\"><a href=\"#l-17-delete-psstakebalance\" aria-label=\"l 17 delete psstakebalance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/20\">[L-17] delete <code>ps.stakeBalance</code></a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>In the function <code>tokenUnload</code>, <code>ps.stakeBalance</code> is only deleted if balance >0. e.g it is deleted if <code>ps.stakeBalance</code> > ps.firstMoneyOut\nSo if <code>ps.stakeBalance</code> ==  ps.firstMoneyOut then <code>ps.stakeBalance</code> will not be deleted.\nAnd then a call to tokenRemove will revert, because it checks for <code>ps.stakeBalance</code> to be 0</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"271\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"272\"></span><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tokenUnload</span><span class=\"mtk1\">( </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IRemove</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_native</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_remaining</span><span class=\"mtk1\"> ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyGovMain</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"273\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"274\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">firstMoneyOut</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"275\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"276\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_remaining</span><span class=\"mtk1\">, </span><span class=\"mtk12\">balance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"277\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"278\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"279\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"280\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">firstMoneyOut</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"281\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"282\"></span><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tokenRemove</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyGovMain</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"283\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"284\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stakeBalance</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;BALANCE_SET&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"285\"></span><span class=\"grvsc-source\"><span class=\"mtk1\"> }</span></span></span></code></pre>\n<p>Recommend checking what to do in this edge case and add the appropriate code.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/20\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-18-prevent-div-by-0\" style=\"position:relative;\"><a href=\"#l-18-prevent-div-by-0\" aria-label=\"l 18 prevent div by 0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/22\">[L-18] prevent div by 0</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>On several locations in the code precautions are taken not to divide by 0, because this will revert the code.\nHowever on some locations this isn’t done.</p>\n<p>Especially in <code>doYield</code> a first check is done for totalAmount >0, however a few lines later there is an other div(totalAmount) which isn’t checked.</p>\n<p>The proof of concept show another few examples.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"309\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"310\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">doYield</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ILock</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\">,</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">,</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">,</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"311\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"312\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lockToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"313\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"314\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">totalAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"315\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">ineglible_yield_amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sWeight</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">totalAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"316\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"317\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">ineglible_yield_amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"318\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"319\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">from</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"320\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">raw_amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sWeight</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">userAmount</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">totalAmount</span><span class=\"mtk1\">);  </span><span class=\"mtk3\">// totalAmount could be 0, see lines above</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"321\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"295\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"296\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">activateCooldown</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"297\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">...   </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">fee</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LibPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stakeBalance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lockToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">());   </span><span class=\"mtk3\">// ps.lockToken.totalSupply() might be 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"298\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"351\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"352\"></span><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unstake</span><span class=\"mtk1\">( </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\"> ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"353\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">...    </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">withdraw</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lock</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">LibPool</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stakeBalance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">lockToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">());  </span><span class=\"mtk3\">// // ps.lockToken.totalSupply() might be 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"354\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"67\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"68\"></span><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">stake</span><span class=\"mtk1\">( PoolStorage.Base </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">,</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\"> ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lock</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"69\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">...      </span><span class=\"mtk12\">lock</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">totalLock</span><span class=\"mtk1\">).</span><span class=\"mtk11\">div</span><span class=\"mtk1\">(</span><span class=\"mtk11\">stakeBalance</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">));   </span><span class=\"mtk3\">// stakeBalance(ps) might be 0</span></span></span></code></pre>\n<p>Recommend making sure division by 0 won’t occur by checking the variables beforehand and handling this edge case.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/22#issuecomment-889374333\">Evert0x (Sherlock) confirmed</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>if (from != address(0)) {\nuint256 raw_amount = ps.sWeight.mul(userAmount).div(totalAmount); // totalAmount could be 0, see lines above</p>\n</blockquote>\n<p>If totalAmount == 0, from is always address(0). As no one holds this lockToken and it’s being minted</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/22#issuecomment-889375151\">Evert0x (Sherlock) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>function activateCooldown(uint256 _amount, IERC20 _token) external override returns (uint256) {\n… uint256 tokenAmount = fee.mul(LibPool.stakeBalance(ps)).div(ps.lockToken.totalSupply()); // ps.lockToken.totalSupply() might be 0</p>\n</blockquote>\n<p>Can not be 0, as there is lockToken being transferred <code>require(_amount > 0, 'AMOUNT');</code>, so the value is at least 1.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/22#issuecomment-889375756\">Evert0x (Sherlock) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>function unstake( uint256 _id, address _receiver, IERC20 _token ) external override returns (uint256 amount) {\n… amount = withdraw.lock.mul(LibPool.stakeBalance(ps)).div(ps.lockToken.totalSupply()); // // ps.lockToken.totalSupply() might be 0</p>\n</blockquote>\n<p>Can not be 0, as there is lockToken in the contract, waiting to be transferred back to the user</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/22#issuecomment-889377873\">Evert0x (Sherlock) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>function stake( PoolStorage.Base storage ps,uint256 _amount, address _receiver ) external returns (uint256 lock) {\n… lock = _amount.mul(totalLock).div(stakeBalance(ps)); // stakeBalance(ps) might be 0</p>\n</blockquote>\n<p>Can not be 0 (most of the times), as there are already lockTokens in circulation, which means someone has deposited BUT the balance could be fully depleted because of a <code>payout()</code> call which could make it 0.</p>\n<p>Thanks!</p>\n</blockquote>\n<h2 id=\"l-19-unbounded-loop-in-getinitialunstakeentry-\" style=\"position:relative;\"><a href=\"#l-19-unbounded-loop-in-getinitialunstakeentry-\" aria-label=\"l 19 unbounded loop in getinitialunstakeentry  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/26\">[L-19] unbounded loop in <code>getInitialUnstakeEntry</code> </a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>The functions <code>getInitialUnstakeEntry</code> contains a for loop that can be unbounded. This would mean it could run out of gas and the function would revert.\nThe array <code>unstakeEntries</code> can be made arbitrarily large by repeatedly calling activateCooldown with a small amount of tokens.</p>\n<p>The impact is very low because the array <code>unstakeEntries</code> is separated per user and links to <code>mgs.sender</code>, so you can only shoot yourself in your foot.</p>\n<p>Additionally the function <code>getInitialUnstakeEntry</code> isn’t used in the smart contracts.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"123\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"124\"></span><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getInitialUnstakeEntry</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_staker</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">)  </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\">  </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">)  {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"125\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"126\"></span><span class=\"grvsc-source\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unstakeEntries</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_staker</span><span class=\"mtk1\">].</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\">++) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"127\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unstakeEntries</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_staker</span><span class=\"mtk1\">][</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">blockInitiated</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"128\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"129\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">activateCooldown</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"130\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;AMOUNT&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"131\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"132\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">unstakeEntries</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">].</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PoolStorage</span><span class=\"mtk1\">.</span><span class=\"mtk11\">UnstakeEntry</span><span class=\"mtk1\">(</span><span class=\"mtk11\">uint40</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">fee</span><span class=\"mtk1\">)) );</span></span></span></code></pre>\n<p>Recommend probably accepting the situation and add a comment in the function <code>getInitialUnstakeEntry</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/26\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<h2 id=\"l-20-prevent-burn-in-_transfer\" style=\"position:relative;\"><a href=\"#l-20-prevent-burn-in-_transfer\" aria-label=\"l 20 prevent burn in _transfer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/29\">[L-20] prevent burn in <code>_transfer</code></a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>The function <code>_transfer</code> in SherXERC20.sol allow transfer to address 0.\nThis is usually considered the same as burning the tokens and the <code>Emit</code> is indistinguishable from an <code>Emit</code> of a burn.</p>\n<p>However the burn function in LibSherXERC20.sol has extra functionality, which <code>_transfer</code> doesn’t have.\n<code>sx20.totalSupply = sx20.totalSupply.sub(_amount);</code></p>\n<p>So it is safer to prevent <code>_transfer</code> to address 0 (which is also done in the openzeppelin erc20 contract)\nSee:  <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L226\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L226</a></p>\n<p>Note: minting from address 0 will not work because that is blocked by the <code>safemath</code> sub in:\n<code>sx20.balances[_from] = sx20.balances[_from].sub(_amount);</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"118\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">https:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"119\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"120\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">SherXERC20Storage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Base</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">SherXERC20Storage</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sx20</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"121\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_from</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_from</span><span class=\"mtk1\">].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"122\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">].</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"123\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"124\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"125\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"29\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"30\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"31\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">SherXERC20Storage</span><span class=\"mtk1\">.</span><span class=\"mtk12\">Base</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">SherXERC20Storage</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sx20</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"32\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_from</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">balances</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_from</span><span class=\"mtk1\">].</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"33\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">sx20</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sub</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"34\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_from</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"35\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend adding something like to following to <code>_transfer</code> of SherXERC20.sol:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_to</span><span class=\"mtk1\">!= </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Transfer to the zero address&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Or, updating <code>sx20.totalSupply</code> if burning a desired operation.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/29\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-21-aavev2-approves-lending-pool-in-the-constructor\" style=\"position:relative;\"><a href=\"#l-21-aavev2-approves-lending-pool-in-the-constructor\" aria-label=\"l 21 aavev2 approves lending pool in the constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/65\">[L-21] AaveV2 approves lending pool in the constructor</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>Contract AaveV2 does not cache the lending pool, it retrieves it when necessary by calling a function <code>getLp()</code>. This is great as the implementation may change, however, this contract also approves an unlimited amount of want in the constructor:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ILendingPool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lp</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getLp</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">want</span><span class=\"mtk1\">.</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lp</span><span class=\"mtk1\">), </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(-</span><span class=\"mtk7\">1</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">so</span><span class=\"mtk1\"> </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">implementation</span><span class=\"mtk1\"> </span><span class=\"mtk12\">changes</span><span class=\"mtk1\">, </span><span class=\"mtk12\">the</span><span class=\"mtk1\"> </span><span class=\"mtk12\">approval</span><span class=\"mtk1\"> </span><span class=\"mtk12\">will</span><span class=\"mtk1\"> </span><span class=\"mtk12\">reset</span><span class=\"mtk1\">. </span><span class=\"mtk12\">This</span><span class=\"mtk1\"> </span><span class=\"mtk12\">will</span><span class=\"mtk1\"> </span><span class=\"mtk15\">break</span><span class=\"mtk1\"> the </span><span class=\"mtk12\">deposit</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">as</span><span class=\"mtk1\"> </span><span class=\"mtk11\">it</span><span class=\"mtk1\"> </span><span class=\"mtk11\">will</span><span class=\"mtk1\"> </span><span class=\"mtk11\">try</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deposit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">to</span><span class=\"mtk1\"> </span><span class=\"mtk11\">this</span><span class=\"mtk1\"> </span><span class=\"mtk11\">new</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lending</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pool</span><span class=\"mtk1\"> </span><span class=\"mtk11\">with</span><span class=\"mtk1\"> 0 </span><span class=\"mtk11\">approval</span><span class=\"mtk1\">.</span></span></span></code></pre>\n<p>For reference, function <a href=\"https://github.com/aave/aave-protocol/blob/4b4545fb583fd4f400507b10f3c3114f45b8a037/contracts/configuration/LendingPoolAddressesProvider.sol#L58-L65\"><code>setLendingPoolImpl</code></a>.</p>\n<p>Not sure how likely is that lending pool implementation will change so marking this as ‘Low’.</p>\n<p>Recommend that before calling <code>lp.deposit</code> check that the approval is sufficient and increase otherwise.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/65\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-22-inclusive-checks\" style=\"position:relative;\"><a href=\"#l-22-inclusive-checks\" aria-label=\"l 22 inclusive checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/68\">[L-22] Inclusive checks</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>I think these checks should be inclusive:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_unstakeWindow</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">25000000</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;MAX&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_period</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">25000000</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;MAX&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">oldValue</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// &gt;= will reduce gas here</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_unstakeWindow</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk7\">25000000</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;MAX&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_period</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk7\">25000000</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;MAX&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_amount</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">oldValue</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<h2 id=\"l-23-group-related-data-into-separate-structs\" style=\"position:relative;\"><a href=\"#l-23-group-related-data-into-separate-structs\" aria-label=\"l 23 group related data into separate structs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/69\">[L-23] Group related data into separate structs</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>In Base struct having 3 separate fields that map from _protocol is error-prone. If you later introduce new fields, etc, you need not forget to delete them in function protocolRemove, etc. I think it would be better to have a separate struct for protocol-related data and map to that.</p>\n<p>An example solution, replace:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">address</span><span class=\"mtk1\">) </span><span class=\"mtk12\">protocolManagers</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">address</span><span class=\"mtk1\">) </span><span class=\"mtk12\">protocolAgents</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) </span><span class=\"mtk12\">protocolIsCovered</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>with:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ProtocolInfo</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">manager</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">agent</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">covered</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">struct</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Base</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ProtocolInfo</span><span class=\"mtk1\">) </span><span class=\"mtk12\">protocolInfo</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Then you can delete all fields this way: delete <code>gs.protocolInfo[_protocol]</code>; Similar solution may be applied to <code>PoolStorage</code> (<code>protocolBalance</code>, <code>protocolPremium</code>, <code>isProtocol</code>).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/69\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<h2 id=\"l-24-re-entrancy-mitigation\" style=\"position:relative;\"><a href=\"#l-24-re-entrancy-mitigation\" aria-label=\"l 24 re entrancy mitigation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/70\">[L-24] Re-entrancy mitigation</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>I see no re-entrancy mitigations. Contracts interact with various outside sources (tokens, aave pools, other possible strategies that may be added in the future, etc). so, for instance, now you have to be careful and do not allow tokens that have a receiver callback (e.g. erc777) or untrustable sources of yield (strategies).</p>\n<p>Consider using <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\">ReentrancyGuard</a> on main action functions.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/70\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<h2 id=\"l-25-getinitialunstakeentry-when-unstakeentries-is-empty\" style=\"position:relative;\"><a href=\"#l-25-getinitialunstakeentry-when-unstakeentries-is-empty\" aria-label=\"l 25 getinitialunstakeentry when unstakeentries is empty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/92\">[L-25] <code>getInitialUnstakeEntry</code> when <code>unstakeEntries</code> is empty</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>When the address has no unstake entries, function <code>getInitialUnstakeEntry</code> still returns 0 index. This function is external but can still confuse the outside consumers.</p>\n<p>Recommend considering  requiring <code>ps.unstakeEntries[_staker].length > 0;</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/92\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<h2 id=\"l-26-loops-may-exceed-gas-limit\" style=\"position:relative;\"><a href=\"#l-26-loops-may-exceed-gas-limit\" aria-label=\"l 26 loops may exceed gas limit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/93\">[L-26] Loops may exceed gas limit</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>Probably you are aware of this, but as I see many for loops throughout the code iterating over dynamic arrays I suggest being very careful as the execution may exceed the block gas limit, consume all the gas provided, and fail. Some arrays have removal functions, but there is, for instance, <code>unstakeEntries</code> array that is never actually removed as ‘delete ps.unstakeEntries[msg.sender][_id];’ only resets the values to default.</p>\n<p>You can consider introducing max limits on items in the arrays or make sure that elements can be removed from dynamic arrays in case it becomes too large.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/93\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<h2 id=\"l-27-safemath-library-is-not-always-used-in-poolbase\" style=\"position:relative;\"><a href=\"#l-27-safemath-library-is-not-always-used-in-poolbase\" aria-label=\"l 27 safemath library is not always used in poolbase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/133\">[L-27] <code>SafeMath</code> library is not always used in <code>PoolBase</code></a></h2>\n<p><em>Submitted by shw</em></p>\n<p><code>SafeMath</code> library functions are not always used in arithmetic operations in the <code>PoolBase</code> contract, which could potentially cause integer underflow/overflows. Although in the reference lines of code, there are upper limits on the variables to ensure an integer underflow/overflow could not happen, using <code>SafeMath</code> is always a best practice, which prevents underflow/overflows completely (even if there were no assumptions on the variables) and increases code consistency as well.</p>\n<p>Recommend considering using the <code>SafeMath</code> library functions in the referenced lines of code.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/133\">Evert0x (Sherlock) acknowledged</a></strong></p>\n<h2 id=\"l-28-missing-non-zero-address-checks\" style=\"position:relative;\"><a href=\"#l-28-missing-non-zero-address-checks\" aria-label=\"l 28 missing non zero address checks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/135\">[L-28] Missing non-zero address checks</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>Adding non-zero address checks on the following function’s parameters can help ensure the ownership of contracts is not lost or the contracts do not need to be redeployed if any of them is provided as zero accidentally.</p>\n<p>Recommend considering adding non-zero address checks on the parameters.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/135#issuecomment-890309347\">Evert0x (Sherlock) acknowledged</a>:</strong></p>\n<blockquote>\n<p><code>GovDev.sol#L19-L23</code> is used to eventually renounce the role, but maybe it makes sense to create a different function for that.</p>\n</blockquote>\n<h2 id=\"l-29-possible-divide-by-zero-error-in-poolbase\" style=\"position:relative;\"><a href=\"#l-29-possible-divide-by-zero-error-in-poolbase\" aria-label=\"l 29 possible divide by zero error in poolbase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/136\">[L-29] Possible divide-by-zero error in <code>PoolBase</code></a></h2>\n<p><em>Submitted by shw</em></p>\n<p>A possible divide-by-zero error could happen in the <code>getSherXPerBlock(uint256, IERC20)</code> function of <code>PoolBase</code> when the <code>totalSupply</code> of <code>lockToken</code> and <code>_lock</code> are both 0.\nRecommend checking  if <code>baseData().lockToken.totalSupply().add(_lock)</code> equals to 0 before line 214. If so, then return 0.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/136\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-30-inconsistent-block-number-comparison-when-deciding-an-unstaking-entry-is-active\" style=\"position:relative;\"><a href=\"#l-30-inconsistent-block-number-comparison-when-deciding-an-unstaking-entry-is-active\" aria-label=\"l 30 inconsistent block number comparison when deciding an unstaking entry is active permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/139\">[L-30] Inconsistent block number comparison when deciding an unstaking entry is active</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The <code>getInitialUnstakeEntry</code> function of <code>PoolBase</code> returns the first active unstaking entry of a staker, which requires the current block to be strictly before the last block in the unstaking window. However, the <code>unstake</code> function allows the current block to be exactly the same as the last block (same logic in <code>unstakeWindowExpiry</code>).</p>\n<p>Recommend changing the <code>&#x3C;=</code> comparison at line 136 to <code>&#x3C;</code> for consistency.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/139\">Evert0x (Sherlock) confirmed</a></strong></p>\n<h2 id=\"l-31-tokens-cannot-be-reinitialized-with-new-lock-tokens\" style=\"position:relative;\"><a href=\"#l-31-tokens-cannot-be-reinitialized-with-new-lock-tokens\" aria-label=\"l 31 tokens cannot be reinitialized with new lock tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/141\">[L-31] Tokens cannot be reinitialized with new lock tokens</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>A token cannot be reinitialized with a new lock token once it is set to a non-zero address. If the lock token needs to be changed (for example, because of implementation errors), the token must be removed and added again.</p>\n<p>Consider removing the <code>if</code> condition at line 219 to allow the lock token to be reinitialized.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/141#issuecomment-890311394\">Evert0x (Sherlock) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Upgrading the lockToken a pretty complex procedure. As old lockTokens suddenly become worthless.</p>\n</blockquote>\n<h1 id=\"non-critical-findings\" style=\"position:relative;\"><a href=\"#non-critical-findings\" aria-label=\"non critical findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/61\">[N-01] [PoolBase.sol] Calculations are being divided before being multiplied </a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/56\">[N-02]\t[ForeignLock.sol] Local Variables Shadowing other variables</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/64\">[N-03] transferFrom when from = to</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/16\">[N-04] Different solidity pramas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/123\">[N-05] Poorly Named variables</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/125\">[N-06] NatSpec typo in <code>_doSherX</code> @return</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/129\">[N-07] Confusing exponentiation (10e17)</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/62\">[N-08] typo: <code>ineglible_yield_amount</code> -> <code>ineligible_yield_amount</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/30\">[N-09] Define Global Constants</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/19\">[N-10] confusing comment in protocolUpdate</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/23\">[N-11] don’t use add(add.sub(sub)</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/33\">[N-12] Gov.sol: Non-intuitive comment in tokenRemove()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/42\">[N-13] PoolBase.sol: Consider returning 0 instead of reverting in LockToToken()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/45\">[N-14] SherX.sol: Change variable names weightSub and weightAdd to totalWeightOld and totalWeightNew</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/46\">[N-15] SherX.sol: Redeeming SherX may run out of gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/47\">[N-16] SherX.sol: Unsafe casting of _weights  in setWeights()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/89\">[N-17] General suggestions</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/63\">[N-18] Use EnumerableSet to store protocols</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/95\">[N-19] Check _aaveLmReceiver and _sherlock are not empty</a></li>\n</ul>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/124\">[G-01] gas reduction in <code>calcUnderlying</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/126\">[G-02] uncheckable math in <code>payout()</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/127\">[G-03] Uncheckable math in <code>redeem()</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/112\">[G-04] [Gas optimizations] - Public functions that are public, but could be external</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/1\">[G-05] Make variables immutable or constant</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/96\">[G-06] <code>SherX.setWeights</code> only accrue _tokens</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/97\">[G-07] <code>payout</code> does token transfers twice</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/98\">[G-08] <code>increaseApproval</code> gas improval</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/81\">[G-09] [Optimization] Caching variable</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/85\">[G-10] [Optimization] Packing various structs carefully</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/17\">[G-11] Two functions with the same implementation</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/21\">[G-12] x > 0 ==> x!=0</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/31\">[G-13] Gov.sol: Consider abstracting protocolUpdate() and protocolDepositAdd() to avoid duplicate checks</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/34\">[G-14] Gov.sol: Optimise protocolRemove()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/35\">[G-15] Gov.sol: Small refactoring of tokenInit() to save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/83\">[G-16] [Optimization] Setting higher value for optimize-runs</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/38\">[G-17] LibSherX.sol: Optimise calcUnderlying()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/39\">[G-18] Manager.sol: Can avoid <code>safemath</code> sub in usdPerBlock and usdPool calculations</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/40\">[G-19] Manager.sol: Pass ps.sherXUnderlying instead of ps into updateData()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/82\">[G-20] [Optimization] A branchless version of an if else statement</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/84\">[G-21] [Optimization] Use at least 0.8.4</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/86\">[G-22] [Optimization] Caching in for loops</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/87\">[G-23] [Optimization] Changing memory to calldata and again caching in loops</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/48\">[G-24]\tPoolStrategy unused parameter <code>_token</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/60\">[G-25] Use calldata is a little more gas efficient </a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/7\">[G-26] Avoid storing lp in AaveV2 constructor</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/8\">[G-27] Aav2V2 is Ownable but not owner capabilites are used</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/9\">[G-28] Declare NativeLock underlying variable as immutable</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/72\">[G-29] Functions aBalance and balanceOf</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/73\">[G-30] Call to LibDiamond.contractOwner() can be cached</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/148\">[G-31] Gas optimization on calculating the storage slot of a token</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/149\">[G-32] Avoid repeating storage reads in a loop to save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/150\">[G-33] Saving gas by checking the last-recorded block number</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/120\">[G-34] Unused functions and storage cost gas.</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/121\">[G-35]\tUnnecessary require + if combination.</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-07-sherlock-findings/issues/100\">[G-36] <code>transferFrom</code> gas improval</a></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-2\">High Risk Findings (2)</a></p>\n<ul>\n<li><a href=\"#h-01-single-under-funded-protocol-can-break-paying-off-debt\">[H-01] Single under-funded protocol can break paying off debt</a></li>\n<li><a href=\"#h-02-bug-a-critical-bug-in-bps-function\">[H-02] [Bug] A critical bug in <code>bps</code> function</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-4\">Medium Risk Findings (4)</a></p>\n<ul>\n<li><a href=\"#m-01-incorrect-internal-balance-bookkeeping\">[M-01] Incorrect internal balance bookkeeping</a></li>\n<li><a href=\"#m-02-_dosherx-optimistically-assumes-premiums-will-be-paid\">[M-02] <code>_doSherX</code> optimistically assumes premiums will be paid</a></li>\n<li><a href=\"#m-03-reputation-risks-with-updatesolution\">[M-03] reputation risks with <code>updateSolution</code></a></li>\n<li><a href=\"#m-04-yield-distribution-after-large-payout-seems-unfair\">[M-04] Yield distribution after large payout seems unfair</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-findings-31\">Low Risk Findings (31)</a></p>\n<ul>\n<li><a href=\"#l-01-govsol-use-safeerc20safeapprove-in-tokenunload\">[L-01] Gov.sol: Use <code>SafeERC20.safeApprove</code> in <code>tokenUnload()</code></a></li>\n<li><a href=\"#l-02-withdraw-returns-the-final-amount-withdrawn\">[L-02] <code>withdraw</code> returns the final amount withdrawn</a></li>\n<li><a href=\"#l-03-series-of-divs\">[L-03] series of divs</a></li>\n<li><a href=\"#l-04-erc20-non-standard-names\">[L-04] ERC20 non-standard names</a></li>\n<li><a href=\"#l-05-users-calcunderlyinginstoredusd-value-is-underestimated\">[L-05] User’s <code>calcUnderlyingInStoredUSD</code> value is underestimated</a></li>\n<li><a href=\"#l-06-poolstrategysol-consider-minimizing-trust-with-implemented-strategies\">[L-06] <code>PoolStrategy.sol</code>: Consider minimizing trust with implemented strategies</a></li>\n<li><a href=\"#l-07-unbounded-iteration-over-all-premium-tokens\">[L-07] Unbounded iteration over all premium tokens</a></li>\n<li><a href=\"#l-08-unbounded-iteration-over-all-staking-tokens\">[L-08] Unbounded iteration over all staking tokens</a></li>\n<li><a href=\"#l-09-unbounded-iteration-over-all-protocols\">[L-09] Unbounded iteration over all protocols</a></li>\n<li><a href=\"#l-10-missing-verification-on-tokeninits-lock\">[L-10] Missing verification on <code>tokenInit</code>’s lock</a></li>\n<li><a href=\"#l-11-_dosherx-does-not-return-correct-precision-and-its-confusing\">[L-11] <code>_doSherX</code> does not return correct precision and it’s confusing</a></li>\n<li><a href=\"#l-12-anyone-can-unstake-on-behalf-of-someone\">[L-12] Anyone can unstake on behalf of someone</a></li>\n<li><a href=\"#l-13-sanitize-_weights-in-setweights-on-every-use\">[L-13] Sanitize <code>_weights</code> in <code>setWeights</code> on every use</a></li>\n<li><a href=\"#l-14-initializesherxerc20-can-be-called-more-than-once\">[L-14] <code>initializeSherXERC20</code> can be called more than once</a></li>\n<li><a href=\"#l-15-erc20-can-accidentally-burn-tokens\">[L-15] ERC20 can accidentally burn tokens</a></li>\n<li><a href=\"#l-16-extra-check-setunstakewindow-and-setcooldown\">[L-16] extra check <code>setUnstakeWindow</code> and <code>setCooldown</code></a></li>\n<li><a href=\"#l-17-delete-psstakebalance\">[L-17] delete <code>ps.stakeBalance</code></a></li>\n<li><a href=\"#l-18-prevent-div-by-0\">[L-18] prevent div by 0</a></li>\n<li><a href=\"#l-19-unbounded-loop-in-getinitialunstakeentry-\">[L-19] unbounded loop in <code>getInitialUnstakeEntry</code> </a></li>\n<li><a href=\"#l-20-prevent-burn-in-_transfer\">[L-20] prevent burn in <code>_transfer</code></a></li>\n<li><a href=\"#l-21-aavev2-approves-lending-pool-in-the-constructor\">[L-21] AaveV2 approves lending pool in the constructor</a></li>\n<li><a href=\"#l-22-inclusive-checks\">[L-22] Inclusive checks</a></li>\n<li><a href=\"#l-23-group-related-data-into-separate-structs\">[L-23] Group related data into separate structs</a></li>\n<li><a href=\"#l-24-re-entrancy-mitigation\">[L-24] Re-entrancy mitigation</a></li>\n<li><a href=\"#l-25-getinitialunstakeentry-when-unstakeentries-is-empty\">[L-25] <code>getInitialUnstakeEntry</code> when <code>unstakeEntries</code> is empty</a></li>\n<li><a href=\"#l-26-loops-may-exceed-gas-limit\">[L-26] Loops may exceed gas limit</a></li>\n<li><a href=\"#l-27-safemath-library-is-not-always-used-in-poolbase\">[L-27] <code>SafeMath</code> library is not always used in <code>PoolBase</code></a></li>\n<li><a href=\"#l-28-missing-non-zero-address-checks\">[L-28] Missing non-zero address checks</a></li>\n<li><a href=\"#l-29-possible-divide-by-zero-error-in-poolbase\">[L-29] Possible divide-by-zero error in <code>PoolBase</code></a></li>\n<li><a href=\"#l-30-inconsistent-block-number-comparison-when-deciding-an-unstaking-entry-is-active\">[L-30] Inconsistent block number comparison when deciding an unstaking entry is active</a></li>\n<li><a href=\"#l-31-tokens-cannot-be-reinitialized-with-new-lock-tokens\">[L-31] Tokens cannot be reinitialized with new lock tokens</a></li>\n</ul>\n</li>\n<li><a href=\"#non-critical-findings\">Non-Critical Findings</a></li>\n<li><a href=\"#gas-optimizations\">Gas Optimizations</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of the Sherlock smart contract system written in Solidity. The code contest took place between July 21—July 28.\n\n## Wardens\n\n14 Wardens contributed reports to the Sherlock code contest:\n\n1. [cmichel](https://twitter.com/cmichelio)\n2. [gpersoon](https://twitter.com/gpersoon)\n3. [shw](https://github.com/x9453)\n4. [pauliax](https://twitter.com/SolidityDev)\n5. [walker](https://twitter.com/JoranHonig)\n6. [hrkrshnn](https://twitter.com/_hrkrshnn)\n7. [jonah1005](https://twitter.com/jonah1005w)\n8. [hickuphh3](https://twitter.com/HickupH)\n9. [eriksal1217](https://twitter.com/eriksal1217)\n10. [patitonar](https://twitter.com/patitonar)\n11. [0xsanson](https://github.com/0xsanson)\n12. [tensors](https://twitter.com/Tensors8)\n13. [a_delamo](https://twitter.com/a_delamo)\n14. [bw](https://github.com/bernard-wagner)\n\nThis contest was judged by [ghoul.sol](https://twitter.com/ghoulsol).\n\nFinal report assembled by [moneylegobatman](https://twitter.com/money_lego) and [ninek](https://twitter.com/_ninek_).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 37 unique vulnerabilities. All of the issues presented here are linked back to their original finding\n\nOf these vulnerabilities, 2 received a risk rating in the category of HIGH severity, 4 received a risk rating in the category of MEDIUM severity, and 31 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 19 non-critical recommendations and 36 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Sherlock code contest repository](https://github.com/code-423n4/2021-07-sherlock) which is comprised of 50 smart contracts written in the Solidity programming language and includes 3,063 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (2)\n\n## [[H-01] Single under-funded protocol can break paying off debt](https://github.com/code-423n4/2021-07-sherlock-findings/issues/119)\n_Submitted by cmichel, also found by walker and gpersoon_\n\nThe `SherXERC20.payOffDebtAll` function iterates over all protocols of the token.\nIf _a single project_ does not have enough funds to cover the premium payments, the transactions come to a halt, see `_payOffDebt`:\n\n```solidity\ndebt = _accruedDebt(ps, _protocol, _blocks);\n// this can revert tx\nps.protocolBalance[_protocol] = ps.protocolBalance[_protocol].sub(debt);\n```\n\nMany core functions require paying off debt first and can therefore revert when a single protocol cannot pay the token premium:\n- `setTokenPrice`\n- `setProtocolPremium`\n- `withdrawProtocolBalance`\n- `redeem`\n- etc.\n\nThis scenario that a protocol is unable to pay a premium does not seem unlikely especially as there can be many protocols and each protocol can pay premiums in potentially many tokens and have to continuously re-deposit to their account to increase the balance.\nIt is also rather involved to remove the protocol's coverage and remove the premium payments for the token. It requires governance interaction and potentially paying for the accumulated debt themselves.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/119#issuecomment-889143141):**\n > This was a design tradeoff. As governance we can see it coming as the balance is slowly draining. But the fact the protocols are able to withdraw the full amount at any time could surprise the governance. (and make the reverts in the functions above happening)\n>\n> We are thinking to add a rule in the `withdrawProtocolBalance` to only allow withdrawals with at least 2 days of remaining balance. Allowing enough time for governance calls to remove the protocol.\n\n\n## [[H-02] [Bug] A critical bug in `bps` function](https://github.com/code-423n4/2021-07-sherlock-findings/issues/90)\n_Submitted by hrkrshnn, also found by jonah1005 and walker_\n\n``` solidity\nfunction bps() internal pure returns (IERC20 rt) {\n  // These fields are not accessible from assembly\n  bytes memory array = msg.data;\n  uint256 index = msg.data.length;\n\n  // solhint-disable-next-line no-inline-assembly\n  assembly {\n    // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n    rt := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n  }\n}\n```\n\nThe above function is designed to expect the token at the end of `calldata`, but a malicious user can inject extra values at the end of `calldata` and fake return values.\n\nThe following contract demonstrates an example:\n\n``` solidity\npragma solidity 0.8.6;\n\ninterface IERC20 {}\n\nerror StaticCallFailed();\n\ncontract BadEncoding {\n  /// Will return address(1). But address(0) is expected!\n  function f() external view returns (address) {\n    address actual = address(0);\n    address injected = address(1);\n\n    (bool success, bytes memory ret) = address(this).staticcall(abi.encodeWithSelector(this.g.selector, actual, injected));\n\n    if (!success) revert StaticCallFailed();\n\n    return abi.decode(ret, (address));\n  }\n  function g(IERC20 _token) external pure returns (IERC20) {\n    // to get rid of the unused warning\n    _token;\n    // Does it always match _token?\n    return bps();\n  }\n  // From Sherlock Protocol: PoolBase.sol\n  function bps() internal pure returns (IERC20 rt) {\n    // These fields are not accessible from assembly\n    bytes memory array = msg.data;\n    uint256 index = msg.data.length;\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n      rt := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n  }\n}\n```\n\nThis example can be used to exploit the protocol:\n\n``` solidity\nfunction unstake(\n  uint256 _id,\n  address _receiver,\n  IERC20 _token\n) external override returns (uint256 amount) {\n  PoolStorage.Base storage ps = baseData();\n  require(_receiver != address(0), 'RECEIVER');\n  GovStorage.Base storage gs = GovStorage.gs();\n  PoolStorage.UnstakeEntry memory withdraw = ps.unstakeEntries[msg.sender][_id];\n  require(withdraw.blockInitiated != 0, 'WITHDRAW_NOT_ACTIVE');\n  // period is including\n  require(withdraw.blockInitiated + gs.unstakeCooldown < uint40(block.number), 'COOLDOWN_ACTIVE');\n  require(\n    withdraw.blockInitiated + gs.unstakeCooldown + gs.unstakeWindow >= uint40(block.number),\n    'UNSTAKE_WINDOW_EXPIRED'\n  );\n  amount = withdraw.lock.mul(LibPool.stakeBalance(ps)).div(ps.lockToken.totalSupply());\n\n  ps.stakeBalance = ps.stakeBalance.sub(amount);\n  delete ps.unstakeEntries[msg.sender][_id];\n  ps.lockToken.burn(address(this), withdraw.lock);\n  _token.safeTransfer(_receiver, amount);\n}\n```\n\nState token `Token1`. Let's say there is a more expensive token\n`Token2`.\n\nHere's an example exploit:\n\n``` solidity\nbytes memory exploitPayload = abi.encodeWithSignature(\n  PoolBase.unstake.selector,\n  (uint256(_id), address(_receiver), address(Token2), address(Token1))\n);\npoolAddress.call(exploitPayload);\n```\n\nAll the calculations on `ps` would be done on `Token2`, but at the end, because of, `_token.safeTransfer(_receiver, amount);`, `Token2` would be transferred. Assuming that `Token2` is more expensive than `Token1`, the attacker makes a profit.\n\nSimilarly, the same technique can be used at a lot of other places. Even if this exploit is not profitable, the fact that the computations can be done on two different tokens is buggy.\n\nThere are several other places where the same pattern is used. All of them needs to be fixed. I've not written an exhaustive list.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/90)**\n\n# Medium Risk Findings (4)\n\n## [[M-01] Incorrect internal balance bookkeeping](https://github.com/code-423n4/2021-07-sherlock-findings/issues/12)\n_Submitted by walker, also found by cmichel and shw_\n\nThe sherlock smart contract system uses internal bookkeeping of arbitrary ERC20 token balances. It doesn't assert that the ERC20 doesn't implement some non-standard behavior. For example, deflationary tokens, or tokens with a transfer fee, will result in incorrect internal balances. In summary, an attacker can perform stake and deposit actions without actually depositing the amount that sherlock assumes. As a result, an attacker is unduly rewarded balance and yield.\n\n> Balancer had a similar vulnerability in their system https://blog.1inch.io/balancer-hack-2020-a8f7131c980e.\n\nAn example location where such internal bookkeeping happens can be found [here](https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/PoolBase.sol#L271)\n\nMitigating the issue is possible by requiring the amount to be added to the contracts' balance. Alternatively, it's possible to update the pool based on actual balance changes.\n\n**[Evert0x (Sherlock) acknowledged and disagreed with severity](https://github.com/code-423n4/2021-07-sherlock-findings/issues/12#issuecomment-890312115):**\n > 2 med-risk, as extensive research will be done before adding certain tokens. This finding could even be noted a 0 non-critical if only 'standard' ERC20s are being used.\n>\n> med-risk because certain popular tokens are up-gradable and could potentially implement non-standard behavior\n\n**[ghoul-sol (judge) commented](https://github.com/code-423n4/2021-07-sherlock-findings/issues/12#issuecomment-907912401):**\n > since there will be a curation process, I agree with sponsor, this is medium risk\n\n## [[M-02] `_doSherX` optimistically assumes premiums will be paid](https://github.com/code-423n4/2021-07-sherlock-findings/issues/107)\n_Submitted by cmichel_\n\nThe `_doSherX` function does not attempt to pay off the accrued premiums (\"pay off debt\") for most tokens, only for the ones that would otherwise revert the tx:\n\n```solidity\n// Expensive operation, only execute to prevent tx reverts\nif (amounts[i] > ps.sherXUnderlying) {\n  LibPool.payOffDebtAll(tokens[i]);\n}\n```\n\nThe `amounts = LibSherX.calcUnderlying(totalSherX)` array is an optimistic view assuming all outstanding, accrued premiums would indeed be paid until now. However, it could be that a protocol does not have enough balance to pay out these premiums and updating the state using `LibPool.payOffDebtAll(tokens[i]);` would fail for a token.\n\nAn inflated amount is then paid out to the user based on the optimistic `calcUnderlying` call.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/107#issuecomment-889148550):**\n > Fair point, the protocol is optimistic the protocols can payoff their debt.\n\n## [[M-03] reputation risks with `updateSolution`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/4)\n_Submitted by gpersoon_\n\n`GovDev.so`l has a function `updateSolution` to upgrade parts of the contract via the Diamond construction.\nVia `updateSolution`, any functionality can be changed and all the funds can be accessed/rugged.\nEven if this is well intended the project could still be called out resulting in a reputation risk, see for [example(https://twitter.com/RugDocIO/status/1411732108029181960).\n\nNote: there is a function `transferGovDev` which can be used to disable the `updateSolution`\n```solidity\n// https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/GovDev.sol#L25\nfunction updateSolution(IDiamondCut.FacetCut[] memory _diamondCut,address _init,bytes memory _calldata) external override {\n  require(msg.sender == LibDiamond.contractOwner(), 'NOT_DEV');\n  return LibDiamond.diamondCut(_diamondCut, _init, _calldata);\n}\n```\nRecommend applying extra safeguards for example to limit the time period where `updateSolution` can be used.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/4#issuecomment-889940845):**\n > Fair point, although we are not anonymous, we still want to mitigate this risk.\n>\n> I'm thinking something like this\n> - update is pushed, everyone can review the code changes\n> - 14 days of waiting, people are able to get their funds out\n> - update is executed.\n>\n> Downside is that it doesn't allow us to fix potential critical issues fast.\n\n## [[M-04] Yield distribution after large payout seems unfair](https://github.com/code-423n4/2021-07-sherlock-findings/issues/50)\n_Submitted by gpersoon_\n\nWhen a large payout occurs, it will lower `unallocatedSherX`. This could mean some parties might not be able to get their Yield.\n\nThe first couple of users (for which harvest is called or which transfer tokens) will be able to get their full Yield, until the moment `unallocatedSherX` is depleted. The next users don't get any yield at all. This doesn't seem fair.\n\n```solidity\n// https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/SherX.sol#L309\nfunction doYield(ILock token,address from, address to, uint256 amount) private {\n...\nps.unallocatedSherX = ps.unallocatedSherX.sub(withdrawable_amount);\n\n//https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/Payout.sol#L108\n function payout( address _payout, IERC20[] memory _tokens, uint256[] memory _firstMoneyOut, uint256[] memory _amounts, uint256[] memory _unallocatedSherX,  address _exclude ) external override onlyGovPayout {\n    // all pools (including SherX pool) can be deducted fmo and balance\n    // deducting balance will reduce the users underlying value of stake token\n    // for every pool, _unallocatedSherX can be deducted, this will decrease outstanding SherX rewards\n    // for users that did not claim them (e.g materialized them and included in SherX pool)\n....\n    // Subtract from unallocated, as the tokens are now allocated to this payout call\n        ps.unallocatedSherX = ps.unallocatedSherX.sub(unallocatedSherX);\n```\n\nRecommend that If `unallocatedSherX` is insufficient to provide for all the yields, only give the yields partly (so that each user gets their fair share).\n\n**[Evert0x (Sherlock) disputed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/50#issuecomment-889996060):**\n > Not only `unallocatedSherX` is subtracted but also `sWeight`, which is used to calculate the reward. I wrote some extra tests and in my experience the remaining SherX (in the unallocatedSherX variable) is splitted in a fair way.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/50#issuecomment-891724441):**\n > Together with gpersoon I discussed both issue #49 and #50 and based on both findings we found a med-risk issue. In case `payout()` is called with `_unallocatedSherX > 0` and a user called `harvest()` before the payout call. It blocks the user from calling `harvest()` again. + blocks the lock token transfer.\n>\n> Mitigations step is to stop calling `payout()` with `_unallocatedSherX > 0`\n\n# Low Risk Findings (31)\n\n## [[L-01] Gov.sol: Use `SafeERC20.safeApprove` in `tokenUnload()`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/51)\n_Submitted by hickuphh3, also found by eriksal1217 and shw_\n\nThis is probably an oversight since `SafeERC20` was imported and `safeTransfer()` was used for ERC20 token transfers. Nevertheless, note that `approve()` will fail for certain token implementations that do not return a boolean value (Eg. OMG and ADX tokens). Hence it is recommend to use `safeApprove()`.\n\nRecommend updating to `_token.safeApprove(address(_native), totalToken)` in `tokenUnload()`.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/51)**\n\n## [[L-02] `withdraw` returns the final amount withdrawn](https://github.com/code-423n4/2021-07-sherlock-findings/issues/78)\n_Submitted by pauliax, also found by eriksal1217_\n\nfunction `withdraw` in ILendingPool returns the actual withdrawn amount, however, function `withdraw` in AaveV2 strategy does not check this return value so e.g. function strategyWithdraw may actually withdraw less but still add the full amount to the staked balance:\n```solidity\n    ps.strategy.withdraw(_amount);\n    ps.stakeBalance = ps.stakeBalance.add(_amount);\n```\n\nRecommend that function `withdraw` in `IStrategy` should return uint indicating the actual withdrawn amount and functions that use it should account for that.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/78#issuecomment-889330294):**\n > When looking at the LendingPool withdraw implementation: https://github.com/aave/protocol-v2/blob/master/contracts/protocol/lendingpool/LendingPool.sol#L142\n>\n> It will revert if the _amount > balance. It basically only returns a different value then _amount in case it is uint256(-1), correct?\n\n## [[L-03] series of divs](https://github.com/code-423n4/2021-07-sherlock-findings/issues/24)\n_Submitted by gpersoon, also found by hickuphh3 and shw_\n\nThe function `payout` contains an expression with 3 sequential divs. This is generally not recommended because it could lead to rounding errors / loss of precision. Also, a div is usually more expensive than a mul. Also, an intermediate division by 0 (if `SherXERC20Storage.sx20().totalSupply` == 0) could occur.\n\n```solidity\n//https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/Payout.sol#L108\nfunction payout(\n..\nuint256 deduction =  excludeUsd.div(curTotalUsdPool.div(SherXERC20Storage.sx20().totalSupply)).div(10e17);\n```\n\nRecommend verifying the formula and replace with something like:\n```solidity\nuint256 deduction =  excludeUsd.mul(SherXERC20Storage.sx20().totalSupply).div(  curTotalUsdPool.mul(10e17) )\n```\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/24)**\n\n## [[L-04] ERC20 non-standard names](https://github.com/code-423n4/2021-07-sherlock-findings/issues/117)\n_Submitted by cmichel, also found by shw_\n\nUsually, the functions to increase the allowance are called `increaseAllowance` and `decreaseAllowance` but in `SherXERC20` they are called `increaseApproval` and `decreaseApproval`\n\nRecommend renaming these functions to the more common names.\n\n[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/117) sponsor confirmed- [Evert0x (Sherlock) labeled](https://github.com/code-423n4/2021-07-sherlock-findings/issues/117) disagree with severity\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/117#issuecomment-889109082):**\n > Good point https://docs.openzeppelin.com/contracts/2.x/api/token/erc20#ERC20\n\n**[Evert0x (Sherlock) disagreed with severity](https://github.com/code-423n4/2021-07-sherlock-findings/issues/117#issuecomment-889110446):**\n > 0 non-critical\n\n**[ghoul-sol (judge) commented](https://github.com/code-423n4/2021-07-sherlock-findings/issues/117#issuecomment-907919774):**\n > I agree with warden, low risk looks reasonable here.\n\n## [[L-05] User's `calcUnderlyingInStoredUSD` value is underestimated](https://github.com/code-423n4/2021-07-sherlock-findings/issues/144)\n_Submitted by shw_\n\nThe `calcUnderlyingInStoredUSD()` function of `SherX` should return `calcUnderlyingInStoredUSD(getSherXBalance())` instead of `calcUnderlyingInStoredUSD(sx20.balances[msg.sender])` since there could be `SherX` unallocated to the user at the time of the function call. A similar function, `calcUnderlying()`, calculates the user's underlying tokens based on the user's current balance plus the unallocated ones.\n\nRecommend changing `sx20.balances[msg.sender]` to `getSherXBalance()` at [L141](https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/SherX.sol#L141) in `SherX.sol`.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/144#issuecomment-890312866):**\n > 1 (low risk); as the function is called '..inStored..', at it is using the stored variables. I agree it is a confusing function name.\n\n**[ghoul-sol (judge) disagreed with severity](https://github.com/code-423n4/2021-07-sherlock-findings/issues/144#issuecomment-907921044):**\n > agree with sponsor, low risk\n\n## [[L-06] `PoolStrategy.sol`: Consider minimizing trust with implemented strategies](https://github.com/code-423n4/2021-07-sherlock-findings/issues/44)\n_Submitted by hickuphh3, also found by shw_\n\n`PoolStrategy` trusts the implemented strategy `ps.strategy` (Eg. `AaveV2.sol`) to:\n- return the right amount for `ps.strategy.balanceOf()`\n- have sent back the withdrawn funds when `ps.strategy.withdraw()` is called\n- report the correct withdrawn amount when `ps.strategy.withdrawAll()` is called\n\nWhile `ps.strategy` is assumed to have been scrutinized and  its code verified before adding it as a strategy, and can therefore be trusted, consider minimizing trust between `PoolStrategy` and `ps.strategy`, since strategies are themselves reliant on other protocols and therefore subject to external risk.\n\n- Verify the amount sent back to `PoolStrategy` for withdrawals instead\n- The reliance on `balanceOf()` can be mitigated slightly by using a counter `uint256 depositedAmount` that increments / decrements upon deposits and withdrawals to the strategy respectively. This value can then be used in lieu of `ps.strategy.balanceOf()`. However, the downsides to this are that\n    - this counter does not account for yield amounts from the strategy and\n    - it increases complexity\n\nA simple implementation to checking the withdrawal amounts is provided below.\n\n```jsx\nfunction strategyWithdraw(uint256 _amount, IERC20 _token) external override {\n  ...\n  uint256 balanceBefore = _token.balanceOf(address(this));\n  ps.strategy.withdraw(_amount);\n  require(balanceBefore.add(_amount) == _token.balanceOf(address(this)), \"REASON\");\n  ps.stakeBalance = ps.stakeBalance.add(_amount);\n}\n\nfunction strategyWithdrawAll(IERC20 _token) external override {\n  PoolStorage.Base storage ps = baseData();\n  _enforceGovPool(ps);\n  _enforceStrategy(ps);\n\n  uint256 balanceBefore = _token.balanceOf(address(this));\n  ps.strategy.withdrawAll();\n  // alternatively, verify amount returned by withdrawAll() method\n  uint256 amount = _token.balanceOf(address(this)).sub(balanceBefore);\n  ps.stakeBalance = ps.stakeBalance.add(amount);\n  }\n```\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/44)**\n\n**[ghoul-sol (judge) commented](https://github.com/code-423n4/2021-07-sherlock-findings/issues/44#issuecomment-907934239):**\n > This looks like low risk issue.\n\n## [[L-07] Unbounded iteration over all premium tokens](https://github.com/code-423n4/2021-07-sherlock-findings/issues/102)\n_Submitted by cmichel_\n\nThe `Gov.protocolRemove` function iterates over all elements of the `tokensSherX` array.\n\nThe transactions could fail if the arrays get too big and the transaction would consume more gas than the block limit.\nThis will then result in a denial of service for the desired functionality and break core functionality.\n\nThe severity is low as only governance can whitelist these tokens but not the protocols themselves.\n\nRecommendation is to keep the array size small.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/102)**\n\n## [[L-08] Unbounded iteration over all staking tokens](https://github.com/code-423n4/2021-07-sherlock-findings/issues/103)\n_Submitted by cmichel_\n\nThe `SherX.getTotalSherXUnminted` function iterates over all elements of the `tokensStaker` array.\n\nThe transactions could fail if the arrays get too big and the transaction would consume more gas than the block limit.\nThis will then result in a denial of service for the desired functionality and break core functionality.\n\nThe severity is low as only governance can whitelist these tokens but not the protocols themselves.\n\nRecommend keeping the array size small.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/103)**\n\n## [[L-09] Unbounded iteration over all protocols](https://github.com/code-423n4/2021-07-sherlock-findings/issues/104)\n_Submitted by cmichel_\n\nThe `LibPool.payOffDebtAll` function iterates over all elements of the `ps.protocols` array.\n\nThe transactions could fail if the arrays get too big and the transaction would consume more gas than the block limit.\nThis will then result in a denial of service for the desired functionality and break core functionality.\n\nThe severity is low as only governance can whitelist protocols per token but not the protocols themselves.\n\nRecommendation is to keep the array size small.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/104)**\n\n## [[L-10] Missing verification on `tokenInit`'s lock](https://github.com/code-423n4/2021-07-sherlock-findings/issues/105)\n_Submitted by cmichel_\n\nThe `Gov.tokenInit` skips the underlying token check if the `_token` is SHERX:\n\n```solidity\nif (address(_token) != address(this)) {\n  require(_lock.underlying() == _token, 'UNDERLYING');\n}\n```\n\nThis check should still be performed even for `_token == address(this) // SHERX`, otherwise, the lock can have a different underlying and potentially pay out wrong tokens.\n\nRecommendation is to verify the underlying of all locks.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/105)**\n\n**[Evert0x (Sherlock) commented](https://github.com/code-423n4/2021-07-sherlock-findings/issues/105#issuecomment-889137829):**\n > Good catch!\n\n## [[L-11] `_doSherX` does not return correct precision and it's confusing](https://github.com/code-423n4/2021-07-sherlock-findings/issues/108)\n_Submitted by cmichel_\n\nThe `_doSherX` function does not return the correct precision of `sherUsd` and it is **not** the \"Total amount of USD of the underlying tokens that are being transferred\" that the documentation mentions.\n\n```solidity\nsherUsd = amounts[i].mul(sx.tokenUSD[tokens[i]]);\n```\n\nInstead, the amount is inflated by `1e18`, it should divide the amount by `1e18` to get a USD value with 18 decimal precision.\n\nThe severity is low as the calling site in `payout` makes up for it by dividing by `1e18` in the `deduction` computation.\n\nWe still recommend returning the correct amount in `_doSherX` already to match the documentation and avoid any future errors when using its unintuitive return value.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/108)**\n\n## [[L-12] Anyone can unstake on behalf of someone](https://github.com/code-423n4/2021-07-sherlock-findings/issues/114)\n_Submitted by cmichel_\n\nThe `PoolBase.unstakeWindowExpiry` function allows unstaking tokens of other users.\nWhile the tokens are sent to the correct address, this can lead to issues with smart contracts that might rely on claiming the tokens themselves.\n\nFor example, suppose the `_to` address corresponds to a smart contract that has a function of the following form:\n```solidity\nfunction withdrawAndDoSomething() {\n    uint256 amount = token.balanceOf(address(this));\n    contract.unstakeWindowExpiry(address(this), id, token);\n    amount = amount - token.balanceOf(address(this));\n    token.transfer(externalWallet, amount)\n}\n```\nRecommend considering that, If the contract has no other functions to transfer out funds, they may be locked forever in this contract.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/114)**\n\n## [[L-13] Sanitize `_weights` in `setWeights` on every use](https://github.com/code-423n4/2021-07-sherlock-findings/issues/115)\n_Submitted by cmichel_\n\nThe `setWeights` function only stores the `uint16` part of `_weights[i]` in storage (`ps.sherXWeight = uint16(_weights[i])`).\nHowever, to calculate `weightAdd/weightSub` the full value (not truncated to 16 bits) is used.\nThis can lead to discrepancies as the actually added part is different from the one tracked in the `weightAdd` variable.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/115#issuecomment-889122225):**\n > Your recommendation is to do `.add(uint16(_weights[i]))` for both weightAdd and weightSub?\n\n## [[L-14] `initializeSherXERC20` can be called more than once](https://github.com/code-423n4/2021-07-sherlock-findings/issues/116)\n_Submitted by cmichel, also found by pauliax_\n\nThe `SherXERC20.initializeSherXERC20` function has `initialize` in its name which indicates that it should only be called once to initialize the storage. But it can be repeatedly called to overwrite and update the ERC20 name and symbol.\n\nRecommend considering an `initializer` modifier or reverting if `name` or `symbol` is already set.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/116)**\n\n## [[L-15] ERC20 can accidentally burn tokens](https://github.com/code-423n4/2021-07-sherlock-findings/issues/118)\n_Submitted by cmichel, also found by shw_\n\nThe `SherXERC20.transfer`/`transferFrom` actions allow transferring tokens to the zero address.\nThis is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/118#issuecomment-889103134):**\n > Does it make more sense to include an extra `burn()` function? As removing the possibility to send to zero address removes the ability to burn.\n\n## [[L-16] extra check `setUnstakeWindow` and `setCooldown`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/18)\n_Submitted by gpersoon_\n\nThe function `setUnstakeWindow` and `setCooldown` don't check that the input parameter isn't 0. So the values could accidentally be set to 0 (although unlikely).\nHowever you wouldn't want the to be 0 because that would allow attacks with flashloans (stake and unstake in the same transaction)\n\n```solidity\nhttps://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/Gov.sol#L124\n function setUnstakeWindow(uint40 _unstakeWindow) external override onlyGovMain {\n    require(_unstakeWindow < 25000000, 'MAX'); // ~ approximate 10 years of blocks\n    GovStorage.gs().unstakeWindow = _unstakeWindow;\n  }\n\n  function setCooldown(uint40 _period) external override onlyGovMain {\n    require(_period < 25000000, 'MAX'); // ~ approximate 10 years of blocks\n    GovStorage.gs().unstakeCooldown = _period;\n  }\n```\nRecommend checking the input parameter of `setUnstakeWindow` and `setCooldown` isn't 0\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/18)**\n\n## [[L-17] delete `ps.stakeBalance`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/20)\n_Submitted by gpersoon_\n\nIn the function `tokenUnload`, `ps.stakeBalance` is only deleted if balance >0. e.g it is deleted if `ps.stakeBalance` > ps.firstMoneyOut\nSo if `ps.stakeBalance` ==  ps.firstMoneyOut then `ps.stakeBalance` will not be deleted.\nAnd then a call to tokenRemove will revert, because it checks for `ps.stakeBalance` to be 0\n\n```solidity\n// https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/Gov.sol#L271\n function tokenUnload( IERC20 _token, IRemove _native, address _remaining ) external override onlyGovMain {\n...\n    uint256 balance = ps.stakeBalance.sub(ps.firstMoneyOut);\n    if (balance > 0) {\n      _token.safeTransfer(_remaining, balance);\n      delete ps.stakeBalance;\n    }\n..\n  delete ps.firstMoneyOut;\n\n function tokenRemove(IERC20 _token) external override onlyGovMain {\n  ...\n    require(ps.stakeBalance == 0, 'BALANCE_SET');\n }\n```\nRecommend checking what to do in this edge case and add the appropriate code.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/20)**\n\n## [[L-18] prevent div by 0](https://github.com/code-423n4/2021-07-sherlock-findings/issues/22)\n_Submitted by gpersoon_\n\nOn several locations in the code precautions are taken not to divide by 0, because this will revert the code.\nHowever on some locations this isn't done.\n\nEspecially in `doYield` a first check is done for totalAmount >0, however a few lines later there is an other div(totalAmount) which isn't checked.\n\nThe proof of concept show another few examples.\n\n```solidity\n// https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/SherX.sol#L309\nfunction doYield(ILock token,address from,address to,uint256 amount) private {\n..\n    uint256 totalAmount = ps.lockToken.totalSupply();\n..\n    if (totalAmount > 0) {\n      ineglible_yield_amount = ps.sWeight.mul(amount).div(totalAmount);\n    } else {\n      ineglible_yield_amount = amount;\n    }\n    if (from != address(0)) {\n      uint256 raw_amount = ps.sWeight.mul(userAmount).div(totalAmount);  // totalAmount could be 0, see lines above\n\n// https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/PoolBase.sol#L295\nfunction activateCooldown(uint256 _amount, IERC20 _token) external override returns (uint256) {\n...   uint256 tokenAmount = fee.mul(LibPool.stakeBalance(ps)).div(ps.lockToken.totalSupply());   // ps.lockToken.totalSupply() might be 0\n\n//https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/PoolBase.sol#L351\n function unstake( uint256 _id, address _receiver, IERC20 _token ) external override returns (uint256 amount) {\n...    amount = withdraw.lock.mul(LibPool.stakeBalance(ps)).div(ps.lockToken.totalSupply());  // // ps.lockToken.totalSupply() might be 0\n\n//https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/libraries/LibPool.sol#L67\n function stake( PoolStorage.Base storage ps,uint256 _amount, address _receiver ) external returns (uint256 lock) {\n...      lock = _amount.mul(totalLock).div(stakeBalance(ps));   // stakeBalance(ps) might be 0\n```\n\nRecommend making sure division by 0 won't occur by checking the variables beforehand and handling this edge case.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/22#issuecomment-889374333):**\n > > if (from != address(0)) {\n> uint256 raw_amount = ps.sWeight.mul(userAmount).div(totalAmount); // totalAmount could be 0, see lines above\n>\n> If totalAmount == 0, from is always address(0). As no one holds this lockToken and it's being minted\n\n**[Evert0x (Sherlock) commented](https://github.com/code-423n4/2021-07-sherlock-findings/issues/22#issuecomment-889375151):**\n > > function activateCooldown(uint256 _amount, IERC20 _token) external override returns (uint256) {\n> ... uint256 tokenAmount = fee.mul(LibPool.stakeBalance(ps)).div(ps.lockToken.totalSupply()); // ps.lockToken.totalSupply() might be 0\n>\n> Can not be 0, as there is lockToken being transferred `require(_amount > 0, 'AMOUNT');`, so the value is at least 1.\n\n**[Evert0x (Sherlock) commented](https://github.com/code-423n4/2021-07-sherlock-findings/issues/22#issuecomment-889375756):**\n > > function unstake( uint256 _id, address _receiver, IERC20 _token ) external override returns (uint256 amount) {\n> ... amount = withdraw.lock.mul(LibPool.stakeBalance(ps)).div(ps.lockToken.totalSupply()); // // ps.lockToken.totalSupply() might be 0\n>\n> Can not be 0, as there is lockToken in the contract, waiting to be transferred back to the user\n\n**[Evert0x (Sherlock) commented](https://github.com/code-423n4/2021-07-sherlock-findings/issues/22#issuecomment-889377873):**\n > > function stake( PoolStorage.Base storage ps,uint256 _amount, address _receiver ) external returns (uint256 lock) {\n> ... lock = _amount.mul(totalLock).div(stakeBalance(ps)); // stakeBalance(ps) might be 0\n>\n> Can not be 0 (most of the times), as there are already lockTokens in circulation, which means someone has deposited BUT the balance could be fully depleted because of a `payout()` call which could make it 0.\n>\n> Thanks!\n\n## [[L-19] unbounded loop in `getInitialUnstakeEntry` ](https://github.com/code-423n4/2021-07-sherlock-findings/issues/26)\n_Submitted by gpersoon_\n\nThe functions `getInitialUnstakeEntry` contains a for loop that can be unbounded. This would mean it could run out of gas and the function would revert.\nThe array `unstakeEntries` can be made arbitrarily large by repeatedly calling activateCooldown with a small amount of tokens.\n\nThe impact is very low because the array `unstakeEntries` is separated per user and links to `mgs.sender`, so you can only shoot yourself in your foot.\n\nAdditionally the function `getInitialUnstakeEntry` isn't used in the smart contracts.\n```solidity\n//https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/PoolBase.sol#L123\n function getInitialUnstakeEntry(address _staker, IERC20 _token)  external view  override returns (uint256)  {\n...\nfor (uint256 i = 0; i < ps.unstakeEntries[_staker].length; i++) {\n      if (ps.unstakeEntries[_staker][i].blockInitiated == 0) {\n\nfunction activateCooldown(uint256 _amount, IERC20 _token) external override returns (uint256) {\n    require(_amount > 0, 'AMOUNT');\n...\n    ps.unstakeEntries[msg.sender].push(PoolStorage.UnstakeEntry(uint40(block.number), _amount.sub(fee)) );\n```\n\nRecommend probably accepting the situation and add a comment in the function `getInitialUnstakeEntry`\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/26)**\n\n## [[L-20] prevent burn in `_transfer`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/29)\n_Submitted by gpersoon_\n\nThe function `_transfer` in SherXERC20.sol allow transfer to address 0.\nThis is usually considered the same as burning the tokens and the `Emit` is indistinguishable from an `Emit` of a burn.\n\nHowever the burn function in LibSherXERC20.sol has extra functionality, which `_transfer` doesn't have.\n`sx20.totalSupply = sx20.totalSupply.sub(_amount);`\n\nSo it is safer to prevent `_transfer` to address 0 (which is also done in the openzeppelin erc20 contract)\nSee:  https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol#L226\n\nNote: minting from address 0 will not work because that is blocked by the `safemath` sub in:\n `sx20.balances[_from] = sx20.balances[_from].sub(_amount);`\n```solidity\nhttps://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/facets/SherXERC20.sol#L118\nfunction _transfer(address _from, address _to, uint256 _amount) internal {\n  SherXERC20Storage.Base storage sx20 = SherXERC20Storage.sx20();\n  sx20.balances[_from] = sx20.balances[_from].sub(_amount);\n  sx20.balances[_to] = sx20.balances[_to].add(_amount);\n  emit Transfer(_from, _to, _amount);\n}\n\n// https://github.com/code-423n4/2021-07-sherlock/blob/main/contracts/libraries/LibSherXERC20.sol#L29\nfunction burn(address _from, uint256 _amount) internal {\n  SherXERC20Storage.Base storage sx20 = SherXERC20Storage.sx20();\n  sx20.balances[_from] = sx20.balances[_from].sub(_amount);\n  sx20.totalSupply = sx20.totalSupply.sub(_amount);\n  emit Transfer(_from, address(0), _amount);\n}\n```\n\nRecommend adding something like to following to `_transfer` of SherXERC20.sol:\n```solidity\n        require(_to!= address(0), \"Transfer to the zero address\");\n```\nOr, updating `sx20.totalSupply` if burning a desired operation.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/29)**\n\n## [[L-21] AaveV2 approves lending pool in the constructor](https://github.com/code-423n4/2021-07-sherlock-findings/issues/65)\n_Submitted by pauliax_\n\nContract AaveV2 does not cache the lending pool, it retrieves it when necessary by calling a function `getLp()`. This is great as the implementation may change, however, this contract also approves an unlimited amount of want in the constructor:\n```solidity\n  ILendingPool lp = getLp();\n  want.approve(address(lp), uint256(-1));\nso if the implementation changes, the approval will reset. This will break the deposit function as it will try to deposit to this new lending pool with 0 approval.\n```\nFor reference, function [`setLendingPoolImpl`](https://github.com/aave/aave-protocol/blob/4b4545fb583fd4f400507b10f3c3114f45b8a037/contracts/configuration/LendingPoolAddressesProvider.sol#L58-L65).\n\nNot sure how likely is that lending pool implementation will change so marking this as 'Low'.\n\nRecommend that before calling `lp.deposit` check that the approval is sufficient and increase otherwise.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/65)**\n\n## [[L-22] Inclusive checks](https://github.com/code-423n4/2021-07-sherlock-findings/issues/68)\n_Submitted by pauliax_\n\nI think these checks should be inclusive:\n```solidity\n  require(_unstakeWindow < 25000000, 'MAX');\n  require(_period < 25000000, 'MAX');\n  if (_amount > oldValue) // >= will reduce gas here\n```\n```solidity\n  require(_unstakeWindow <= 25000000, 'MAX');\n  require(_period <= 25000000, 'MAX');\n  if (_amount >= oldValue)\n```\n\n## [[L-23] Group related data into separate structs](https://github.com/code-423n4/2021-07-sherlock-findings/issues/69)\n_Submitted by pauliax_\n\nIn Base struct having 3 separate fields that map from _protocol is error-prone. If you later introduce new fields, etc, you need not forget to delete them in function protocolRemove, etc. I think it would be better to have a separate struct for protocol-related data and map to that.\n\nAn example solution, replace:\n\n```solidity\n  mapping(bytes32 => address) protocolManagers;\n  mapping(bytes32 => address) protocolAgents;\n  mapping(bytes32 => bool) protocolIsCovered;\n```\nwith:\n```solidity\nstruct ProtocolInfo {\n  address manager;\n  address agent;\n  bool covered;\n}\nstruct Base {\n  ...\n  mapping(bytes32 => ProtocolInfo) protocolInfo;\n  ...\n}\n```\nThen you can delete all fields this way: delete `gs.protocolInfo[_protocol]`; Similar solution may be applied to `PoolStorage` (`protocolBalance`, `protocolPremium`, `isProtocol`).\n\n\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/69)**\n\n## [[L-24] Re-entrancy mitigation](https://github.com/code-423n4/2021-07-sherlock-findings/issues/70)\n_Submitted by pauliax_\n\nI see no re-entrancy mitigations. Contracts interact with various outside sources (tokens, aave pools, other possible strategies that may be added in the future, etc). so, for instance, now you have to be careful and do not allow tokens that have a receiver callback (e.g. erc777) or untrustable sources of yield (strategies).\n\n\nConsider using [ReentrancyGuard](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol) on main action functions.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/70)**\n\n## [[L-25] `getInitialUnstakeEntry` when `unstakeEntries` is empty](https://github.com/code-423n4/2021-07-sherlock-findings/issues/92)\n_Submitted by pauliax_\n\nWhen the address has no unstake entries, function `getInitialUnstakeEntry` still returns 0 index. This function is external but can still confuse the outside consumers.\n\nRecommend considering  requiring `ps.unstakeEntries[_staker].length > 0;`\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/92)**\n\n## [[L-26] Loops may exceed gas limit](https://github.com/code-423n4/2021-07-sherlock-findings/issues/93)\n_Submitted by pauliax_\n\nProbably you are aware of this, but as I see many for loops throughout the code iterating over dynamic arrays I suggest being very careful as the execution may exceed the block gas limit, consume all the gas provided, and fail. Some arrays have removal functions, but there is, for instance, `unstakeEntries` array that is never actually removed as 'delete ps.unstakeEntries[msg.sender][_id];' only resets the values to default.\n\nYou can consider introducing max limits on items in the arrays or make sure that elements can be removed from dynamic arrays in case it becomes too large.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/93)**\n\n## [[L-27] `SafeMath` library is not always used in `PoolBase`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/133)\n_Submitted by shw_\n\n`SafeMath` library functions are not always used in arithmetic operations in the `PoolBase` contract, which could potentially cause integer underflow/overflows. Although in the reference lines of code, there are upper limits on the variables to ensure an integer underflow/overflow could not happen, using `SafeMath` is always a best practice, which prevents underflow/overflows completely (even if there were no assumptions on the variables) and increases code consistency as well.\n\nRecommend considering using the `SafeMath` library functions in the referenced lines of code.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/133)**\n\n## [[L-28] Missing non-zero address checks](https://github.com/code-423n4/2021-07-sherlock-findings/issues/135)\n_Submitted by shw_\n\nAdding non-zero address checks on the following function's parameters can help ensure the ownership of contracts is not lost or the contracts do not need to be redeployed if any of them is provided as zero accidentally.\n\nRecommend considering adding non-zero address checks on the parameters.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/135#issuecomment-890309347):**\n > `GovDev.sol#L19-L23` is used to eventually renounce the role, but maybe it makes sense to create a different function for that.\n\n## [[L-29] Possible divide-by-zero error in `PoolBase`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/136)\n_Submitted by shw_\n\nA possible divide-by-zero error could happen in the `getSherXPerBlock(uint256, IERC20)` function of `PoolBase` when the `totalSupply` of `lockToken` and `_lock` are both 0.\nRecommend checking  if `baseData().lockToken.totalSupply().add(_lock)` equals to 0 before line 214. If so, then return 0.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/136)**\n\n## [[L-30] Inconsistent block number comparison when deciding an unstaking entry is active](https://github.com/code-423n4/2021-07-sherlock-findings/issues/139)\n_Submitted by shw_\n\nThe `getInitialUnstakeEntry` function of `PoolBase` returns the first active unstaking entry of a staker, which requires the current block to be strictly before the last block in the unstaking window. However, the `unstake` function allows the current block to be exactly the same as the last block (same logic in `unstakeWindowExpiry`).\n\nRecommend changing the `<=` comparison at line 136 to `<` for consistency.\n\n**[Evert0x (Sherlock) confirmed](https://github.com/code-423n4/2021-07-sherlock-findings/issues/139)**\n\n## [[L-31] Tokens cannot be reinitialized with new lock tokens](https://github.com/code-423n4/2021-07-sherlock-findings/issues/141)\n_Submitted by shw_\n\nA token cannot be reinitialized with a new lock token once it is set to a non-zero address. If the lock token needs to be changed (for example, because of implementation errors), the token must be removed and added again.\n\nConsider removing the `if` condition at line 219 to allow the lock token to be reinitialized.\n\n**[Evert0x (Sherlock) acknowledged](https://github.com/code-423n4/2021-07-sherlock-findings/issues/141#issuecomment-890311394):**\n > Upgrading the lockToken a pretty complex procedure. As old lockTokens suddenly become worthless.\n\n# Non-Critical Findings\n\n- [[N-01] [PoolBase.sol] Calculations are being divided before being multiplied ](https://github.com/code-423n4/2021-07-sherlock-findings/issues/61)\n- [[N-02]\t[ForeignLock.sol] Local Variables Shadowing other variables](https://github.com/code-423n4/2021-07-sherlock-findings/issues/56)\n- [[N-03] transferFrom when from = to](https://github.com/code-423n4/2021-07-sherlock-findings/issues/64)\n- [[N-04] Different solidity pramas](https://github.com/code-423n4/2021-07-sherlock-findings/issues/16)\n- [[N-05] Poorly Named variables](https://github.com/code-423n4/2021-07-sherlock-findings/issues/123)\n- [[N-06] NatSpec typo in `_doSherX` @return](https://github.com/code-423n4/2021-07-sherlock-findings/issues/125)\n- [[N-07] Confusing exponentiation (10e17)](https://github.com/code-423n4/2021-07-sherlock-findings/issues/129)\n- [[N-08] typo: `ineglible_yield_amount` -> `ineligible_yield_amount`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/62)\n- [[N-09] Define Global Constants](https://github.com/code-423n4/2021-07-sherlock-findings/issues/30)\n- [[N-10] confusing comment in protocolUpdate](https://github.com/code-423n4/2021-07-sherlock-findings/issues/19)\n- [[N-11] don't use add(add.sub(sub)](https://github.com/code-423n4/2021-07-sherlock-findings/issues/23)\n- [[N-12] Gov.sol: Non-intuitive comment in tokenRemove()](https://github.com/code-423n4/2021-07-sherlock-findings/issues/33)\n- [[N-13] PoolBase.sol: Consider returning 0 instead of reverting in LockToToken()](https://github.com/code-423n4/2021-07-sherlock-findings/issues/42)\n- [[N-14] SherX.sol: Change variable names weightSub and weightAdd to totalWeightOld and totalWeightNew](https://github.com/code-423n4/2021-07-sherlock-findings/issues/45)\n- [[N-15] SherX.sol: Redeeming SherX may run out of gas](https://github.com/code-423n4/2021-07-sherlock-findings/issues/46)\n- [[N-16] SherX.sol: Unsafe casting of _weights  in setWeights()](https://github.com/code-423n4/2021-07-sherlock-findings/issues/47)\n- [[N-17] General suggestions](https://github.com/code-423n4/2021-07-sherlock-findings/issues/89)\n- [[N-18] Use EnumerableSet to store protocols](https://github.com/code-423n4/2021-07-sherlock-findings/issues/63)\n- [[N-19] Check _aaveLmReceiver and _sherlock are not empty](https://github.com/code-423n4/2021-07-sherlock-findings/issues/95)\n\n# Gas Optimizations\n\n- [[G-01] gas reduction in `calcUnderlying`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/124)\n- [[G-02] uncheckable math in `payout()`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/126)\n- [[G-03] Uncheckable math in `redeem()`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/127)\n- [[G-04] [Gas optimizations] - Public functions that are public, but could be external](https://github.com/code-423n4/2021-07-sherlock-findings/issues/112)\n- [[G-05] Make variables immutable or constant](https://github.com/code-423n4/2021-07-sherlock-findings/issues/1)\n- [[G-06] `SherX.setWeights` only accrue _tokens](https://github.com/code-423n4/2021-07-sherlock-findings/issues/96)\n- [[G-07] `payout` does token transfers twice](https://github.com/code-423n4/2021-07-sherlock-findings/issues/97)\n- [[G-08] `increaseApproval` gas improval](https://github.com/code-423n4/2021-07-sherlock-findings/issues/98)\n- [[G-09] [Optimization] Caching variable](https://github.com/code-423n4/2021-07-sherlock-findings/issues/81)\n- [[G-10] [Optimization] Packing various structs carefully](https://github.com/code-423n4/2021-07-sherlock-findings/issues/85)\n- [[G-11] Two functions with the same implementation](https://github.com/code-423n4/2021-07-sherlock-findings/issues/17)\n- [[G-12] x > 0 ==> x!=0](https://github.com/code-423n4/2021-07-sherlock-findings/issues/21)\n- [[G-13] Gov.sol: Consider abstracting protocolUpdate() and protocolDepositAdd() to avoid duplicate checks](https://github.com/code-423n4/2021-07-sherlock-findings/issues/31)\n- [[G-14] Gov.sol: Optimise protocolRemove()](https://github.com/code-423n4/2021-07-sherlock-findings/issues/34)\n- [[G-15] Gov.sol: Small refactoring of tokenInit() to save gas](https://github.com/code-423n4/2021-07-sherlock-findings/issues/35)\n- [[G-16] [Optimization] Setting higher value for optimize-runs](https://github.com/code-423n4/2021-07-sherlock-findings/issues/83)\n- [[G-17] LibSherX.sol: Optimise calcUnderlying()](https://github.com/code-423n4/2021-07-sherlock-findings/issues/38)\n- [[G-18] Manager.sol: Can avoid `safemath` sub in usdPerBlock and usdPool calculations](https://github.com/code-423n4/2021-07-sherlock-findings/issues/39)\n- [[G-19] Manager.sol: Pass ps.sherXUnderlying instead of ps into updateData()](https://github.com/code-423n4/2021-07-sherlock-findings/issues/40)\n- [[G-20] [Optimization] A branchless version of an if else statement](https://github.com/code-423n4/2021-07-sherlock-findings/issues/82)\n- [[G-21] [Optimization] Use at least 0.8.4](https://github.com/code-423n4/2021-07-sherlock-findings/issues/84)\n- [[G-22] [Optimization] Caching in for loops](https://github.com/code-423n4/2021-07-sherlock-findings/issues/86)\n- [[G-23] [Optimization] Changing memory to calldata and again caching in loops](https://github.com/code-423n4/2021-07-sherlock-findings/issues/87)\n- [[G-24]\tPoolStrategy unused parameter `_token`](https://github.com/code-423n4/2021-07-sherlock-findings/issues/48)\n- [[G-25] Use calldata is a little more gas efficient ](https://github.com/code-423n4/2021-07-sherlock-findings/issues/60)\n- [[G-26] Avoid storing lp in AaveV2 constructor](https://github.com/code-423n4/2021-07-sherlock-findings/issues/7)\n- [[G-27] Aav2V2 is Ownable but not owner capabilites are used](https://github.com/code-423n4/2021-07-sherlock-findings/issues/8)\n- [[G-28] Declare NativeLock underlying variable as immutable](https://github.com/code-423n4/2021-07-sherlock-findings/issues/9)\n- [[G-29] Functions aBalance and balanceOf](https://github.com/code-423n4/2021-07-sherlock-findings/issues/72)\n- [[G-30] Call to LibDiamond.contractOwner() can be cached](https://github.com/code-423n4/2021-07-sherlock-findings/issues/73)\n- [[G-31] Gas optimization on calculating the storage slot of a token](https://github.com/code-423n4/2021-07-sherlock-findings/issues/148)\n- [[G-32] Avoid repeating storage reads in a loop to save gas](https://github.com/code-423n4/2021-07-sherlock-findings/issues/149)\n- [[G-33] Saving gas by checking the last-recorded block number](https://github.com/code-423n4/2021-07-sherlock-findings/issues/150)\n- [[G-34] Unused functions and storage cost gas.](https://github.com/code-423n4/2021-07-sherlock-findings/issues/120)\n- [[G-35]\tUnnecessary require + if combination.](https://github.com/code-423n4/2021-07-sherlock-findings/issues/121)\n- [[G-36] `transferFrom` gas improval](https://github.com/code-423n4/2021-07-sherlock-findings/issues/100)\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}