{
  "circa": {
    "title": "Rolla contest",
    "sponsor": "Rolla",
    "slug": "2022-03-rolla",
    "date": "2022-06-24",
    "findings": "https://github.com/code-423n4/2022-03-rolla-findings/issues",
    "contest": 98
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit contest outlined in this document, C4 conducted an analysis of the Rolla smart contract system written in Solidity. The audit contest took place between March 17—March 24 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>23 Wardens contributed reports to the Rolla contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/WatchPug_\">WatchPug</a> (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/rayn731\">rayn</a></li>\n<li>hyh</li>\n<li>IllIllI</li>\n<li>0xDjango</li>\n<li>jayjonah8</li>\n<li>0xmint</li>\n<li>0x1f8b</li>\n<li>cccz</li>\n<li><a href=\"https://twitter.com/danbinnun\">danb</a></li>\n<li><a href=\"https://twitter.com/berndartmueller\">berndartmueller</a></li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li>0xkatana</li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/b4db1rd\">badbird</a></li>\n<li>cryptphi</li>\n<li>robee</li>\n<li>TerrierLover</li>\n<li><a href=\"https://twitter.com/_0v3rf10w\">0v3rf10w</a></li>\n<li>remora</li>\n<li>Jujic</li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/alcueca\">Alberto Cuesta Cañada</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 14 unique vulnerabilities. Of these vulnerabilities, 4 received a risk rating in the category of HIGH severity and 10 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 20 reports detailing issues with a risk rating of LOW severity or non-critical.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-03-rolla\">C4 Rolla contest repository</a>, and is composed of 24 smart contracts written in the Solidity programming language and includes 4,071 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-4\" style=\"position:relative;\"><a href=\"#high-risk-findings-4\" aria-label=\"high risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (4)</h1>\n<h2 id=\"h-01-incorrect-strike-price-displayed-in-namesymbol-of-qtoken-\" style=\"position:relative;\"><a href=\"#h-01-incorrect-strike-price-displayed-in-namesymbol-of-qtoken-\" aria-label=\"h 01 incorrect strike price displayed in namesymbol of qtoken  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/28\">[H-01] Incorrect strike price displayed in name/symbol of qToken </a></h2>\n<p><em>Submitted by rayn</em></p>\n<p><code>_slice()</code> in <code>options/QTokenStringUtils.sol</code> cut a string into <code>string[start:end]</code> However, while fetching bytes, it uses <code>bytes(_s)[_start+1]</code> instead of <code>bytes(_s)[_start+i]</code>. This causes the return string to be composed of <code>_s[start]*(_end-_start)</code>. The result of this function is then used to represent the decimal part of strike price in name/symbol of qToken, leading to potential confusion over the actual value of options.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>ERC20 tokens are usually identified by their name and symbol. If the symbols are incorrect, confusions may occur. Some may argue that even if names and symbols are not accurate, it is still possible to identify correct information/usage of tokens by querying the provided view functions and looking at its interactions with other contracts. However, the truth is many users of those tokens are not very tech savvy, and it is reasonable to believe a large proportion of users are not equipped with enough knowledge, or not willing to dig further than the plain symbols and names. This highlights the importance of maintaining a correct facade for ERC20 tokens.</p>\n<p>The bug demonstrated here shows that any qToken with decimals in its strike price will be misdisplayed, and the maximal difference between actual price and displayed one can be up to 0.1 BUSD.</p>\n<p>The exploit can be outlined through the following steps:</p>\n<ul>\n<li>Alice created a call option with strike price 10000.90001. The expected symbol should for this qToken should be : <code>ROLLA WETH 31-December-2022 10000.90001 Call</code></li>\n<li>Both <code>_qTokenName()</code> and <code>_qTokenSymbol()</code> in <code>options/QTokenStringUtils.sol</code> use <code>_displayedStrikePrice()</code> to get the strike price string which should be <code>10000.90001</code></li>\n</ul>\n<p><a href=\"https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L38\">https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L38</a><br>\n<a href=\"https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L90\">https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L90</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _qTokenName(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address _quantConfig,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address _underlyingAsset,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address _strikeAsset,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _strikePrice,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _expiryTime,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bool _isCall</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal view virtual returns (string memory tokenName) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory underlying = _assetSymbol(_quantConfig, _underlyingAsset);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory displayStrikePrice = _displayedStrikePrice(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _strikePrice,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _strikeAsset</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t\t</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t\t</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        tokenName = string(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            abi.encodePacked(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot;ROLLA&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot; &quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                underlying,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot; &quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _uintToChars(day),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot;-&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                monthFull,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot;-&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                Strings.toString(year),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot; &quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                displayStrikePrice,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot; &quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                typeFull</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            )</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _qTokenSymbol(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address _quantConfig,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address _underlyingAsset,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address _strikeAsset,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _strikePrice,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _expiryTime,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bool _isCall</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal view virtual returns (string memory tokenSymbol) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory underlying = _assetSymbol(_quantConfig, _underlyingAsset);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory displayStrikePrice = _displayedStrikePrice(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _strikePrice,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _strikeAsset</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // convert the expiry to a readable string</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (uint256 year, uint256 month, uint256 day) = DateTime.timestampToDate(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            _expiryTime</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // get option type string</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (string memory typeSymbol, ) = _getOptionType(_isCall);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // get option month string</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (string memory monthSymbol, ) = _getMonth(month);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        /// concatenated symbol string</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        tokenSymbol = string(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            abi.encodePacked(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot;ROLLA&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot;-&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                underlying,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot;-&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _uintToChars(day),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                monthSymbol,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                _uintToChars(year),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot;-&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                displayStrikePrice,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                &quot;-&quot;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                typeSymbol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            )</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<ul>\n<li><code>_displayedStrikePrice()</code> combines the quotient and the remainder to form the strike price string. The remainder use <code>_slice</code> to compute. In this case, the quotient is <code>10000</code> and the remainder is <code>90001</code></li>\n</ul>\n<p><a href=\"https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L136\">https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L136</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _displayedStrikePrice(uint256 _strikePrice, address _strikeAsset)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        internal</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        view</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        virtual</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        returns (string memory)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 strikePriceDigits = ERC20(_strikeAsset).decimals();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 strikePriceScale = 10**strikePriceDigits;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 remainder = _strikePrice % strikePriceScale;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 quotient = _strikePrice / strikePriceScale;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory quotientStr = Strings.toString(quotient);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (remainder == 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            return quotientStr;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 trailingZeroes;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        while (remainder % 10 == 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            remainder /= 10;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            trailingZeroes++;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // pad the number with &quot;1 + starting zeroes&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        remainder += 10**(strikePriceDigits - trailingZeroes);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory tmp = Strings.toString(remainder);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        tmp = _slice(tmp, 1, (1 + strikePriceDigits) - trailingZeroes);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return string(abi.encodePacked(quotientStr, &quot;.&quot;, tmp));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<ul>\n<li>However inside the loop of <code>_slice()</code>, <code>slice[i] = bytes(_s)[_start + 1];</code> lead to an incorrect string, which is <code>90001</code></li>\n</ul>\n<p><a href=\"https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L206\">https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L206</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _slice(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory _s,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _start,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _end</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal pure virtual returns (string memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 range = _end - _start;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory slice = new bytes(range);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i = 0; i &lt; range; ) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            slice[i] = bytes(_s)[_start + 1];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            unchecked {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                ++i;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return string(slice);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<ul>\n<li>The final qtoken name now becomes <code>ROLLA WETH 31-December-2022 10000.99999 Call</code>, which results in confusion over the actual value of options.</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Fix the bug in the <code>_slice()</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function _slice(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        string memory _s,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _start,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _end</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal pure virtual returns (string memory) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 range = _end - _start;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory slice = new bytes(range);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i = 0; i &lt; range; ) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            slice[i] = bytes(_s)[_start + i];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            unchecked {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                ++i;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return string(slice);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/28#issuecomment-1102139409\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved in <a href=\"https://github.com/RollaProject/quant-protocol/pull/77\">RollaProject/quant-protocol#77</a></p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-mint-spread-collateral-less-and-conjuring-collateral-claims-out-of-thin-air-with-implicit-arithmetic-rounding-and-flawed-int-to-uint-conversion\" style=\"position:relative;\"><a href=\"#h-02-mint-spread-collateral-less-and-conjuring-collateral-claims-out-of-thin-air-with-implicit-arithmetic-rounding-and-flawed-int-to-uint-conversion\" aria-label=\"h 02 mint spread collateral less and conjuring collateral claims out of thin air with implicit arithmetic rounding and flawed int to uint conversion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/31\">[H-02] Mint spread collateral-less and conjuring collateral claims out of thin air with implicit arithmetic rounding and flawed int to uint conversion</a></h2>\n<p><em>Submitted by rayn</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/libraries/QuantMath.sol#L137\">QuantMath.sol#L137</a><br>\n<a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/libraries/QuantMath.sol#L151\">QuantMath.sol#L151</a><br>\n<a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/libraries/SignedConverter.sol#L28\">SignedConverter.sol#L28</a><br></p>\n<p>This report presents 2 different incorrect behaviour that can affect the correctness of math calculations:</p>\n<ol>\n<li>Unattended Implicit rounding in QuantMath.sol <code>div</code> and <code>mul</code></li>\n<li>Inappropriate method of casting integer to unsigned integer in SignedConverter.sol <code>intToUint</code></li>\n</ol>\n<p>Bug 1 affects the correctness when calculating collateral required for <code>_mintSpread</code>. Bug 2 expands the attack surface and allows attackers to target the <code>_claimCollateral</code> phase instead. Both attacks may result in tokens being stolen from Controller in the worst case, but is most likely too costly to exploit under current BNB chain environment. The potential impact however, should not be taken lightly, since it is known that the ethereum environment in highly volatile and minor changes in the environment can suddenly make those bugs cheap to exploit.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>In this section, we will first present bug 1, and then demonstrate how this bug can be exploited. Then we will discuss how bug 2 opens up more attack chances and go over another PoC.</p>\n<p>Before getting started, we should go over an important concept while dealing with fixed point number — rounding.\nMath has no limits on precision, but computers do. This problem is especially critical to systems handling large amount of “money” that is allowed to be arbitrarily divided. A common way for ethereum smart contract developers to handle this is through rounding numbers. Rolla is no exception.</p>\n<p>In QuantMath, Rolla explicitly wrote the <code>toScaledUint</code> function to differentiate between rounding numbers up or down when scaling numbers to different precision (or we call it <code>_decimals</code> here). The intended usage is to scale calculated numbers (amount of tokens) up when Controller is the receiver, and scale it down when Controller is sender. In theory, this function should guarantee Controller can never “lose tokens” due to rounding.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">library QuantMath {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    struct FixedPointInt {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        int256 value;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    int256 private constant _SCALING_FACTOR = 1e27;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 private constant _BASE_DECIMALS = 27;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function toScaledUint(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        FixedPointInt memory _a,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 _decimals,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bool _roundDown</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) internal pure returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 scaledUint;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (_decimals == _BASE_DECIMALS) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            scaledUint = _a.value.intToUint();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        } else if (_decimals &gt; _BASE_DECIMALS) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            uint256 exp = _decimals - _BASE_DECIMALS;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            scaledUint = (_a.value).intToUint() * 10**exp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            uint256 exp = _BASE_DECIMALS - _decimals;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            uint256 tailing;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            if (!_roundDown) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                uint256 remainer = (_a.value).intToUint() % 10**exp;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                if (remainer &gt; 0) tailing = 1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            scaledUint = (_a.value).intToUint() / 10**exp + tailing;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return scaledUint;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>In practice, the above function also works quite well (sadly, not perfect, notice the <code>intToUint</code> function within. We will come back to this later), but it only works if we can promise that before entering this function, all numbers retain full precision and is not already rounded. This is where <code>div</code> and <code>mul</code> comes into play. As we can easily see in the snippet below, both functions involve the division operator ’/’, which by default discards the decimal part of the calculated result (be aware to not confuse this with the <code>_decimal</code> used while scaling FixedPointInt). The operation here results in an implicit round down, which limits the effectiveness of  explicit rounding in <code>toScaledUint</code> showned above.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function mul(FixedPointInt memory a, FixedPointInt memory b)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        internal</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        pure</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        returns (FixedPointInt memory)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return FixedPointInt((a.value * b.value) / _SCALING_FACTOR);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    function div(FixedPointInt memory a, FixedPointInt memory b)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        internal</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        pure</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        returns (FixedPointInt memory)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return FixedPointInt((a.value * _SCALING_FACTOR) / b.value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>Now let’s see how this implicit rounding can causes troubles. We start with the <code>_mintSpread</code> procedure creating a call credit spread. For brevity, the related code is not shown, but here’s a summary of what is done.</p>\n<ul>\n<li>\n<p><code>Controller._mintSpread</code></p>\n<ul>\n<li>\n<p><code>QuantCalculator.getCollateralRequirement</code></p>\n<ul>\n<li>\n<p><code>FundsCalculator.getCollateralRequirement</code></p>\n<ul>\n<li>\n<p><code>FundsCalculator.getOptionCollateralRequirement</code></p>\n<ul>\n<li>\n<p><code>FundsCalculator.getCallCollateralRequirement</code></p>\n<ul>\n<li>scales <code>_qTokenToMintStrikePrice</code> from\n<code>_strikeAssetDecimals (8)</code> to <code>_BASE_DECIMALS (27)</code></li>\n<li>scales <code>_qTokenForCollateralStrikePrice</code> from\n<code>_strikeAssetDecimals (8)</code> to <code>_BASE_DECIMALS (27)</code></li>\n<li><code>collateralPerOption = (collateralStrikePrice.sub(mintStrikePrice)).div(collateralStrikePrice)</code></li>\n</ul>\n</li>\n<li>scale <code>_optionsAmount</code> from <code>_optionsDecimals (18)</code> to <code>_BASE_DECIMALS (27)</code></li>\n<li><code>collateralAmount = _optionsAmount.mul(collateralPerOption)</code></li>\n</ul>\n</li>\n<li>uses <code>qTokenToMint.underlyingAsset</code> (weth or wbtc) as collateral</li>\n</ul>\n</li>\n<li>scale and round up <code>collateralAmountFP</code> from <code>_BASE_DECIMALS (27)</code> to <code>payoutDecimals (18)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>If we extract all the math related stuff, it would be something like below</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">def callCreditSpreadCollateralRequirement(_qTokenToMintStrikePrice, _qTokenForCollateralStrikePrice, _optionsAmount):</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        X1 = _qTokenToMintStrikePrice * 10^19</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        X2 = _qTokenForCollateralStrikePrice * 10^19</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        X3 = _optionsAmount * 10^9</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assert X1 &lt; X2          #credit spread</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Y1 = (X2 - X1) * 10^27 // X2    #implicit round down due to div</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Y2 = Y1 * X3 // 10^27   #implicit round down due to mul</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Z = Y2 // 10^9</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if Y2 % 10^9 &gt; 0:       #round up since we are minting spread (Controller is receiver)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                Z+=1</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return Z</span></span></code></pre>\n<p>Both implicit round downs can be abused, but we shall focus on the <code>mul</code> one here.\nAssume we follow the following actions</p>\n<ol>\n<li>create option <code>A</code> with strike price <code>10 + 10^-8 BUSD (10^9 + 1 under 8 decimals) &#x3C;-> 1 WETH</code><br></li>\n<li>create option <code>B</code> with strike price <code>10 BUSD (10^9 under 8 decimals) &#x3C;-> 1 WETH</code><br></li>\n<li>mint <code>10^-18</code> (1 under 18 decimals) option <code>A</code><br>\n3-1. <code>pay 1 eth</code><br></li>\n<li>mint <code>10^-18</code> (1 under 18 decimals) spread <code>B</code> with <code>A</code> as collateral<br>\n4-1. <code>X1 = _qTokenToMintStrikePrice * 10^19 = 10^9 * 10^19 = 10^28</code><br>\n4-2. <code>X2 = _qTokenToMintStrikePrice * 10^19 = (10^9 + 1) * 10^19 = 10^28 + 10^19</code><br>\n4-3. <code>X3 = _optionsAmount * 10^9 = 1 * 10^9 = 10^9</code><br>\n4-4. <code>Y1 = (X2 - X1) * 10^27 // X2 = (10^28 + 10^19 - 10^28) * 10^27 // (10^28 + 10^19) = 99999999000000000</code><br>\n4-5. <code>Y2 = Y1 * X3 // 10^27 = 99999999000000000 * 10^9 / 10^27 = 0</code><br>\n4-6. <code>Z = Y2 // 10^9 = 0</code><br>\n4-7. <code>Y2 % 10^9 = 0</code> so <code>Z</code> remains unchanged<br></li>\n</ol>\n<p>We minted a call credit spread without paying any fee.</p>\n<p>Now let’s think about how to extract the value we conjured out of thin air. To be able to withdraw excessive collateral, we can choose to do a excercise+claim or neutralize current options. Here we take the neutralize path.</p>\n<p>For neutralizing spreads, the procedure is basically the same as minting spreads, except that the explicit round down is taken since <code>Controller</code> is the payer here. The neutralize procedure returns the <code>qToken</code> used as collateral and pays the collateral fee back. The math part can be summarized as below.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">def neutralizeCreditSpreadCollateralRequirement(_qTokenToMintStrikePrice, _qTokenForCollateralStrikePrice, _optionsAmount):</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        X1 = _qTokenToMintStrikePrice * 10^19</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        X2 = _qTokenForCollateralStrikePrice * 10^19</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        X3 = _optionsAmount * 10^9</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assert X1 &lt; X2          #credit spread</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Y1 = (X2 - X1) * 10^27 // X2    #implicit round down due to div</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Y2 = Y1 * X3 // 10^27   #implicit round down due to mul</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Z = Y2 // 10^9  #explicit scaling</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return Z</span></span></code></pre>\n<p>There are two challenges that need to be bypassed, the first one is to avoid implicit round down in <code>mul</code>, and the second is to ensure the revenue is not rounded away during explicit scaling.\nTo achieve this, we first mint <code>10^-9 + 2 * 10^-18</code> spreads seperately (10^9 + 2 under 18 decimals), and as shown before, no additional fees are required while minting spread from original option.\nThen we neutralize all those spreads at once, the calculation is shown below.</p>\n<ol>\n<li>neutralize <code>10^-9 + 2 * 10^-18</code> (10^9 + 2 under 18 decimals) spread <code>B</code><br>\n4-1. <code>X1 = _qTokenToMintStrikePrice * 10^19 = 10^9 * 10^19 = 10^28</code><br>\n4-2. <code>X2 = _qTokenToMintStrikePrice * 10^19 = (10^9 + 1) * 10^19 = 10^28 + 10^19</code><br>\n4-3. <code>X3 = _optionsAmount * 10^9 = (10^9 + 2) * 10^9 = 10^18 + 2</code><br>\n4-4. <code>Y1 = (X2 - X1) * 10^27 // X2 = (10^28 + 10^19 - 10^28) * 10^27 // (10^28 + 10^19) = 99999999000000000</code><br>\n4-5. <code>Y2 = Y1 * X3 // 10^27 = 99999999000000000 * (10^18 + 2) / 10^27 = 1000000000</code><br>\n4-6. <code>Z = Y2 // 10^9 = 10^9 // 10^9 = 1</code><br></li>\n</ol>\n<p>And with this, we managed to generate 10^-18 weth of revenue.</p>\n<p>This approach is pretty impractical due to the requirement of minting 10^-18 for <code>10^9 + 2</code> times. This montrous count mostly likely requires a lot of gas to pull off, and offsets the marginal revenue generated through our attack. This leads us to explore other possible methods to bypass this limitation.</p>\n<p>It’s time to start looking at the second bug.</p>\n<p>Recall we mentioned the second bug is in <code>intToUint</code>, so here’s the implementation of it. It is not hard to see that this is actually an <code>abs</code> function named as <code>intToUint</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function intToUint(int256 a) internal pure returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        if (a &lt; 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            return uint256(-a);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        } else {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            return uint256(a);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>Where is this function used? And yes, you guessed it, in <code>QuantCalculator.calculateClaimableCollateral</code>. The process of claiming collateral is quite complex, but we will only look at the specific case relevant to the exploit. Before reading code, let’s first show the desired scenario. Note that while we wait for expiry, there are no need to sell any option/spread.</p>\n<ol>\n<li>mint a <code>qTokenLong</code> option</li>\n<li>mint a <code>qTokenShort</code> spread with <code>qTokenLong</code> as collateral</li>\n<li>wait until expire, and expect expiryPrice to be between qTokenLong and qTokenShort</li>\n</ol>\n<!---->\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">----------- qTokenLong strike price</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">----------- expiryPrice</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">----------- qTokenShort strike price</span></span></code></pre>\n<p>Here is the outline of the long waited claimCollateral for spread.</p>\n<ul>\n<li>\n<p><code>Controller._claimCollateral</code></p>\n<ul>\n<li>\n<p><code>QuantCalculator.calculateClaimableCollateral</code></p>\n<ul>\n<li><code>FundsCalculator.getSettlementPriceWithDecimals</code></li>\n<li>\n<p><code>FundsCalculator.getPayout</code> for qTokenLong</p>\n<ul>\n<li>qTokenLong strike price is above expiry price, worth 0</li>\n</ul>\n</li>\n<li>\n<p><code>FundsCalculator.getCollateralRequirement</code></p>\n<ul>\n<li>This part we saw earlier, omit details</li>\n</ul>\n</li>\n<li>\n<p><code>FundsCalculator.getPayout</code> for qTokenShort</p>\n<ul>\n<li>uses <code>qTokenToMint.underlyingAsset</code> (weth or wbtc) as collateral</li>\n<li>\n<p><code>FundsCalculator.getPayoutAmount</code> for qTokenShort</p>\n<ul>\n<li>scale <code>_strikePrice</code> from\n<code>_strikeAssetDecimals (8)</code> to <code>_BASE_DECIMALS (27)</code></li>\n<li>scale <code>_expiryPrice.price</code> from\n<code>_expiryPrice.decimals (8)</code> to <code>_BASE_DECIMALS (27)</code></li>\n<li>scale <code>_amount</code> from\n<code>_optionsDecimals (18)</code> to <code>_BASE_DECIMALS (27)</code></li>\n<li>\n<p><code>FundsCalculator.getPayoutForCall</code> for qTokenShort</p>\n<ul>\n<li><code>payoutAmount = expiryPrice.sub(strikePrice).mul(amount).div(expiryPrice)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>returnableCollateral = payoutFromLong.add(collateralRequirement).sub(payoutFromShort)</code></li>\n<li>scale and round down <code>abs(returnableCollateral)</code> from <code>_BASE_DECIMALS (27)</code> to <code>payoutDecimals (18)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Again, we summarize the math part into a function.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">def claimableCollateralCallCreditSpreadExpiryInbetween(_qTokenShortStrikePrice, _qTokenLongStrikePrice, _expiryPrice, _amount):</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        def callCreditSpreadCollateralRequirement(_qTokenToMintStrikePrice, _qTokenForCollateralStrikePrice, _optionsAmount):</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                X1 = _qTokenToMintStrikePrice * 10^19</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                X2 = _qTokenForCollateralStrikePrice * 10^19</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                X3 = _optionsAmount * 10^9</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                Y1 = (X2 - X1) * 10^27 // X2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                Y2 = Y1 * X3 // 10^27</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                return Y2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        def callCreditSpreadQTokenShortPayout(_strikePrice, _expiryPrice, _amount):</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                X1 = _strikePrice * 10^19</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                X2 = _expiryPrice * 10^19</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                X3 = _amount * 10^9</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                Y1 = (X2-X1) * X3 // 10^27</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                Y2 = Y1 * 10^27 // X2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                return Y2</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        assert _qTokenShortStrikePrice &gt; _expiryPrice &gt; _qTokenLongStrikePrice</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        A1 = payoutFromLong = 0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        A2 = collateralRequirement = callCreditSpreadCollateralRequirement(_qTokenShortStrikePrice, _qTokenLongStrikePrice, _amount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        A3 = payoutFromShort = callCreditSpreadQTokenShortPayout(_qTokenShortStrikePrice, _expiryPrice, _amount)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        B1 = A1 + A2 - A3</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Z = abs(B1) // 10^9</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return Z</span></span></code></pre>\n<p>Given the context, it should be pretty easy to imagine what I am aiming here, to make <code>B1 &#x3C; 0</code>. We already know <code>A1 = 0</code>, so the gaol basically boils down to making <code>A2 &#x3C; A3</code>. Let’s further simplify this requirement and see if the equation is solvable.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">X = _qTokenLongStrikePrice (8 decimals)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Y = _expiryPrice (8 decimals)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Z = _qTokenShortStrikePrice (8 decimals)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">A = _amount (scaled to 27 decimals)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">assert X&gt;Y&gt;Z&gt;0</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">assert X,Y,Z are integers</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">assert (((X - Z) * 10^27 // X) * A // 10^27) &lt; (((Y - Z) * A // 10^27) * 10^27 // Y)</span></span></code></pre>\n<p>Notice apart from the use of <code>X</code> and <code>Y</code>, the two sides of the equation only differs by when <code>A</code> is mixed into the equation, meaning that if we temporarily ignore the limitation and set <code>X = Y</code>, as long as left hand side of equation does an implicit rounding after dividing by X, right hand side will most likely be larger.</p>\n<p>Utilizing this, we turn to solve the equation of:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(X-Z) / X - (Y-Z) / Y &lt; 10^-27</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; Z / Y - Z / X &lt; 10^-27</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; (Z = 1 yields best solution)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; 1 / Y - 1 / X &lt; 10^-27</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; X - Y &lt; X * Y * 10^-27</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; 0 &lt; X * Y - 10^27 * X + 10^27 * Y</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; require X &gt; Y, so model Y as X - B, where B &gt; 0 and B is an integer</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; 0 &lt; X^2 - B * X - 10^27 * B</span></span></code></pre>\n<p>It is not easy to see that the larger <code>X</code> is, the larger the range of allowed <code>B</code>. This is pretty important since <code>B</code> stands for the range of expiry prices where attack could work, so the larger it is, the less accurate our guess can be to profit.</p>\n<p>Apart form range of <code>B</code>, value of <code>X</code> is the long strike price and upper bound of range <code>B</code>, so we would also care about it, a simple estimation shows that <code>X</code> must be above <code>10^13.5 (8 decimals)</code> for there to be a solution, which amounts to about <code>316228 BUSD &#x3C;-> 1 WETH</code>. This is an extremely high price, but not high enough to be concluded as unreachable in the near future. So let’s take a slightly generous number of <code>10^14 - 1</code> as X and calculate the revenue generated following this exploit path.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">0 &lt; (10^14 - 1)^2 - B * (10^14 - 1) - 10^27 * B</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; (10^14 - 1)^2 / (10^14 - 1 + 10^27) &gt; B</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">=&gt; B &lt;= 9</span></span></code></pre>\n<p>Now we’ve got the range of profitable expiry price. As we concluded earlier, the range is extremely small with a modest long strike price, but let’s settle with this for now and see how much profit can be generated if we get lucky. To calculate profit, we take <code>_qTokenLongStrikePrice = 10^14 - 1 (8 decimals)</code>, <code>_qTokenShortStrikePrice = 1 (8 decimals)</code>, <code>_expiryPrice = 10^14 - 2 (8 decimals)</code> and <code>_amount = 10^28 (18 decimals)</code> and plug it back into the function.</p>\n<ol>\n<li>in <code>callCreditSpreadCollateralRequirement</code><br>\n1-1. <code>X1 = _qTokenForCollateralStrikePrice * 10^19 = 1 * 10^19 = 10^19</code><br>\n1-2. <code>X2 = _qTokenToMintStrikePrice * 10^19 = (10^14 - 1) * 10^19 = 10^33 - 10^19</code><br>\n1-3. <code>X3 = _optionsAmount * 10^9 = 10^28 * 10^9 = 10^37</code><br>\n1-4. <code>Y1 = (X2 - X1) * 10^27 // X2 = (10^33 - 2 * 10^19) * 10^27 // (10^33 - 10^19) = 999999999999989999999999999</code><br>\n1-5. <code>Y2 = Y1 * X3 // 10^27 = 999999999999989999999999999 * 10^37 // 10^27 = 999999999999989999999999999 * 10^10</code><br></li>\n<li>in <code>callCreditSpreadQTokenShortPayout</code><br>\n2-1. <code>X1 = _strikePrice * 10^19 = 1 * 10^19 = 10^19</code><br>\n2-2. <code>X2 = _expiryPrice * 10^19 = (10^14 - 2) * 10^19 = 10^33 - 2 * 10^19</code><br>\n2-3. <code>X3 = _amount * 10^9 = 10^28 * 10^9 = 10^37</code><br>\n2-4. <code>Y1 = (X2 - X1) * X3 // 10^27 = (10^33 - 3 * 10^19) * 10^37 // 10^27 = 99999999999997 * 10^29</code><br>\n2-5. `Y2 = Y1 * 10^27 / X2 = (99999999999997 * 10^28) * 10^27 / (10^33 - 2 * 10^19) = 9999999999999899999999999997999999999<br></li>\n<li>combine terms<br>\n3-1. <code>B1 = A1 + A2 - A3 = 0 + 9999999999999899999999999990000000000 - 9999999999999899999999999997999999999 = -2000000001&#x3C;br> 3-2.</code>Z = abs(B1) // 10^9 = 2000000000 // 10^9 = 2<br></li>\n</ol>\n<p>And with this, we managed to squeeze 2 wei from a presumably worthless collateral.</p>\n<p>This attack still suffers from several problems</p>\n<ol>\n<li>cost of WETH in BUSD is way higher than current market</li>\n<li>need to predict target price accurately to profit</li>\n<li>requires large amount of WETH to profit</li>\n</ol>\n<p>While it is still pretty hard to pull off attack, the requirements seems pretty more likely to be achievable compared to the first version of exploit. Apart from this, there is also the nice property that this attack allows profit to scale with money invested.</p>\n<p>This concludes our demonstration of two attacks against the potential flaws in number handling.</p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>vim, ganache-cli</p>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>For <code>div</code> and <code>mul</code>, adding in a similar opt-out round up argument would work. This would require some refactoring of code, but is the only way to fundamentally solve the problem.</p>\n<p>For <code>intToUint</code>, I still can’t understand what the original motive is to design it as <code>abs</code> in disguise. Since nowhere in this project would we benefit from the current <code>abs</code> behaviour, in my opinion, it would be best to adopt a similar strategy to the <code>uintToInt</code> function. If the value goes out of directly convertable range ( &#x3C; 0), revert and throw an error message.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/31#issuecomment-1102147125\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved by adding explicit rounding on fixed-point multiplication and division operations: <a href=\"https://github.com/RollaProject/quant-protocol/pull/91\">RollaProject/quant-protocol#91</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-03--wrong-implementation-of-eip712metatransaction\" style=\"position:relative;\"><a href=\"#h-03--wrong-implementation-of-eip712metatransaction\" aria-label=\"h 03  wrong implementation of eip712metatransaction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/43\">[H-03]  Wrong implementation of <code>EIP712MetaTransaction</code></a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<ol>\n<li><code>EIP712MetaTransaction</code> is a utils contract that intended to be inherited by concrete (actual) contracts, therefore. it’s initializer function should not use the <code>initializer</code> modifier, instead, it should use <code>onlyInitializing</code> modifier. See the implementation of <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/utils/cryptography/draft-EIP712Upgradeable.sol#L48-L57\">openzeppelin <code>EIP712Upgradeable</code> initializer function</a>.</li>\n</ol>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L102-L114\">EIP712MetaTransaction.sol#L102-L114</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @notice initialize method for EIP712Upgradeable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev called once after initial deployment and every upgrade.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param _name the user readable name of the signing domain for EIP712</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param _version the current major version of the signing domain for EIP712</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initializeEIP712</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_version</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">initializer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">version</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_version</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">__EIP712_init</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_version</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>Otherwise, when the concrete contract’s initializer function (with a <code>initializer</code> modifier) is calling EIP712MetaTransaction’s initializer function, it will be mistok as reentered and so that it will be reverted (unless in the context of a constructor, e.g. Using @openzeppelin/hardhat-upgrades <code>deployProxy()</code> to initialize).</p>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/proxy/utils/Initializable.sol#L50-L53\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/proxy/utils/Initializable.sol#L50-L53</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@dev</span><span class=\"mtk3\"> Modifier to protect an initializer function from being invoked twice.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">modifier</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initializer</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// If the contract is initializing we ignore whether _initialized is set in order to support multiple</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// inheritance patterns, but we only do this in the context of a constructor, because in other contexts the</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// contract may have been reentered.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_initializing</span><span class=\"mtk1\"> ? </span><span class=\"mtk11\">_isConstructor</span><span class=\"mtk1\">() : !</span><span class=\"mtk12\">_initialized</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Initializable: contract is already initialized&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isTopLevelCall</span><span class=\"mtk1\"> = !</span><span class=\"mtk12\">_initializing</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">isTopLevelCall</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_initializing</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_initialized</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">isTopLevelCall</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_initializing</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>See also: <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/releases/tag/v4.4.1\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/releases/tag/v4.4.1</a></p>\n<ol start=\"2\">\n<li><code>initializer</code> can only be called once, it can not be “called once after every upgrade”.</li>\n</ol>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L102-L114\">EIP712MetaTransaction.sol#L102-L114</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @notice initialize method for EIP712Upgradeable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev called once after initial deployment and every upgrade.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param _name the user readable name of the signing domain for EIP712</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param _version the current major version of the signing domain for EIP712</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initializeEIP712</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_version</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">initializer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">version</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_version</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">__EIP712_init</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_version</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<ol start=\"3\">\n<li>A utils contract that is not expected to be deployed as a standalone contract should be declared as <code>abstract</code>. It’s <code>initializer</code> function should be <code>internal</code>.</li>\n</ol>\n<p>See the implementation of <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/utils/cryptography/draft-EIP712Upgradeable.sol#L28\">openzeppelin <code>EIP712Upgradeable</code></a>.</p>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/utils/cryptography/draft-EIP712Upgradeable.sol#L28\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/utils/cryptography/draft-EIP712Upgradeable.sol#L28</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">abstract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">EIP712Upgradeable</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Initializable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">abstract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">EIP712MetaTransaction</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">EIP712Upgradeable</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @notice initialize method for EIP712Upgradeable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev called once after initial deployment.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param _name the user readable name of the signing domain for EIP712</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param _version the current major version of the signing domain for EIP712</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">__EIP712MetaTransaction_init</span><span class=\"mtk1\">(</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_version</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">onlyInitializing</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_name</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">version</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_version</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">__EIP712_init</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_name</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_version</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/43#issuecomment-1102143348\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved in <a href=\"https://github.com/RollaProject/quant-protocol/commit/25112fa93a650f7b889e8472faf75dd5c471cdf2\">RollaProject/quant-protocol@25112fa</a>, but upgradeability was later removed as per <a href=\"https://github.com/RollaProject/quant-protocol/pull/90\">RollaProject/quant-protocol#90</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-04-eip712metatransactionexecutemetatransaction-failed-txs-are-open-to-replay-attacks\" style=\"position:relative;\"><a href=\"#h-04-eip712metatransactionexecutemetatransaction-failed-txs-are-open-to-replay-attacks\" aria-label=\"h 04 eip712metatransactionexecutemetatransaction failed txs are open to replay attacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/45\">[H-04] <code>EIP712MetaTransaction.executeMetaTransaction()</code> failed txs are open to replay attacks</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>Any transactions that fail based on some conditions that may change in the future are not safe to be executed again later (e.g. transactions that are based on others actions, or time-dependent etc).</p>\n<p>In the current implementation, once the low-level call is failed, the whole tx will be reverted and so that <code>_nonces[metaAction.from]</code> will remain unchanged.</p>\n<p>As a result, the same tx can be replayed by anyone, using the same signature.</p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L86\">EIP712MetaTransaction.sol#L86</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">executeMetaTransaction</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">MetaAction</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">metaAction</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">r</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">s</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">v</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">payable</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_verify</span><span class=\"mtk1\">(</span><span class=\"mtk12\">metaAction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">metaAction</span><span class=\"mtk1\">, </span><span class=\"mtk12\">r</span><span class=\"mtk1\">, </span><span class=\"mtk12\">s</span><span class=\"mtk1\">, </span><span class=\"mtk12\">v</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;signer and signature don&#39;t match&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentNonce</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_nonces</span><span class=\"mtk1\">[</span><span class=\"mtk12\">metaAction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">from</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// intentionally allow this to overflow to save gas,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// and it&#39;s impossible for someone to do 2 ^ 256 - 1 meta txs</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_nonces</span><span class=\"mtk1\">[</span><span class=\"mtk12\">metaAction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">from</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">currentNonce</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Append the metaAction.from at the end so that it can be extracted later</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// from the calling context (see _msgSender() below)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk11\">IController</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">operate</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">metaAction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">actions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                ),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">metaAction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">from</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;unsuccessful function call&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MetaTransactionExecuted</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">metaAction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">from</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">currentNonce</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>See also the implementation of OpenZeppelin’s <code>MinimalForwarder</code>:</p>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/metatx/MinimalForwarder.sol#L42-L66\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/metatx/MinimalForwarder.sol#L42-L66</a></p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Given:</p>\n<ul>\n<li>The collateral is USDC;</li>\n<li>Alice got <code>10,000 USDC</code> in the wallet.</li>\n<li>Alice submitted a MetaTransaction to <code>operate()</code> and <code>_mintOptionsPosition()</code> with <code>10,000 USDC</code>;</li>\n<li>Before the MetaTransaction get executed, Alice sent <code>1,000 USDC</code> to Bob;</li>\n<li>The MetaTransaction submited by Alice in step 1 get executed but failed;</li>\n<li>A few days later, Bob sent <code>1,000 USDC</code> to Alice;</li>\n<li>The attacker can replay the MetaTransaction failed to execute at step 3 and succeed.</li>\n</ul>\n<p>Alice’s <code>10,000 USDC</code> is now been spent unexpectedly against her will and can potentially cause fund loss depends on the market situation.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Failed txs should still increase the nonce.</p>\n<p>While implementating the change above, consider adding one more check to require sufficient gas to be paid, to prevent “insufficient gas griefing attack” as described in <a href=\"https://ipfs.io/ipfs/QmbbYTGTeot9ic4hVrsvnvVuHw4b5P7F5SeMSNX9TYPGjY/blog/ethereum-gas-dangers/\">this article</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/45#issuecomment-1102144427\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Meta transactions replay and insufficient gas griefing attacks are now prevented since <a href=\"https://github.com/RollaProject/quant-protocol/pull/80\">RollaProject/quant-protocol#80</a>.</p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-10\" style=\"position:relative;\"><a href=\"#medium-risk-findings-10\" aria-label=\"medium risk findings 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (10)</h1>\n<h2 id=\"m-01-no-use-of-upgradeable-safeerc20-contract-in-controllersol\" style=\"position:relative;\"><a href=\"#m-01-no-use-of-upgradeable-safeerc20-contract-in-controllersol\" aria-label=\"m 01 no use of upgradeable safeerc20 contract in controllersol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/5\">[M-01] No use of upgradeable SafeERC20 contract in <code>Controller.sol</code></a></h2>\n<p><em>Submitted by jayjonah8</em></p>\n<p>Controller.sol makes use of Open Zeppelins <code>ReentrancyGuardUpgradeable.sol</code> in the file but does not use an upgradeable version of SafeERC20.sol</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/Controller.sol#L5\">Controller.sol#L5</a><br></p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Make use of Open Zeppelins <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\">upgradeable version of the SafeERC20.sol contract</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/5#issuecomment-1102153150\">0xca11 (Rolla) resolved and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved in <a href=\"https://github.com/RollaProject/quant-protocol/pull/76\">RollaProject/quant-protocol#76</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-collateral_minter_role-can-be-granted-by-the-deployer-of-quantconfig-and-mint-arbitrary-amount-of-tokens\" style=\"position:relative;\"><a href=\"#m-02-collateral_minter_role-can-be-granted-by-the-deployer-of-quantconfig-and-mint-arbitrary-amount-of-tokens\" aria-label=\"m 02 collateral_minter_role can be granted by the deployer of quantconfig and mint arbitrary amount of tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/12\">[M-02] <code>COLLATERAL_MINTER_ROLE</code> can be granted by the deployer of <code>QuantConfig</code> and mint arbitrary amount of tokens</a></h2>\n<p><em>Submitted by cccz, also found by danb, and WatchPug</em></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function mintCollateralToken(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address recipient,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 collateralTokenId,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 amount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) external override {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            quantConfig.hasRole(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                quantConfig.quantRoles(&quot;COLLATERAL_MINTER_ROLE&quot;),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                msg.sender</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            ),</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            &quot;CollateralToken: Only a collateral minter can mint CollateralTokens&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit CollateralTokenMinted(recipient, collateralTokenId, amount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        _mint(recipient, collateralTokenId, amount, &quot;&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>Using the mintCollateralToken() function of CollateralToken, an address with COLLATERAL<em>MINTER</em>ROLE can mint an arbitrary amount of tokens.</p>\n<p>If the private key of the deployer or an address with the COLLATERAL<em>MINTER</em>ROLE is compromised, the attacker will be able to mint an unlimited amount of collateral tokens.</p>\n<p>We believe this is unnecessary and poses a serious centralization risk.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/options/CollateralToken.sol#L101-L117\">CollateralToken.sol#L101-L117</a><br>\n<a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/options/CollateralToken.sol#L138-L160\">CollateralToken.sol#L138-L160</a><br></p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider removing the COLLATERAL<em>MINTER</em>ROLE, make the CollateralToken only mintable by the owner, and make the Controller contract to be the owner and therefore the only minter.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/12#issuecomment-1102152105\">0xca11 (Rolla) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/12#issuecomment-1094436993\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Per sponsor comment on <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/47#issuecomment-1079940591\">#47</a>:</p>\n<p>“The roles are renounced as per our deployment config covered in the docs. But this bug is still valid as the role OPTIONS<em>MINTER</em>ROLE can be reassigned”.</p>\n<p>Taking this one as main, with the vulnerability being that several of the MINTER and BURNER roles can be reassigned and have unnecessary powers that can be used to rug users.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/12#issuecomment-1102152105\">0xca11 (Rolla) resolved and commented</a>:</strong></p>\n<blockquote>\n<p>All roles were removed from the protocol, and now only the Controller contract can mint QTokens and CollateralTokens.</p>\n<p><a href=\"https://github.com/RollaProject/quant-protocol/pull/90\">RollaProject/quant-protocol#90</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-usage-of-deprecated-chainlink-functions\" style=\"position:relative;\"><a href=\"#m-03-usage-of-deprecated-chainlink-functions\" aria-label=\"m 03 usage of deprecated chainlink functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/17\">[M-03] Usage of deprecated Chainlink functions</a></h2>\n<p><em>Submitted by Ruhum, also found by 0x1f8b, cccz, and WatchPug</em></p>\n<p>The Chainlink functions <code>latestAnswer()</code> and <code>getAnswer()</code> are deprecated. Instead, use the <a href=\"https://docs.chain.link/docs/price-feeds-api-reference/#latestrounddata\"><code>latestRoundData()</code></a> and <a href=\"https://docs.chain.link/docs/price-feeds-api-reference/#getrounddata\"><code>getRoundData()</code></a> functions.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkOracleManager.sol#L120\">ChainlinkOracleManager.sol#L120</a><br></p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkFixedTimeOracleManager.sol#L81\">ChainlinkFixedTimeOracleManager.sol#L81</a><br></p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkFixedTimeOracleManager.sol#L84\">ChainlinkFixedTimeOracleManager.sol#L84</a><br></p>\n<p>Go to <a href=\"https://etherscan.io/address/0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419#code\">https://etherscan.io/address/0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419#code</a> and search for <code>latestAnswer()</code> or <code>getAnswer()</code>. You’ll find the deprecation notice.</p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Switch to <code>latestRoundData()</code> as described <a href=\"https://docs.chain.link/docs/price-feeds-api-reference/#latestrounddata\">here</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/17#issuecomment-1102151105\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/RollaProject/quant-protocol/pull/89\">RollaProject/quant-protocol#89</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-configtimelockcontroller-will-put-quantconfig-in-a-stalemate-rendering-it-unusable-\" style=\"position:relative;\"><a href=\"#m-04-configtimelockcontroller-will-put-quantconfig-in-a-stalemate-rendering-it-unusable-\" aria-label=\"m 04 configtimelockcontroller will put quantconfig in a stalemate rendering it unusable  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/27\">[M-04] <code>ConfigTimeLockController</code> will put <code>QuantConfig</code> in a stalemate (rendering it unusable) </a></h2>\n<p><em>Submitted by 0xmint</em></p>\n<p>The QuantConfig contract has these important setters, setProtocolAddress(), setProtocolUint256, setProtocolBoolean() and setProtocolRole(). This contract is subjected to a timelock before all such processes above are executed. But, the issue arises in the fact that in configTimeLockController, the state variable minimum delay can be set to an arbitrary value, up to type(uint256).max(cannot assume what value will be set) and could potentially render the QuantConfig contract unusable . All the previous values and addresses would not be able to be changed because of a very high delay being set:</p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L28\">ConfigTimelockController.sol#L28</a><br></p>\n<p>I discussed with one of the devs about the use of this specific mapping :</p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/QuantConfig.sol#L27\">QuantConfig.sol#L27</a><br></p>\n<p>After discussions with one of the devs(#0xca11.eth) , it was understood  that these values are for the rollaOrderFee which is a part of their limit order protocol contract(outside of the scope of the contest) but given the argument above,  its configuration will be severely impacted (old percentage fees won’t be able to be changed).Rolla limit order protocol depends on this configuration setting within QuantConfig.</p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>It is recommended that a constant be declared with a MAXIMUM_DELAY and whatever ‘minimum delay’ that is set thereafter should be below this value since there’s another function setDelay () which can also be of high arbitrary value:</p>\n<p><code>require(minimum delay ≤MAXIMUM_DELAY, “ too high”)</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/27#issuecomment-1102150437\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Both the ConfigTimeLockController and QuantConfig contracts were removed from the protocol.</p>\n<p><a href=\"https://github.com/RollaProject/quant-protocol/pull/90\">RollaProject/quant-protocol#90</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-qtokens-with-the-same-symbol-will-lead-to-mistakes\" style=\"position:relative;\"><a href=\"#m-05-qtokens-with-the-same-symbol-will-lead-to-mistakes\" aria-label=\"m 05 qtokens with the same symbol will lead to mistakes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/38\">[M-05] QTokens with the same symbol will lead to mistakes</a></h2>\n<p><em>Submitted by IllIllI</em></p>\n<p>The <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/README.md?plain=1#L70\"><code>README.md</code></a> states:</p>\n<blockquote>\n<p>Bob can then trade the QToken with Alice for a premium. The method for doing that is beyond the scope of the protocol but can be done via any smart contract trading platform e.g. 0x.</p>\n</blockquote>\n<p>It is therefore important that tokens be easily identifiable so that trading on DEXes is not error-prone.</p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Currently the <code>QToken</code> <code>name</code> includes the full year but the <code>QToken</code> symbol only contains the last two digits of the year, which can lead to mistakes. If someone mints a QToken with an expiry 100 years into the future, then the year will be truncated and appear as if the token expired this year. Normal centralized exchanges prevent this by listing options themselves and ensuring that there are never two options with the same identifier at the same time. The Rolla protocol does not have any such protections. Users must be told to not only check that the symbol name is what they expect, but to also separately check the token name or the specific expiry, or they might buy the wrong option on a DEX, or have fat-fingered during minting on a non-Rolla web interface. It’s important to minimize the possibility of mistakes, and not including the full year in the symbol makes things error-prone, and will lead to other options providers winning out.</p>\n<p>The 0x <a href=\"https://docs.0x.org/0x-api-swap/api-references/get-swap-v1-quote\">REST interface</a> for swaps has the ability to do a swap by token name rather than by token address. I was unable to figure out whether there was an allow-list of token names, or if it is easy to add a new token. If there is no, or an easily bypassed, access-control for adding new tokens, I would say this finding should be upgraded to high-severity, though I doubt this is the case.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/// concatenated symbol string</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">tokenSymbol</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">string</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;ROLLA&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;-&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">underlying</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;-&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">_uintToChars</span><span class=\"mtk1\">(</span><span class=\"mtk12\">day</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">monthSymbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">_uintToChars</span><span class=\"mtk1\">(</span><span class=\"mtk12\">year</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;-&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">displayStrikePrice</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;-&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">typeSymbol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L115-L130\">QTokenStringUtils.sol#L115-L130</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @return 2 characters that correspond to a number</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_uintToChars</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_number</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">pure</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">virtual</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_number</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">99</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_number</span><span class=\"mtk1\"> %= </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">str</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">Strings</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_number</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_number</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk7\">10</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">string</span><span class=\"mtk1\">(</span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodePacked</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;0&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">str</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">str</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L181-L199\">QTokenStringUtils.sol#L181-L199</a><br></p>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Include the full year in the token’s symbol.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/38#issuecomment-1102149864\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved in <a href=\"https://github.com/RollaProject/quant-protocol/pull/86\">RollaProject/quant-protocol#86</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-operateproxycallfunction-should-check-if-the-callee-is-a-contract\" style=\"position:relative;\"><a href=\"#m-06-operateproxycallfunction-should-check-if-the-callee-is-a-contract\" aria-label=\"m 06 operateproxycallfunction should check if the callee is a contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/46\">[M-06] <code>OperateProxy.callFunction()</code> should check if the <code>callee</code> is a contract</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/Controller.sol#L550-L558\">Controller.sol#L550-L558</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @notice Allows a sender/signer to make external calls to any other contract.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev A separate OperateProxy contract is used to make the external calls so</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// that the Controller, which holds funds and has special privileges in the Quant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// Protocol, is never the `msg.sender` in any of those external calls.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param _callee The address of the contract to be called.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param _data The calldata to be sent to the contract.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_callee</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IOperateProxy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">operateProxy</span><span class=\"mtk1\">).</span><span class=\"mtk11\">callFunction</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_callee</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/utils/OperateProxy.sol#L10-L19\">OperateProxy.sol#L10-L19</a><br></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">callFunction</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">callee</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">callee</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;OperateProxy: cannot make function calls to the zero address&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">callee</span><span class=\"mtk1\">).</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;OperateProxy: low-level call failed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">FunctionCallExecuted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tx</span><span class=\"mtk1\">.</span><span class=\"mtk12\">origin</span><span class=\"mtk1\">, </span><span class=\"mtk12\">returnData</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>As the <code>OperateProxy.sol#callFunction()</code> function not payable, we believe it’s not the desired behavior to call a non-contract address and consider it a successful call.</p>\n<p>For example, if a certain business logic requires a successful <code>token.transferFrom()</code> call to be made with the <code>OperateProxy</code>, if the <code>token</code> is not a existing contract, the call will return <code>success: true</code> instead of <code>success: false</code> and break the caller’s assumption and potentially malfunction features or even cause fund loss to users.</p>\n<p>The qBridge exploit (January 2022) was caused by a similar issue.</p>\n<p>As a reference, OpenZeppelin’s <code>Address.functionCall()</code> will check and <code>require(isContract(target), \"Address: call to non-contract\");</code></p>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/utils/Address.sol#L135\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/utils/Address.sol#L135</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">functionCallWithValue</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">target</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">errorMessage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">value</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Address: insufficient balance for call&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">isContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">target</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Address: call to non-contract&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">returndata</span><span class=\"mtk1\">) = </span><span class=\"mtk12\">target</span><span class=\"mtk1\">.</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk12\">value</span><span class=\"mtk1\">}(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">verifyCallResult</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">returndata</span><span class=\"mtk1\">, </span><span class=\"mtk12\">errorMessage</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/utils/Address.sol#L36-L42\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/utils/Address.sol#L36-L42</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">isContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">account</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// This method relies on extcodesize/address.code.length, which returns 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// for contracts in construction, since the code is only stored at the end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// of the constructor execution.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">account</span><span class=\"mtk1\">.</span><span class=\"mtk12\">code</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider adding a check and throw when the <code>callee</code> is not a contract.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/46#issuecomment-1102149223\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved in <a href=\"https://github.com/RollaProject/quant-protocol/pull/85\">RollaProject/quant-protocol#85</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-low-level-transfer-via-call-can-fail-silently\" style=\"position:relative;\"><a href=\"#m-07-low-level-transfer-via-call-can-fail-silently\" aria-label=\"m 07 low level transfer via call can fail silently permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/51\">[M-07] Low-level transfer via <code>call()</code> can fail silently</a></h2>\n<p><em>Submitted by 0xDjango</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/a06418c9cc847395f3699bdf684a9ac066651ed7/quant-protocol/contracts/timelock/TimelockController.sol#L414-L415\">TimelockController.sol#L414-L415</a><br></p>\n<p>In the <code>_call()</code> function in <code>TimelockController.sol</code>, a call is executed with the following code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function _call(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes32 id,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 index,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        address target,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256 value,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        bytes memory data</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ) private {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // solhint-disable-next-line avoid-low-level-calls</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (bool success, ) = target.call{value: value}(data);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(success, &quot;TimelockController: underlying transaction reverted&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        emit CallExecuted(id, index, target, value, data);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>Per the Solidity docs:</p>\n<p>“The low-level functions call, delegatecall and staticcall return true as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed.”</p>\n<p>Therefore, transfers may fail silently.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Please find the documentation <a href=\"https://docs.soliditylang.org/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions\">here</a>.</p>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Check for the account’s existence prior to transferring.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/51#issuecomment-1102148876\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>The TimelockController contract was removed from the protocol.</p>\n<p><a href=\"https://github.com/RollaProject/quant-protocol/pull/90\">RollaProject/quant-protocol#90</a></p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-arbitrary-code-can-be-run-with-controller-as-msgsender\" style=\"position:relative;\"><a href=\"#m-08-arbitrary-code-can-be-run-with-controller-as-msgsender\" aria-label=\"m 08 arbitrary code can be run with controller as msgsender permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/65\">[M-08] Arbitrary code can be run with Controller as msg.sender</a></h2>\n<p><em>Submitted by hyh</em></p>\n<p>A malicious user can call Controller’s operate with ActionType.QTokenPermit, providing a precooked contract address as qToken, that will be called by Controller contract with IQToken(_qToken).permit(), which implementation can be arbitrary as long as IQToken interface and permit signature is implemented.</p>\n<p>The Controller is asset bearing contract and it will be msg.sender in this arbitrary permit() function called, which is a setup that better be avoided.</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>When the Controller’s operate with a QTokenPermit action, it parses the arguments with Actions library and then calls internal _qTokenPermit:</p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/Controller.sol#L91-L92\">Controller.sol#L91-L92</a><br></p>\n<p>_qTokenPermit calls the IQToken(_qToken) address provided without performing any additional checks:</p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/Controller.sol#L497-L516\">Controller.sol#L497-L516</a><br></p>\n<p>This way, contrary to the approach used in other actions, qToken isn’t checked to be properly created address and is used right away, while the requirement that the address provided should implement IQToken interface and have permit function with a given signature can be easily met with a precooked contract.</p>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Given that QToken can be called directly please examine the need for QTokenPermit ActionType.</p>\n<p>If current approach is based on UI convenience and better be kept, consider probing for IOptionsFactory(optionsFactory).isQToken(_qToken) before calling the address provided.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/65#issuecomment-1102148357\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/RollaProject/quant-protocol/pull/82\">RollaProject/quant-protocol#82</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-spreads-can-be-minted-with-a-deactivated-oracle\" style=\"position:relative;\"><a href=\"#m-09-spreads-can-be-minted-with-a-deactivated-oracle\" aria-label=\"m 09 spreads can be minted with a deactivated oracle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/66\">[M-09] Spreads can be minted with a deactivated oracle</a></h2>\n<p><em>Submitted by hyh</em></p>\n<p>When deactivateOracle() is called for an oracle in OracleRegistry it is still available for option spreads minting.</p>\n<p>This way a user can continue to mint new options within spreads that rely on an oracle that was deactivated. As economic output of spreads is close to vanilla options, so all users who already posses an option linked to a deactivated oracle can surpass this deactivation, being able to mint new options linked to it as a part of option spreads.</p>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Oracle active state is checked with isOracleActive() during option creation in validateOptionParameters() and during option minting in _mintOptionsPosition().</p>\n<p>It isn’t checked during spreads creation:</p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/libraries/FundsCalculator.sol#L91-L117\">FundsCalculator.sol#L91-L117</a><br></p>\n<p>In other words besides vanilla option minting and creation all spectrum of operations is available for the deactivated oracle assets, including spreads minting, which economically is reasonably close to vanilla minting.</p>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>If oracle deactivation is meant to transfer all related assets to the close only state then consider requiring oracle to be active on spreads minting as well in the same way it’s done for vanilla option minting:</p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/Controller.sol#L188-L197\">Controller.sol#L188-L197</a><br></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/66#issuecomment-1102147878\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved in <a href=\"https://github.com/RollaProject/quant-protocol/pull/81\">RollaProject/quant-protocol#81</a>.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-10-admin-of-the-upgradeable-proxy-contract-of-controllersol-can-rug-users\" style=\"position:relative;\"><a href=\"#m-10-admin-of-the-upgradeable-proxy-contract-of-controllersol-can-rug-users\" aria-label=\"m 10 admin of the upgradeable proxy contract of controllersol can rug users permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/48\">[M-10] Admin of the upgradeable proxy contract of <code>Controller.sol</code> can rug users</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/a06418c9cc847395f3699bdf684a9ac066651ed7/quant-protocol/contracts/Controller.sol#L22-L34\">Controller.sol#L22-L34</a><br></p>\n<p>Use of Upgradeable Proxy Contract Structure allows the logic of the contract to be arbitrarily changed.</p>\n<p>This allows the proxy admin to perform malicious actions e.g., taking funds from users’ wallets up to the allowance limit.</p>\n<p>This action can be performed by the malicious/compromised proxy admin without any restriction.</p>\n<p>Considering that the purpose of this particular contract is for accounting of the Collateral and LongShortTokens, we believe the users’ allowances should not be hold by this upgradeable contract.</p>\n<h3 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Given:</p>\n<ul>\n<li>collateral: <code>USDC</code></li>\n</ul>\n<h4 id=\"rug-users-allowances\" style=\"position:relative;\"><a href=\"#rug-users-allowances\" aria-label=\"rug users allowances permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rug Users’ Allowances</h4>\n<ol>\n<li>Alice <code>approve()</code> and <code>_mintOptionsPosition()</code> with <code>1e8 USDC</code>;</li>\n<li>Bob  <code>approve()</code> and <code>_mintOptionsPosition()</code> with <code>5e8 USDC</code>;</li>\n<li>A malicious/compromised proxy admin can call <code>upgradeToAndCall()</code> on the proxy contract and set a malicious contract as <code>newImplementation</code> and stolen all the USDC in Alice and Bob’s wallets;</li>\n</ol>\n<h4 id=\"rug-contracts-holdings-funds-that-belong-to-users\" style=\"position:relative;\"><a href=\"#rug-contracts-holdings-funds-that-belong-to-users\" aria-label=\"rug contracts holdings funds that belong to users permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rug Contract’s Holdings (funds that belong to users)</h4>\n<p>A malicious/compromised proxy admin can just call <code>upgradeToAndCall()</code> on the proxy contract and send all the USDC held by the contract to an arbitrary address.</p>\n<h3 id=\"severity\" style=\"position:relative;\"><a href=\"#severity\" aria-label=\"severity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity</h3>\n<p>A smart contract being structured as an upgradeable contract alone is not usually considered as a high severity risk. But given the severe impact (all the funds in the contract and funds in users’ wallets can be stolen), we mark it as a <code>High</code> severity issue.</p>\n<h3 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider using the non-upgradeable <code>CollateralToken</code> contract to hold user’s allowances instead.</p>\n<p>See also our Recommendation in [issue #49](<a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/49\">https://github.com/code-423n4/2022-03-rolla-findings/issues/49</a>).</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/48#issuecomment-1102146181\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved with the removal of the previous access control role-based system: <a href=\"https://github.com/RollaProject/quant-protocol/pull/90\">RollaProject/quant-protocol#90</a>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/48#issuecomment-1106040260\">alcueca (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>Assets are not directly at risk, as a governance attack must happen first. Downgraded to medium.</p>\n</blockquote>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this contest, 20 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/8\">report highlighted below</a> by <strong>0x1f8b</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/61\">berndartmueller</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/37\">IllIllI</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/58\">0xkatana</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/22\">gzeon</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/62\">0xDjango</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/54\">defsec</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/36\">danb</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/25\">badbird</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/30\">rayn</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/63\">cryptphi</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/18\">Ruhum</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/1\">robee</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/20\">TerrierLover</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/42\">WatchPug</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/56\">0v3rf10w</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/41\">hyh</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/6\">jayjonah8</a>, <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/23\">remora</a>, and <a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/26\">0xmint</a>.</em></p>\n<h2 id=\"l-01\" style=\"position:relative;\"><a href=\"#l-01\" aria-label=\"l 01 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01]</h2>\n<p>It’s possible to call the method <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/AssetsRegistry.sol#L60\">addAsset</a> multiple times with the same <code>_underlying</code>, if you call <code>addAsset</code> with empty <code>symbol</code> it will bypass the <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/AssetsRegistry.sol#L37\">validAsset</a> modifier, and it will be possible to call again the <code>addAsset</code> with different values. It will produce a mismatch with the reality and <code>getAssetsLength</code>.</p>\n<p>This could cause a loss of funds if it is not verified before that this <code>symbol</code> is other than empty. It is mandatory to add a require to verify that the <code>symbol</code> is not empty. It’s also recommended to add a require in <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L24\">_assetSymbol</a> to ensure non-existence tokens are returned.</p>\n<h2 id=\"l-02\" style=\"position:relative;\"><a href=\"#l-02\" aria-label=\"l 02 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02]</h2>\n<p>It’s possible to call the method <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/CollateralToken.sol#L61\">createCollateralToken</a> multiple times with the same <code>_qTokenAddress</code>, if you call <code>createCollateralToken</code> with empty <code>_qTokenAddress</code> it will bypass the <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/CollateralToken.sol#L81\">require(idToInfo[id].qTokenAddress == address(0))</a>, and it will be possible to call again the <code>createCollateralToken</code> with different values. It will produce a mismatch with the reality and <code>collateralTokenIds</code>.</p>\n<p>It is mandatory to add a require to verify that the <code>_qTokenAddress</code> is not empty.</p>\n<h2 id=\"l-03\" style=\"position:relative;\"><a href=\"#l-03\" aria-label=\"l 03 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03]</h2>\n<p>It’s possible to approve with <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/CollateralToken.sol#L218-L219\">metaSetApprovalForAll</a> an empty address for any operator, <code>ecrecover</code> is not checked to return <code>address(0)</code>, so using <code>owner=address(0)</code> it is possible to approve or reject empty owners for any operator. It’s recommended to use ECDSA from open-zeppelin.</p>\n<h2 id=\"l-04\" style=\"position:relative;\"><a href=\"#l-04\" aria-label=\"l 04 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-04]</h2>\n<p>When calling <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L255\">_getMonth</a> with a value greater than 12 “December” is returned, it’s best to make sure the value is as expected.</p>\n<h2 id=\"l-05\" style=\"position:relative;\"><a href=\"#l-05\" aria-label=\"l 05 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-05]</h2>\n<p>Use a buggy solidity version with immutables.</p>\n<p>The contract uses immutable, and this solidity version defined in the pragma has some issues with them, as you can see <a href=\"https://github.com/ethereum/solidity/blob/develop/Changelog.md#089-2021-09-29\">here</a>.</p>\n<h2 id=\"l-06\" style=\"position:relative;\"><a href=\"#l-06\" aria-label=\"l 06 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-06]</h2>\n<p>It’s possible to call the method <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/pricing/oracle/ProviderOracleManager.sol#L25\">addAssetOracle</a> multiple times with the same <code>_asset</code>, if you call <code>addAssetOracle</code> with empty <code>_oracle</code> it will bypass the <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/pricing/oracle/ProviderOracleManager.sol#L34\">assetOracles[_asset] == address(0)</a>, and it will be possible to call again the <code>addAssetOracle</code> with different values. It will produce a mismatch with the reality and <code>assets</code></p>\n<p>It is mandatory to add a require to verify that the <code>_oracle</code> is not empty.</p>\n<h2 id=\"n-01\" style=\"position:relative;\"><a href=\"#n-01\" aria-label=\"n 01 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01]</h2>\n<p><code>collateralTokenId</code> is used as <code>deadline</code> and it could be confused, it’s better to rename it or add a specific comment about that.</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/libraries/Actions.sol#L110\">Actions.sol#L110</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/libraries/Actions.sol#L135\">Actions.sol#L135</a></li>\n</ul>\n<h2 id=\"n-02\" style=\"position:relative;\"><a href=\"#n-02\" aria-label=\"n 02 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02]</h2>\n<p>Use <code>uint8</code> for <code>decimals</code> in <a href=\"https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L142\">QTokenStringUtils.sol#L142</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/8#issuecomment-1102154756\">0xca11 (Rolla) confirmed, resolved, and commented</a>:</strong></p>\n<blockquote>\n<p>Resolved in <a href=\"https://github.com/RollaProject/quant-protocol/commit/ebe5f2b83a4b8e2431e125e1d803963f7f0be03d\">RollaProject/quant-protocol@ebe5f2b</a>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-03-rolla-findings/issues/8#issuecomment-1096516916\">alcueca (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Score: 100</p>\n</blockquote>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-4\">High Risk Findings (4)</a></p>\n<ul>\n<li><a href=\"#h-01-incorrect-strike-price-displayed-in-namesymbol-of-qtoken-\">[H-01] Incorrect strike price displayed in name/symbol of qToken </a></li>\n<li><a href=\"#h-02-mint-spread-collateral-less-and-conjuring-collateral-claims-out-of-thin-air-with-implicit-arithmetic-rounding-and-flawed-int-to-uint-conversion\">[H-02] Mint spread collateral-less and conjuring collateral claims out of thin air with implicit arithmetic rounding and flawed int to uint conversion</a></li>\n<li><a href=\"#h-03--wrong-implementation-of-eip712metatransaction\">[H-03]  Wrong implementation of <code>EIP712MetaTransaction</code></a></li>\n<li><a href=\"#h-04-eip712metatransactionexecutemetatransaction-failed-txs-are-open-to-replay-attacks\">[H-04] <code>EIP712MetaTransaction.executeMetaTransaction()</code> failed txs are open to replay attacks</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-10\">Medium Risk Findings (10)</a></p>\n<ul>\n<li><a href=\"#m-01-no-use-of-upgradeable-safeerc20-contract-in-controllersol\">[M-01] No use of upgradeable SafeERC20 contract in <code>Controller.sol</code></a></li>\n<li><a href=\"#m-02-collateral_minter_role-can-be-granted-by-the-deployer-of-quantconfig-and-mint-arbitrary-amount-of-tokens\">[M-02] <code>COLLATERAL_MINTER_ROLE</code> can be granted by the deployer of <code>QuantConfig</code> and mint arbitrary amount of tokens</a></li>\n<li><a href=\"#m-03-usage-of-deprecated-chainlink-functions\">[M-03] Usage of deprecated Chainlink functions</a></li>\n<li><a href=\"#m-04-configtimelockcontroller-will-put-quantconfig-in-a-stalemate-rendering-it-unusable-\">[M-04] <code>ConfigTimeLockController</code> will put <code>QuantConfig</code> in a stalemate (rendering it unusable) </a></li>\n<li><a href=\"#m-05-qtokens-with-the-same-symbol-will-lead-to-mistakes\">[M-05] QTokens with the same symbol will lead to mistakes</a></li>\n<li><a href=\"#m-06-operateproxycallfunction-should-check-if-the-callee-is-a-contract\">[M-06] <code>OperateProxy.callFunction()</code> should check if the <code>callee</code> is a contract</a></li>\n<li><a href=\"#m-07-low-level-transfer-via-call-can-fail-silently\">[M-07] Low-level transfer via <code>call()</code> can fail silently</a></li>\n<li><a href=\"#m-08-arbitrary-code-can-be-run-with-controller-as-msgsender\">[M-08] Arbitrary code can be run with Controller as msg.sender</a></li>\n<li><a href=\"#m-09-spreads-can-be-minted-with-a-deactivated-oracle\">[M-09] Spreads can be minted with a deactivated oracle</a></li>\n<li><a href=\"#m-10-admin-of-the-upgradeable-proxy-contract-of-controllersol-can-rug-users\">[M-10] Admin of the upgradeable proxy contract of <code>Controller.sol</code> can rug users</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#l-01\">L-01</a></li>\n<li><a href=\"#l-02\">L-02</a></li>\n<li><a href=\"#l-03\">L-03</a></li>\n<li><a href=\"#l-04\">L-04</a></li>\n<li><a href=\"#l-05\">L-05</a></li>\n<li><a href=\"#l-06\">L-06</a></li>\n<li><a href=\"#n-01\">N-01</a></li>\n<li><a href=\"#n-02\">N-02</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 audit contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the audit contest outlined in this document, C4 conducted an analysis of the Rolla smart contract system written in Solidity. The audit contest took place between March 17—March 24 2022.\n\n## Wardens\n\n23 Wardens contributed reports to the Rolla contest:\n\n  1. [WatchPug](https://twitter.com/WatchPug_) ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n  1. [rayn](https://twitter.com/rayn731)\n  1. hyh\n  1. IllIllI\n  1. 0xDjango\n  1. jayjonah8\n  1. 0xmint\n  1. 0x1f8b\n  1. cccz\n  1. [danb](https://twitter.com/danbinnun)\n  1. [berndartmueller](https://twitter.com/berndartmueller)\n  1. [Ruhum](https://twitter.com/0xruhum)\n  1. 0xkatana\n  1. [gzeon](https://twitter.com/gzeon)\n  1. [defsec](https://twitter.com/defsec_)\n  1. [badbird](https://twitter.com/b4db1rd)\n  1. cryptphi\n  1. robee\n  1. TerrierLover\n  1. [0v3rf10w](https://twitter.com/_0v3rf10w)\n  1. remora\n  1. Jujic\n\nThis contest was judged by [Alberto Cuesta Cañada](https://twitter.com/alcueca).\n\nFinal report assembled by [liveactionllama](https://twitter.com/liveactionllama).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 14 unique vulnerabilities. Of these vulnerabilities, 4 received a risk rating in the category of HIGH severity and 10 received a risk rating in the category of MEDIUM severity.\n\nAdditionally, C4 analysis included 20 reports detailing issues with a risk rating of LOW severity or non-critical.\n\nAll of the issues presented here are linked back to their original finding.\n\n# Scope\n\nThe code under review can be found within the [C4 Rolla contest repository](https://github.com/code-423n4/2022-03-rolla), and is composed of 24 smart contracts written in the Solidity programming language and includes 4,071 lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low/non-critical.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code4rena.com).\n\n# High Risk Findings (4)\n## [[H-01] Incorrect strike price displayed in name/symbol of qToken ](https://github.com/code-423n4/2022-03-rolla-findings/issues/28)\n_Submitted by rayn_\n\n`_slice()` in `options/QTokenStringUtils.sol` cut a string into `string[start:end]` However, while fetching bytes, it uses `bytes(_s)[_start+1]` instead of `bytes(_s)[_start+i]`. This causes the return string to be composed of `_s[start]*(_end-_start)`. The result of this function is then used to represent the decimal part of strike price in name/symbol of qToken, leading to potential confusion over the actual value of options.\n\n### Proof of Concept\n\nERC20 tokens are usually identified by their name and symbol. If the symbols are incorrect, confusions may occur. Some may argue that even if names and symbols are not accurate, it is still possible to identify correct information/usage of tokens by querying the provided view functions and looking at its interactions with other contracts. However, the truth is many users of those tokens are not very tech savvy, and it is reasonable to believe a large proportion of users are not equipped with enough knowledge, or not willing to dig further than the plain symbols and names. This highlights the importance of maintaining a correct facade for ERC20 tokens.\n\nThe bug demonstrated here shows that any qToken with decimals in its strike price will be misdisplayed, and the maximal difference between actual price and displayed one can be up to 0.1 BUSD.\n\nThe exploit can be outlined through the following steps:\n\n*   Alice created a call option with strike price 10000.90001. The expected symbol should for this qToken should be : `ROLLA WETH 31-December-2022 10000.90001 Call`\n\n*   Both `_qTokenName()` and `_qTokenSymbol()` in `options/QTokenStringUtils.sol` use `_displayedStrikePrice()` to get the strike price string which should be `10000.90001`\n\n<https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L38><br>\n<https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L90><br>\n\n        function _qTokenName(\n            address _quantConfig,\n            address _underlyingAsset,\n            address _strikeAsset,\n            uint256 _strikePrice,\n            uint256 _expiryTime,\n            bool _isCall\n        ) internal view virtual returns (string memory tokenName) {\n            string memory underlying = _assetSymbol(_quantConfig, _underlyingAsset);\n            string memory displayStrikePrice = _displayedStrikePrice(\n                _strikePrice,\n                _strikeAsset\n            );\n    \t\t\n            ...\n    \t\t\n            tokenName = string(\n                abi.encodePacked(\n                    \"ROLLA\",\n                    \" \",\n                    underlying,\n                    \" \",\n                    _uintToChars(day),\n                    \"-\",\n                    monthFull,\n                    \"-\",\n                    Strings.toString(year),\n                    \" \",\n                    displayStrikePrice,\n                    \" \",\n                    typeFull\n                )\n            );\n        }\n\n```\n\n    function _qTokenSymbol(\n        address _quantConfig,\n        address _underlyingAsset,\n        address _strikeAsset,\n        uint256 _strikePrice,\n        uint256 _expiryTime,\n        bool _isCall\n    ) internal view virtual returns (string memory tokenSymbol) {\n        string memory underlying = _assetSymbol(_quantConfig, _underlyingAsset);\n        string memory displayStrikePrice = _displayedStrikePrice(\n            _strikePrice,\n            _strikeAsset\n        );\n\n        // convert the expiry to a readable string\n        (uint256 year, uint256 month, uint256 day) = DateTime.timestampToDate(\n            _expiryTime\n        );\n\n        // get option type string\n        (string memory typeSymbol, ) = _getOptionType(_isCall);\n\n        // get option month string\n        (string memory monthSymbol, ) = _getMonth(month);\n\n        /// concatenated symbol string\n        tokenSymbol = string(\n            abi.encodePacked(\n                \"ROLLA\",\n                \"-\",\n                underlying,\n                \"-\",\n                _uintToChars(day),\n                monthSymbol,\n                _uintToChars(year),\n                \"-\",\n                displayStrikePrice,\n                \"-\",\n                typeSymbol\n            )\n        );\n    }\n```\n\n*   `_displayedStrikePrice()` combines the quotient and the remainder to form the strike price string. The remainder use `_slice` to compute. In this case, the quotient is `10000` and the remainder is `90001`\n\n<https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L136><br>\n\n    function _displayedStrikePrice(uint256 _strikePrice, address _strikeAsset)\n            internal\n            view\n            virtual\n            returns (string memory)\n        {\n            uint256 strikePriceDigits = ERC20(_strikeAsset).decimals();\n            uint256 strikePriceScale = 10**strikePriceDigits;\n            uint256 remainder = _strikePrice % strikePriceScale;\n            uint256 quotient = _strikePrice / strikePriceScale;\n            string memory quotientStr = Strings.toString(quotient);\n\n            if (remainder == 0) {\n                return quotientStr;\n            }\n\n            uint256 trailingZeroes;\n            while (remainder % 10 == 0) {\n                remainder /= 10;\n                trailingZeroes++;\n            }\n\n            // pad the number with \"1 + starting zeroes\"\n            remainder += 10**(strikePriceDigits - trailingZeroes);\n\n            string memory tmp = Strings.toString(remainder);\n            tmp = _slice(tmp, 1, (1 + strikePriceDigits) - trailingZeroes);\n\n            return string(abi.encodePacked(quotientStr, \".\", tmp));\n        }\n\n*   However inside the loop of `_slice()`, `slice[i] = bytes(_s)[_start + 1];` lead to an incorrect string, which is `90001`\n\n<https://github.com/RollaProject/quant-protocol/blob/98639a3/contracts/options/QTokenStringUtils.sol#L206><br>\n\n        function _slice(\n            string memory _s,\n            uint256 _start,\n            uint256 _end\n        ) internal pure virtual returns (string memory) {\n            uint256 range = _end - _start;\n            bytes memory slice = new bytes(range);\n            for (uint256 i = 0; i < range; ) {\n                slice[i] = bytes(_s)[_start + 1];\n                unchecked {\n                    ++i;\n                }\n            }\n\n            return string(slice);\n        }\n\n*   The final qtoken name now becomes `ROLLA WETH 31-December-2022 10000.99999 Call`, which results in confusion over the actual value of options.\n\n### Recommended Mitigation Steps\n\nFix the bug in the `_slice()`\n\n        function _slice(\n            string memory _s,\n            uint256 _start,\n            uint256 _end\n        ) internal pure virtual returns (string memory) {\n            uint256 range = _end - _start;\n            bytes memory slice = new bytes(range);\n            for (uint256 i = 0; i < range; ) {\n                slice[i] = bytes(_s)[_start + i];\n                unchecked {\n                    ++i;\n                }\n            }\n\n            return string(slice);\n        }\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/28#issuecomment-1102139409):**\n > Resolved in [RollaProject/quant-protocol#77](https://github.com/RollaProject/quant-protocol/pull/77)\n\n\n***\n\n## [[H-02] Mint spread collateral-less and conjuring collateral claims out of thin air with implicit arithmetic rounding and flawed int to uint conversion](https://github.com/code-423n4/2022-03-rolla-findings/issues/31)\n_Submitted by rayn_\n\n[QuantMath.sol#L137](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/libraries/QuantMath.sol#L137)<br>\n[QuantMath.sol#L151](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/libraries/QuantMath.sol#L151)<br>\n[SignedConverter.sol#L28](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/libraries/SignedConverter.sol#L28)<br>\n\nThis report presents 2 different incorrect behaviour that can affect the correctness of math calculations:\n\n1.  Unattended Implicit rounding in QuantMath.sol `div` and `mul`\n2.  Inappropriate method of casting integer to unsigned integer in SignedConverter.sol `intToUint`\n\nBug 1 affects the correctness when calculating collateral required for `_mintSpread`. Bug 2 expands the attack surface and allows attackers to target the `_claimCollateral` phase instead. Both attacks may result in tokens being stolen from Controller in the worst case, but is most likely too costly to exploit under current BNB chain environment. The potential impact however, should not be taken lightly, since it is known that the ethereum environment in highly volatile and minor changes in the environment can suddenly make those bugs cheap to exploit.\n\n### Proof of Concept\n\nIn this section, we will first present bug 1, and then demonstrate how this bug can be exploited. Then we will discuss how bug 2 opens up more attack chances and go over another PoC.\n\nBefore getting started, we should go over an important concept while dealing with fixed point number -- rounding.\nMath has no limits on precision, but computers do. This problem is especially critical to systems handling large amount of \"money\" that is allowed to be arbitrarily divided. A common way for ethereum smart contract developers to handle this is through rounding numbers. Rolla is no exception.\n\nIn QuantMath, Rolla explicitly wrote the `toScaledUint` function to differentiate between rounding numbers up or down when scaling numbers to different precision (or we call it `_decimals` here). The intended usage is to scale calculated numbers (amount of tokens) up when Controller is the receiver, and scale it down when Controller is sender. In theory, this function should guarantee Controller can never \"lose tokens\" due to rounding.\n\n    library QuantMath {\n        ...\n        struct FixedPointInt {\n            int256 value;\n        }\n\n        int256 private constant _SCALING_FACTOR = 1e27;\n        uint256 private constant _BASE_DECIMALS = 27;\n\n        ...\n\n        function toScaledUint(\n            FixedPointInt memory _a,\n            uint256 _decimals,\n            bool _roundDown\n        ) internal pure returns (uint256) {\n            uint256 scaledUint;\n\n            if (_decimals == _BASE_DECIMALS) {\n                scaledUint = _a.value.intToUint();\n            } else if (_decimals > _BASE_DECIMALS) {\n                uint256 exp = _decimals - _BASE_DECIMALS;\n                scaledUint = (_a.value).intToUint() * 10**exp;\n            } else {\n                uint256 exp = _BASE_DECIMALS - _decimals;\n                uint256 tailing;\n                if (!_roundDown) {\n                    uint256 remainer = (_a.value).intToUint() % 10**exp;\n                    if (remainer > 0) tailing = 1;\n                }\n                scaledUint = (_a.value).intToUint() / 10**exp + tailing;\n            }\n\n            return scaledUint;\n        }\n        ...\n    }\n\nIn practice, the above function also works quite well (sadly, not perfect, notice the `intToUint` function within. We will come back to this later), but it only works if we can promise that before entering this function, all numbers retain full precision and is not already rounded. This is where `div` and `mul` comes into play. As we can easily see in the snippet below, both functions involve the division operator '/', which by default discards the decimal part of the calculated result (be aware to not confuse this with the `_decimal` used while scaling FixedPointInt). The operation here results in an implicit round down, which limits the effectiveness of  explicit rounding in `toScaledUint` showned above.\n\n        function mul(FixedPointInt memory a, FixedPointInt memory b)\n            internal\n            pure\n            returns (FixedPointInt memory)\n        {\n            return FixedPointInt((a.value * b.value) / _SCALING_FACTOR);\n        }\n\n\n        function div(FixedPointInt memory a, FixedPointInt memory b)\n            internal\n            pure\n            returns (FixedPointInt memory)\n        {\n            return FixedPointInt((a.value * _SCALING_FACTOR) / b.value);\n        }\n\nNow let's see how this implicit rounding can causes troubles. We start with the `_mintSpread` procedure creating a call credit spread. For brevity, the related code is not shown, but here's a summary of what is done.\n\n*   `Controller._mintSpread`\n    *   `QuantCalculator.getCollateralRequirement`\n        *   `FundsCalculator.getCollateralRequirement`\n            *   `FundsCalculator.getOptionCollateralRequirement`\n                *   `FundsCalculator.getCallCollateralRequirement`\n                    *   scales `_qTokenToMintStrikePrice` from\n                        `_strikeAssetDecimals (8)` to `_BASE_DECIMALS (27)`\n                    *   scales `_qTokenForCollateralStrikePrice` from\n                        `_strikeAssetDecimals (8)` to `_BASE_DECIMALS (27)`\n                    *   `collateralPerOption = (collateralStrikePrice.sub(mintStrikePrice)).div(collateralStrikePrice)`\n                *   scale `_optionsAmount` from `_optionsDecimals (18)` to `_BASE_DECIMALS (27)`\n                *   `collateralAmount = _optionsAmount.mul(collateralPerOption)`\n            *   uses `qTokenToMint.underlyingAsset` (weth or wbtc) as collateral\n        *   scale and round up `collateralAmountFP` from `_BASE_DECIMALS (27)` to `payoutDecimals (18)`\n\nIf we extract all the math related stuff, it would be something like below\n\n    def callCreditSpreadCollateralRequirement(_qTokenToMintStrikePrice, _qTokenForCollateralStrikePrice, _optionsAmount):\n            X1 = _qTokenToMintStrikePrice * 10^19\n            X2 = _qTokenForCollateralStrikePrice * 10^19\n            X3 = _optionsAmount * 10^9\n\n            assert X1 < X2          #credit spread\n\n            Y1 = (X2 - X1) * 10^27 // X2    #implicit round down due to div\n            Y2 = Y1 * X3 // 10^27   #implicit round down due to mul\n\n            Z = Y2 // 10^9\n            if Y2 % 10^9 > 0:       #round up since we are minting spread (Controller is receiver)\n                    Z+=1\n            return Z\n\nBoth implicit round downs can be abused, but we shall focus on the `mul` one here.\nAssume we follow the following actions\n\n1.  create option `A` with strike price `10 + 10^-8 BUSD (10^9 + 1 under 8 decimals) <-> 1 WETH`<br>\n2.  create option `B` with strike price `10 BUSD (10^9 under 8 decimals) <-> 1 WETH`<br>\n3.  mint `10^-18` (1 under 18 decimals) option `A`<br>\n    3-1. `pay 1 eth`<br>\n4.  mint `10^-18` (1 under 18 decimals) spread `B` with `A` as collateral<br>\n    4-1. `X1 = _qTokenToMintStrikePrice * 10^19 = 10^9 * 10^19 = 10^28`<br>\n    4-2. `X2 = _qTokenToMintStrikePrice * 10^19 = (10^9 + 1) * 10^19 = 10^28 + 10^19`<br>\n    4-3. `X3 = _optionsAmount * 10^9 = 1 * 10^9 = 10^9`<br>\n    4-4. `Y1 = (X2 - X1) * 10^27 // X2 = (10^28 + 10^19 - 10^28) * 10^27 // (10^28 + 10^19) = 99999999000000000`<br>\n    4-5. `Y2 = Y1 * X3 // 10^27 = 99999999000000000 * 10^9 / 10^27 = 0`<br>\n    4-6. `Z = Y2 // 10^9 = 0`<br>\n    4-7. `Y2 % 10^9 = 0` so `Z` remains unchanged<br>\n\nWe minted a call credit spread without paying any fee.\n\nNow let's think about how to extract the value we conjured out of thin air. To be able to withdraw excessive collateral, we can choose to do a excercise+claim or neutralize current options. Here we take the neutralize path.\n\nFor neutralizing spreads, the procedure is basically the same as minting spreads, except that the explicit round down is taken since `Controller` is the payer here. The neutralize procedure returns the `qToken` used as collateral and pays the collateral fee back. The math part can be summarized as below.\n\n    def neutralizeCreditSpreadCollateralRequirement(_qTokenToMintStrikePrice, _qTokenForCollateralStrikePrice, _optionsAmount):\n            X1 = _qTokenToMintStrikePrice * 10^19\n            X2 = _qTokenForCollateralStrikePrice * 10^19\n            X3 = _optionsAmount * 10^9\n\n            assert X1 < X2          #credit spread\n\n            Y1 = (X2 - X1) * 10^27 // X2    #implicit round down due to div\n            Y2 = Y1 * X3 // 10^27   #implicit round down due to mul\n\n            Z = Y2 // 10^9  #explicit scaling\n            return Z\n\nThere are two challenges that need to be bypassed, the first one is to avoid implicit round down in `mul`, and the second is to ensure the revenue is not rounded away during explicit scaling.\nTo achieve this, we first mint `10^-9 + 2 * 10^-18` spreads seperately (10^9 + 2 under 18 decimals), and as shown before, no additional fees are required while minting spread from original option.\nThen we neutralize all those spreads at once, the calculation is shown below.\n\n1.  neutralize `10^-9 + 2 * 10^-18` (10^9 + 2 under 18 decimals) spread `B`<br>\n    4-1. `X1 = _qTokenToMintStrikePrice * 10^19 = 10^9 * 10^19 = 10^28`<br>\n    4-2. `X2 = _qTokenToMintStrikePrice * 10^19 = (10^9 + 1) * 10^19 = 10^28 + 10^19`<br>\n    4-3. `X3 = _optionsAmount * 10^9 = (10^9 + 2) * 10^9 = 10^18 + 2`<br>\n    4-4. `Y1 = (X2 - X1) * 10^27 // X2 = (10^28 + 10^19 - 10^28) * 10^27 // (10^28 + 10^19) = 99999999000000000`<br>\n    4-5. `Y2 = Y1 * X3 // 10^27 = 99999999000000000 * (10^18 + 2) / 10^27 = 1000000000`<br>\n    4-6. `Z = Y2 // 10^9 = 10^9 // 10^9 = 1`<br>\n\nAnd with this, we managed to generate 10^-18 weth of revenue.\n\nThis approach is pretty impractical due to the requirement of minting 10^-18 for `10^9 + 2` times. This montrous count mostly likely requires a lot of gas to pull off, and offsets the marginal revenue generated through our attack. This leads us to explore other possible methods to bypass this limitation.\n\nIt's time to start looking at the second bug.\n\nRecall we mentioned the second bug is in `intToUint`, so here's the implementation of it. It is not hard to see that this is actually an `abs` function named as `intToUint`.\n\n        function intToUint(int256 a) internal pure returns (uint256) {\n            if (a < 0) {\n                return uint256(-a);\n            } else {\n                return uint256(a);\n            }\n        }\n\nWhere is this function used? And yes, you guessed it, in `QuantCalculator.calculateClaimableCollateral`. The process of claiming collateral is quite complex, but we will only look at the specific case relevant to the exploit. Before reading code, let's first show the desired scenario. Note that while we wait for expiry, there are no need to sell any option/spread.\n\n1.  mint a `qTokenLong` option\n2.  mint a `qTokenShort` spread with `qTokenLong` as collateral\n3.  wait until expire, and expect expiryPrice to be between qTokenLong and qTokenShort\n\n<!---->\n\n    ----------- qTokenLong strike price\n\n    ----------- expiryPrice\n\n    ----------- qTokenShort strike price\n\nHere is the outline of the long waited claimCollateral for spread.\n\n*   `Controller._claimCollateral`\n    *   `QuantCalculator.calculateClaimableCollateral`\n        *   `FundsCalculator.getSettlementPriceWithDecimals`\n        *   `FundsCalculator.getPayout` for qTokenLong\n            *   qTokenLong strike price is above expiry price, worth 0\n        *   `FundsCalculator.getCollateralRequirement`\n            *   This part we saw earlier, omit details\n        *   `FundsCalculator.getPayout` for qTokenShort\n            *   uses `qTokenToMint.underlyingAsset` (weth or wbtc) as collateral\n            *   `FundsCalculator.getPayoutAmount` for qTokenShort\n                *   scale `_strikePrice` from\n                    `_strikeAssetDecimals (8)` to `_BASE_DECIMALS (27)`\n                *   scale `_expiryPrice.price` from\n                    `_expiryPrice.decimals (8)` to `_BASE_DECIMALS (27)`\n                *   scale `_amount` from\n                    `_optionsDecimals (18)` to `_BASE_DECIMALS (27)`\n                *   `FundsCalculator.getPayoutForCall` for qTokenShort\n                    *   `payoutAmount = expiryPrice.sub(strikePrice).mul(amount).div(expiryPrice)`\n        *   `returnableCollateral = payoutFromLong.add(collateralRequirement).sub(payoutFromShort)`\n        *   scale and round down `abs(returnableCollateral)` from `_BASE_DECIMALS (27)` to `payoutDecimals (18)`\n\nAgain, we summarize the math part into a function.\n\n    def claimableCollateralCallCreditSpreadExpiryInbetween(_qTokenShortStrikePrice, _qTokenLongStrikePrice, _expiryPrice, _amount):\n\n            def callCreditSpreadCollateralRequirement(_qTokenToMintStrikePrice, _qTokenForCollateralStrikePrice, _optionsAmount):\n                    X1 = _qTokenToMintStrikePrice * 10^19\n                    X2 = _qTokenForCollateralStrikePrice * 10^19\n                    X3 = _optionsAmount * 10^9\n\n                    Y1 = (X2 - X1) * 10^27 // X2\n                    Y2 = Y1 * X3 // 10^27\n                    return Y2\n\n            def callCreditSpreadQTokenShortPayout(_strikePrice, _expiryPrice, _amount):\n                    X1 = _strikePrice * 10^19\n                    X2 = _expiryPrice * 10^19\n                    X3 = _amount * 10^9\n\n                    Y1 = (X2-X1) * X3 // 10^27\n                    Y2 = Y1 * 10^27 // X2\n                    return Y2\n\n\n            assert _qTokenShortStrikePrice > _expiryPrice > _qTokenLongStrikePrice\n\n            A1 = payoutFromLong = 0\n            A2 = collateralRequirement = callCreditSpreadCollateralRequirement(_qTokenShortStrikePrice, _qTokenLongStrikePrice, _amount)\n            A3 = payoutFromShort = callCreditSpreadQTokenShortPayout(_qTokenShortStrikePrice, _expiryPrice, _amount)\n\n            B1 = A1 + A2 - A3\n\n            Z = abs(B1) // 10^9\n            return Z\n\nGiven the context, it should be pretty easy to imagine what I am aiming here, to make `B1 < 0`. We already know `A1 = 0`, so the gaol basically boils down to making `A2 < A3`. Let's further simplify this requirement and see if the equation is solvable.\n\n    X = _qTokenLongStrikePrice (8 decimals)\n    Y = _expiryPrice (8 decimals)\n    Z = _qTokenShortStrikePrice (8 decimals)\n    A = _amount (scaled to 27 decimals)\n\n    assert X>Y>Z>0\n    assert X,Y,Z are integers\n    assert (((X - Z) * 10^27 // X) * A // 10^27) < (((Y - Z) * A // 10^27) * 10^27 // Y)\n\nNotice apart from the use of `X` and `Y`, the two sides of the equation only differs by when `A` is mixed into the equation, meaning that if we temporarily ignore the limitation and set `X = Y`, as long as left hand side of equation does an implicit rounding after dividing by X, right hand side will most likely be larger.\n\nUtilizing this, we turn to solve the equation of:\n\n    (X-Z) / X - (Y-Z) / Y < 10^-27\n    => Z / Y - Z / X < 10^-27\n    => (Z = 1 yields best solution)\n    => 1 / Y - 1 / X < 10^-27\n    => X - Y < X * Y * 10^-27\n    => 0 < X * Y - 10^27 * X + 10^27 * Y\n\n    => require X > Y, so model Y as X - B, where B > 0 and B is an integer\n    => 0 < X^2 - B * X - 10^27 * B\n\nIt is not easy to see that the larger `X` is, the larger the range of allowed `B`. This is pretty important since `B` stands for the range of expiry prices where attack could work, so the larger it is, the less accurate our guess can be to profit.\n\nApart form range of `B`, value of `X` is the long strike price and upper bound of range `B`, so we would also care about it, a simple estimation shows that `X` must be above `10^13.5 (8 decimals)` for there to be a solution, which amounts to about `316228 BUSD <-> 1 WETH`. This is an extremely high price, but not high enough to be concluded as unreachable in the near future. So let's take a slightly generous number of `10^14 - 1` as X and calculate the revenue generated following this exploit path.\n\n    0 < (10^14 - 1)^2 - B * (10^14 - 1) - 10^27 * B\n    => (10^14 - 1)^2 / (10^14 - 1 + 10^27) > B\n    => B <= 9\n\nNow we've got the range of profitable expiry price. As we concluded earlier, the range is extremely small with a modest long strike price, but let's settle with this for now and see how much profit can be generated if we get lucky. To calculate profit, we take `_qTokenLongStrikePrice = 10^14 - 1 (8 decimals)`, `_qTokenShortStrikePrice = 1 (8 decimals)`, `_expiryPrice = 10^14 - 2 (8 decimals)` and `_amount = 10^28 (18 decimals)` and plug it back into the function.\n\n1.  in `callCreditSpreadCollateralRequirement`<br>\n    1-1. `X1 = _qTokenForCollateralStrikePrice * 10^19 = 1 * 10^19 = 10^19`<br>\n    1-2. `X2 = _qTokenToMintStrikePrice * 10^19 = (10^14 - 1) * 10^19 = 10^33 - 10^19`<br>\n    1-3. `X3 = _optionsAmount * 10^9 = 10^28 * 10^9 = 10^37`<br>\n    1-4. `Y1 = (X2 - X1) * 10^27 // X2 = (10^33 - 2 * 10^19) * 10^27 // (10^33 - 10^19) = 999999999999989999999999999`<br>\n    1-5. `Y2 = Y1 * X3 // 10^27 = 999999999999989999999999999 * 10^37 // 10^27 = 999999999999989999999999999 * 10^10`<br>\n2.  in `callCreditSpreadQTokenShortPayout`<br>\n    2-1. `X1 = _strikePrice * 10^19 = 1 * 10^19 = 10^19`<br>\n    2-2. `X2 = _expiryPrice * 10^19 = (10^14 - 2) * 10^19 = 10^33 - 2 * 10^19`<br>\n    2-3. `X3 = _amount * 10^9 = 10^28 * 10^9 = 10^37`<br>\n    2-4. `Y1 = (X2 - X1) * X3 // 10^27 = (10^33 - 3 * 10^19) * 10^37 // 10^27 = 99999999999997 * 10^29`<br>\n    2-5. \\`Y2 = Y1 \\* 10^27 / X2 = (99999999999997 \\* 10^28) \\* 10^27 / (10^33 - 2 \\* 10^19) = 9999999999999899999999999997999999999<br>\n3.  combine terms<br>\n    3-1. ` B1 = A1 + A2 - A3 = 0 + 9999999999999899999999999990000000000 - 9999999999999899999999999997999999999 = -2000000001<br>\n         3-2.  `Z = abs(B1) // 10^9 = 2000000000 // 10^9 = 2<br>\n\nAnd with this, we managed to squeeze 2 wei from a presumably worthless collateral.\n\nThis attack still suffers from several problems\n\n1.  cost of WETH in BUSD is way higher than current market\n2.  need to predict target price accurately to profit\n3.  requires large amount of WETH to profit\n\nWhile it is still pretty hard to pull off attack, the requirements seems pretty more likely to be achievable compared to the first version of exploit. Apart from this, there is also the nice property that this attack allows profit to scale with money invested.\n\nThis concludes our demonstration of two attacks against the potential flaws in number handling.\n\n### Tools Used\n\nvim, ganache-cli\n\n### Recommended Mitigation Steps\n\nFor `div` and `mul`, adding in a similar opt-out round up argument would work. This would require some refactoring of code, but is the only way to fundamentally solve the problem.\n\nFor `intToUint`, I still can't understand what the original motive is to design it as `abs` in disguise. Since nowhere in this project would we benefit from the current `abs` behaviour, in my opinion, it would be best to adopt a similar strategy to the `uintToInt` function. If the value goes out of directly convertable range ( < 0), revert and throw an error message.\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/31#issuecomment-1102147125):**\n > Resolved by adding explicit rounding on fixed-point multiplication and division operations: [RollaProject/quant-protocol#91](https://github.com/RollaProject/quant-protocol/pull/91).\n\n\n\n***\n\n## [[H-03]  Wrong implementation of `EIP712MetaTransaction`](https://github.com/code-423n4/2022-03-rolla-findings/issues/43)\n_Submitted by WatchPug_\n\n1.  `EIP712MetaTransaction` is a utils contract that intended to be inherited by concrete (actual) contracts, therefore. it's initializer function should not use the `initializer` modifier, instead, it should use `onlyInitializing` modifier. See the implementation of [openzeppelin `EIP712Upgradeable` initializer function](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/utils/cryptography/draft-EIP712Upgradeable.sol#L48-L57).\n\n[EIP712MetaTransaction.sol#L102-L114](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L102-L114)<br>\n\n```solidity\n    /// @notice initialize method for EIP712Upgradeable\n    /// @dev called once after initial deployment and every upgrade.\n    /// @param _name the user readable name of the signing domain for EIP712\n    /// @param _version the current major version of the signing domain for EIP712\n    function initializeEIP712(string memory _name, string memory _version)\n        public\n        initializer\n    {\n        name = _name;\n        version = _version;\n\n        __EIP712_init(_name, _version);\n    }\n```\n\nOtherwise, when the concrete contract's initializer function (with a `initializer` modifier) is calling EIP712MetaTransaction's initializer function, it will be mistok as reentered and so that it will be reverted (unless in the context of a constructor, e.g. Using @openzeppelin/hardhat-upgrades `deployProxy()` to initialize).\n\n<https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/proxy/utils/Initializable.sol#L50-L53>\n\n```solidity\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n```\n\nSee also: <https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/releases/tag/v4.4.1>\n\n2.  `initializer` can only be called once, it can not be \"called once after every upgrade\".\n\n[EIP712MetaTransaction.sol#L102-L114](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L102-L114)<br>\n\n```solidity\n    /// @notice initialize method for EIP712Upgradeable\n    /// @dev called once after initial deployment and every upgrade.\n    /// @param _name the user readable name of the signing domain for EIP712\n    /// @param _version the current major version of the signing domain for EIP712\n    function initializeEIP712(string memory _name, string memory _version)\n        public\n        initializer\n    {\n        name = _name;\n        version = _version;\n\n        __EIP712_init(_name, _version);\n    }\n```\n\n3.  A utils contract that is not expected to be deployed as a standalone contract should be declared as `abstract`. It's `initializer` function should be `internal`.\n\nSee the implementation of [openzeppelin `EIP712Upgradeable`](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/utils/cryptography/draft-EIP712Upgradeable.sol#L28).\n\n<https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/v4.5.1/contracts/utils/cryptography/draft-EIP712Upgradeable.sol#L28>\n\n```solidity\nabstract contract EIP712Upgradeable is Initializable {\n    // ...\n}\n```\n\n### Recommended Mitigation Steps\n\nChange to:\n\n```solidity\nabstract contract EIP712MetaTransaction is EIP712Upgradeable {\n    // ...\n}\n```\n\n```solidity\n    /// @notice initialize method for EIP712Upgradeable\n    /// @dev called once after initial deployment.\n    /// @param _name the user readable name of the signing domain for EIP712\n    /// @param _version the current major version of the signing domain for EIP712\n    function __EIP712MetaTransaction_init(string memory _name, string memory _version)\n        internal\n        onlyInitializing\n    {\n        name = _name;\n        version = _version;\n\n        __EIP712_init(_name, _version);\n    }\n```\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/43#issuecomment-1102143348):**\n > Resolved in [RollaProject/quant-protocol@25112fa](https://github.com/RollaProject/quant-protocol/commit/25112fa93a650f7b889e8472faf75dd5c471cdf2), but upgradeability was later removed as per [RollaProject/quant-protocol#90](https://github.com/RollaProject/quant-protocol/pull/90).\n\n\n\n***\n\n## [[H-04] `EIP712MetaTransaction.executeMetaTransaction()` failed txs are open to replay attacks](https://github.com/code-423n4/2022-03-rolla-findings/issues/45)\n_Submitted by WatchPug_\n\nAny transactions that fail based on some conditions that may change in the future are not safe to be executed again later (e.g. transactions that are based on others actions, or time-dependent etc).\n\nIn the current implementation, once the low-level call is failed, the whole tx will be reverted and so that `_nonces[metaAction.from]` will remain unchanged.\n\nAs a result, the same tx can be replayed by anyone, using the same signature.\n\n[EIP712MetaTransaction.sol#L86](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/utils/EIP712MetaTransaction.sol#L86)<br>\n\n```solidity\n    function executeMetaTransaction(\n        MetaAction memory metaAction,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) external payable returns (bytes memory) {\n        require(\n            _verify(metaAction.from, metaAction, r, s, v),\n            \"signer and signature don't match\"\n        );\n\n        uint256 currentNonce = _nonces[metaAction.from];\n\n        // intentionally allow this to overflow to save gas,\n        // and it's impossible for someone to do 2 ^ 256 - 1 meta txs\n        unchecked {\n            _nonces[metaAction.from] = currentNonce + 1;\n        }\n\n        // Append the metaAction.from at the end so that it can be extracted later\n        // from the calling context (see _msgSender() below)\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(\n                abi.encodeWithSelector(\n                    IController(address(this)).operate.selector,\n                    metaAction.actions\n                ),\n                metaAction.from\n            )\n        );\n\n        require(success, \"unsuccessful function call\");\n        emit MetaTransactionExecuted(\n            metaAction.from,\n            payable(msg.sender),\n            currentNonce\n        );\n        return returnData;\n    }\n```\n\nSee also the implementation of OpenZeppelin's `MinimalForwarder`:\n\n<https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/metatx/MinimalForwarder.sol#L42-L66>\n\n### Proof of Concept\n\nGiven:\n\n*   The collateral is USDC;\n*   Alice got `10,000 USDC` in the wallet.\n\n1.  Alice submitted a MetaTransaction to `operate()` and `_mintOptionsPosition()` with `10,000 USDC`;\n2.  Before the MetaTransaction get executed, Alice sent `1,000 USDC` to Bob;\n3.  The MetaTransaction submited by Alice in step 1 get executed but failed;\n4.  A few days later, Bob sent `1,000 USDC` to Alice;\n5.  The attacker can replay the MetaTransaction failed to execute at step 3 and succeed.\n\nAlice's `10,000 USDC` is now been spent unexpectedly against her will and can potentially cause fund loss depends on the market situation.\n\n### Recommended Mitigation Steps\n\nFailed txs should still increase the nonce.\n\nWhile implementating the change above, consider adding one more check to require sufficient gas to be paid, to prevent \"insufficient gas griefing attack\" as described in [this article](https://ipfs.io/ipfs/QmbbYTGTeot9ic4hVrsvnvVuHw4b5P7F5SeMSNX9TYPGjY/blog/ethereum-gas-dangers/).\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/45#issuecomment-1102144427):**\n > Meta transactions replay and insufficient gas griefing attacks are now prevented since [RollaProject/quant-protocol#80](https://github.com/RollaProject/quant-protocol/pull/80).\n\n\n\n***\n \n# Medium Risk Findings (10)\n## [[M-01] No use of upgradeable SafeERC20 contract in `Controller.sol`](https://github.com/code-423n4/2022-03-rolla-findings/issues/5)\n_Submitted by jayjonah8_\n\nController.sol makes use of Open Zeppelins `ReentrancyGuardUpgradeable.sol` in the file but does not use an upgradeable version of SafeERC20.sol\n\n### Proof of Concept\n\n[Controller.sol#L5](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/Controller.sol#L5)<br>\n\n### Recommended Mitigation Steps\n\nMake use of Open Zeppelins [upgradeable version of the SafeERC20.sol contract](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol).\n\n**[0xca11 (Rolla) resolved and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/5#issuecomment-1102153150):**\n > Resolved in [RollaProject/quant-protocol#76](https://github.com/RollaProject/quant-protocol/pull/76).\n\n\n***\n\n## [[M-02] `COLLATERAL_MINTER_ROLE` can be granted by the deployer of `QuantConfig` and mint arbitrary amount of tokens](https://github.com/code-423n4/2022-03-rolla-findings/issues/12)\n_Submitted by cccz, also found by danb, and WatchPug_\n\n        function mintCollateralToken(\n            address recipient,\n            uint256 collateralTokenId,\n            uint256 amount\n        ) external override {\n            require(\n                quantConfig.hasRole(\n                    quantConfig.quantRoles(\"COLLATERAL_MINTER_ROLE\"),\n                    msg.sender\n                ),\n                \"CollateralToken: Only a collateral minter can mint CollateralTokens\"\n            );\n\n            emit CollateralTokenMinted(recipient, collateralTokenId, amount);\n\n            _mint(recipient, collateralTokenId, amount, \"\");\n        }\n\nUsing the mintCollateralToken() function of CollateralToken, an address with COLLATERAL_MINTER_ROLE can mint an arbitrary amount of tokens.\n\nIf the private key of the deployer or an address with the COLLATERAL_MINTER_ROLE is compromised, the attacker will be able to mint an unlimited amount of collateral tokens.\n\nWe believe this is unnecessary and poses a serious centralization risk.\n\n### Proof of Concept\n\n[CollateralToken.sol#L101-L117](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/options/CollateralToken.sol#L101-L117)<br>\n[CollateralToken.sol#L138-L160](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/options/CollateralToken.sol#L138-L160)<br>\n\n### Recommended Mitigation Steps\n\nConsider removing the COLLATERAL_MINTER_ROLE, make the CollateralToken only mintable by the owner, and make the Controller contract to be the owner and therefore the only minter.\n\n**[0xca11 (Rolla) confirmed](https://github.com/code-423n4/2022-03-rolla-findings/issues/12#issuecomment-1102152105)**\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/12#issuecomment-1094436993):**\n > Per sponsor comment on [#47](https://github.com/code-423n4/2022-03-rolla-findings/issues/47#issuecomment-1079940591):\n> \n> \"The roles are renounced as per our deployment config covered in the docs. But this bug is still valid as the role OPTIONS_MINTER_ROLE can be reassigned\".\n> \n> Taking this one as main, with the vulnerability being that several of the MINTER and BURNER roles can be reassigned and have unnecessary powers that can be used to rug users.\n\n**[0xca11 (Rolla) resolved and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/12#issuecomment-1102152105):**\n > All roles were removed from the protocol, and now only the Controller contract can mint QTokens and CollateralTokens.\n > \n > [RollaProject/quant-protocol#90](https://github.com/RollaProject/quant-protocol/pull/90)\n\n\n\n***\n\n## [[M-03] Usage of deprecated Chainlink functions](https://github.com/code-423n4/2022-03-rolla-findings/issues/17)\n_Submitted by Ruhum, also found by 0x1f8b, cccz, and WatchPug_\n\nThe Chainlink functions `latestAnswer()` and `getAnswer()` are deprecated. Instead, use the [`latestRoundData()`](https://docs.chain.link/docs/price-feeds-api-reference/#latestrounddata) and [`getRoundData()`](https://docs.chain.link/docs/price-feeds-api-reference/#getrounddata) functions.\n\n### Proof of Concept\n\n[ChainlinkOracleManager.sol#L120](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkOracleManager.sol#L120)<br>\n\n[ChainlinkFixedTimeOracleManager.sol#L81](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkFixedTimeOracleManager.sol#L81)<br>\n\n[ChainlinkFixedTimeOracleManager.sol#L84](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/pricing/oracle/ChainlinkFixedTimeOracleManager.sol#L84)<br>\n\nGo to <https://etherscan.io/address/0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419#code> and search for `latestAnswer()` or `getAnswer()`. You'll find the deprecation notice.\n\n### Recommended Mitigation Steps\n\nSwitch to `latestRoundData()` as described [here](https://docs.chain.link/docs/price-feeds-api-reference/#latestrounddata).\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/17#issuecomment-1102151105):**\n > Fixed in [RollaProject/quant-protocol#89](https://github.com/RollaProject/quant-protocol/pull/89).\n\n\n***\n\n## [[M-04] `ConfigTimeLockController` will put `QuantConfig` in a stalemate (rendering it unusable) ](https://github.com/code-423n4/2022-03-rolla-findings/issues/27)\n_Submitted by 0xmint_\n\nThe QuantConfig contract has these important setters, setProtocolAddress(), setProtocolUint256, setProtocolBoolean() and setProtocolRole(). This contract is subjected to a timelock before all such processes above are executed. But, the issue arises in the fact that in configTimeLockController, the state variable minimum delay can be set to an arbitrary value, up to type(uint256).max(cannot assume what value will be set) and could potentially render the QuantConfig contract unusable . All the previous values and addresses would not be able to be changed because of a very high delay being set:\n\n[ConfigTimelockController.sol#L28](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/timelock/ConfigTimelockController.sol#L28)<br>\n\nI discussed with one of the devs about the use of this specific mapping :\n\n[QuantConfig.sol#L27](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/QuantConfig.sol#L27)<br>\n\nAfter discussions with one of the devs(#0xca11.eth) , it was understood  that these values are for the rollaOrderFee which is a part of their limit order protocol contract(outside of the scope of the contest) but given the argument above,  its configuration will be severely impacted (old percentage fees won't be able to be changed).Rolla limit order protocol depends on this configuration setting within QuantConfig.\n\n### Recommended Mitigation Steps\n\nIt is recommended that a constant be declared with a MAXIMUM_DELAY and whatever ‘minimum delay’ that is set thereafter should be below this value since there's another function setDelay () which can also be of high arbitrary value:\n\n`require(minimum delay ≤MAXIMUM_DELAY, “ too high”)`\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/27#issuecomment-1102150437):**\n > Both the ConfigTimeLockController and QuantConfig contracts were removed from the protocol.\n > \n > [RollaProject/quant-protocol#90](https://github.com/RollaProject/quant-protocol/pull/90)\n\n\n\n***\n\n## [[M-05] QTokens with the same symbol will lead to mistakes](https://github.com/code-423n4/2022-03-rolla-findings/issues/38)\n_Submitted by IllIllI_\n\nThe [`README.md`](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/README.md?plain=1#L70) states:\n\n> Bob can then trade the QToken with Alice for a premium. The method for doing that is beyond the scope of the protocol but can be done via any smart contract trading platform e.g. 0x.\n\nIt is therefore important that tokens be easily identifiable so that trading on DEXes is not error-prone.\n\n### Impact\n\nCurrently the `QToken` `name` includes the full year but the `QToken` symbol only contains the last two digits of the year, which can lead to mistakes. If someone mints a QToken with an expiry 100 years into the future, then the year will be truncated and appear as if the token expired this year. Normal centralized exchanges prevent this by listing options themselves and ensuring that there are never two options with the same identifier at the same time. The Rolla protocol does not have any such protections. Users must be told to not only check that the symbol name is what they expect, but to also separately check the token name or the specific expiry, or they might buy the wrong option on a DEX, or have fat-fingered during minting on a non-Rolla web interface. It's important to minimize the possibility of mistakes, and not including the full year in the symbol makes things error-prone, and will lead to other options providers winning out.\n\nThe 0x [REST interface](https://docs.0x.org/0x-api-swap/api-references/get-swap-v1-quote) for swaps has the ability to do a swap by token name rather than by token address. I was unable to figure out whether there was an allow-list of token names, or if it is easy to add a new token. If there is no, or an easily bypassed, access-control for adding new tokens, I would say this finding should be upgraded to high-severity, though I doubt this is the case.\n\n### Proof of Concept\n\n```solidity\n        /// concatenated symbol string\n        tokenSymbol = string(\n            abi.encodePacked(\n                \"ROLLA\",\n                \"-\",\n                underlying,\n                \"-\",\n                _uintToChars(day),\n                monthSymbol,\n                _uintToChars(year),\n                \"-\",\n                displayStrikePrice,\n                \"-\",\n                typeSymbol\n            )\n        );\n```\n\n[QTokenStringUtils.sol#L115-L130](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L115-L130)<br>\n\n```solidity\n    /// @return 2 characters that correspond to a number\n    function _uintToChars(uint256 _number)\n        internal\n        pure\n        virtual\n        returns (string memory)\n    {\n        if (_number > 99) {\n            _number %= 100;\n        }\n\n        string memory str = Strings.toString(_number);\n\n        if (_number < 10) {\n            return string(abi.encodePacked(\"0\", str));\n        }\n\n        return str;\n    }\n```\n\n[QTokenStringUtils.sol#L181-L199](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L181-L199)<br>\n\n### Recommended Mitigation Steps\n\nInclude the full year in the token's symbol.\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/38#issuecomment-1102149864):**\n > Resolved in [RollaProject/quant-protocol#86](https://github.com/RollaProject/quant-protocol/pull/86).\n\n\n\n***\n\n## [[M-06] `OperateProxy.callFunction()` should check if the `callee` is a contract](https://github.com/code-423n4/2022-03-rolla-findings/issues/46)\n_Submitted by WatchPug_\n\n[Controller.sol#L550-L558](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/Controller.sol#L550-L558)<br>\n\n```solidity\n    /// @notice Allows a sender/signer to make external calls to any other contract.\n    /// @dev A separate OperateProxy contract is used to make the external calls so\n    /// that the Controller, which holds funds and has special privileges in the Quant\n    /// Protocol, is never the `msg.sender` in any of those external calls.\n    /// @param _callee The address of the contract to be called.\n    /// @param _data The calldata to be sent to the contract.\n    function _call(address _callee, bytes memory _data) internal {\n        IOperateProxy(operateProxy).callFunction(_callee, _data);\n    }\n```\n\n[OperateProxy.sol#L10-L19](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/utils/OperateProxy.sol#L10-L19)<br>\n\n```solidity\n    function callFunction(address callee, bytes memory data) external override {\n        require(\n            callee != address(0),\n            \"OperateProxy: cannot make function calls to the zero address\"\n        );\n\n        (bool success, bytes memory returnData) = address(callee).call(data);\n        require(success, \"OperateProxy: low-level call failed\");\n        emit FunctionCallExecuted(tx.origin, returnData);\n    }\n```\n\nAs the `OperateProxy.sol#callFunction()` function not payable, we believe it's not the desired behavior to call a non-contract address and consider it a successful call.\n\nFor example, if a certain business logic requires a successful `token.transferFrom()` call to be made with the `OperateProxy`, if the `token` is not a existing contract, the call will return `success: true` instead of `success: false` and break the caller's assumption and potentially malfunction features or even cause fund loss to users.\n\nThe qBridge exploit (January 2022) was caused by a similar issue.\n\nAs a reference, OpenZeppelin's `Address.functionCall()` will check and `require(isContract(target), \"Address: call to non-contract\");`\n\n<https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/utils/Address.sol#L135>\n\n```solidity\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n```\n\n<https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/utils/Address.sol#L36-L42>\n\n```solidity\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n```\n\n### Recommended Mitigation Steps\n\nConsider adding a check and throw when the `callee` is not a contract.\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/46#issuecomment-1102149223):**\n > Resolved in [RollaProject/quant-protocol#85](https://github.com/RollaProject/quant-protocol/pull/85).\n\n\n***\n\n## [[M-07] Low-level transfer via `call()` can fail silently](https://github.com/code-423n4/2022-03-rolla-findings/issues/51)\n_Submitted by 0xDjango_\n\n[TimelockController.sol#L414-L415](https://github.com/code-423n4/2022-03-rolla/blob/a06418c9cc847395f3699bdf684a9ac066651ed7/quant-protocol/contracts/timelock/TimelockController.sol#L414-L415)<br>\n\nIn the `_call()` function in `TimelockController.sol`, a call is executed with the following code:\n\n    function _call(\n            bytes32 id,\n            uint256 index,\n            address target,\n            uint256 value,\n            bytes memory data\n        ) private {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, ) = target.call{value: value}(data);\n            require(success, \"TimelockController: underlying transaction reverted\");\n\n            emit CallExecuted(id, index, target, value, data);\n        }\n\nPer the Solidity docs:\n\n\"The low-level functions call, delegatecall and staticcall return true as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed.\"\n\nTherefore, transfers may fail silently.\n\n### Proof of Concept\n\nPlease find the documentation [here](https://docs.soliditylang.org/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions).\n\n### Recommended Mitigation Steps\n\nCheck for the account's existence prior to transferring.\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/51#issuecomment-1102148876):**\n > The TimelockController contract was removed from the protocol.\n > \n > [RollaProject/quant-protocol#90](https://github.com/RollaProject/quant-protocol/pull/90)\n\n\n\n***\n\n## [[M-08] Arbitrary code can be run with Controller as msg.sender](https://github.com/code-423n4/2022-03-rolla-findings/issues/65)\n_Submitted by hyh_\n\nA malicious user can call Controller's operate with ActionType.QTokenPermit, providing a precooked contract address as qToken, that will be called by Controller contract with IQToken(\\_qToken).permit(), which implementation can be arbitrary as long as IQToken interface and permit signature is implemented.\n\nThe Controller is asset bearing contract and it will be msg.sender in this arbitrary permit() function called, which is a setup that better be avoided.\n\n### Proof of Concept\n\nWhen the Controller's operate with a QTokenPermit action, it parses the arguments with Actions library and then calls internal \\_qTokenPermit:\n\n[Controller.sol#L91-L92](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/Controller.sol#L91-L92)<br>\n\n\\_qTokenPermit calls the IQToken(\\_qToken) address provided without performing any additional checks:\n\n[Controller.sol#L497-L516](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/Controller.sol#L497-L516)<br>\n\nThis way, contrary to the approach used in other actions, qToken isn't checked to be properly created address and is used right away, while the requirement that the address provided should implement IQToken interface and have permit function with a given signature can be easily met with a precooked contract.\n\n### Recommended Mitigation Steps\n\nGiven that QToken can be called directly please examine the need for QTokenPermit ActionType.\n\nIf current approach is based on UI convenience and better be kept, consider probing for IOptionsFactory(optionsFactory).isQToken(\\_qToken) before calling the address provided.\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/65#issuecomment-1102148357):**\n > Fixed in [RollaProject/quant-protocol#82](https://github.com/RollaProject/quant-protocol/pull/82).\n\n\n\n***\n\n## [[M-09] Spreads can be minted with a deactivated oracle](https://github.com/code-423n4/2022-03-rolla-findings/issues/66)\n_Submitted by hyh_\n\nWhen deactivateOracle() is called for an oracle in OracleRegistry it is still available for option spreads minting.\n\nThis way a user can continue to mint new options within spreads that rely on an oracle that was deactivated. As economic output of spreads is close to vanilla options, so all users who already posses an option linked to a deactivated oracle can surpass this deactivation, being able to mint new options linked to it as a part of option spreads.\n\n### Proof of Concept\n\nOracle active state is checked with isOracleActive() during option creation in validateOptionParameters() and during option minting in \\_mintOptionsPosition().\n\nIt isn't checked during spreads creation:\n\n[FundsCalculator.sol#L91-L117](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/libraries/FundsCalculator.sol#L91-L117)<br>\n\nIn other words besides vanilla option minting and creation all spectrum of operations is available for the deactivated oracle assets, including spreads minting, which economically is reasonably close to vanilla minting.\n\n### Recommended Mitigation Steps\n\nIf oracle deactivation is meant to transfer all related assets to the close only state then consider requiring oracle to be active on spreads minting as well in the same way it's done for vanilla option minting:\n\n[Controller.sol#L188-L197](https://github.com/code-423n4/2022-03-rolla/blob/main/quant-protocol/contracts/Controller.sol#L188-L197)<br>\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/66#issuecomment-1102147878):**\n > Resolved in [RollaProject/quant-protocol#81](https://github.com/RollaProject/quant-protocol/pull/81).\n\n\n***\n\n## [[M-10] Admin of the upgradeable proxy contract of `Controller.sol` can rug users](https://github.com/code-423n4/2022-03-rolla-findings/issues/48)\n_Submitted by WatchPug_\n\n[Controller.sol#L22-L34](https://github.com/code-423n4/2022-03-rolla/blob/a06418c9cc847395f3699bdf684a9ac066651ed7/quant-protocol/contracts/Controller.sol#L22-L34)<br>\n\nUse of Upgradeable Proxy Contract Structure allows the logic of the contract to be arbitrarily changed.\n\nThis allows the proxy admin to perform malicious actions e.g., taking funds from users' wallets up to the allowance limit.\n\nThis action can be performed by the malicious/compromised proxy admin without any restriction.\n\nConsidering that the purpose of this particular contract is for accounting of the Collateral and LongShortTokens, we believe the users' allowances should not be hold by this upgradeable contract.\n\n### Proof of Concept\n\nGiven:\n\n*   collateral: `USDC`\n\n#### Rug Users' Allowances\n\n1.  Alice `approve()` and `_mintOptionsPosition()` with `1e8 USDC`;\n2.  Bob  `approve()` and `_mintOptionsPosition()` with `5e8 USDC`;\n3.  A malicious/compromised proxy admin can call `upgradeToAndCall()` on the proxy contract and set a malicious contract as `newImplementation` and stolen all the USDC in Alice and Bob's wallets;\n\n#### Rug Contract's Holdings (funds that belong to users)\n\nA malicious/compromised proxy admin can just call `upgradeToAndCall()` on the proxy contract and send all the USDC held by the contract to an arbitrary address.\n\n### Severity\n\nA smart contract being structured as an upgradeable contract alone is not usually considered as a high severity risk. But given the severe impact (all the funds in the contract and funds in users' wallets can be stolen), we mark it as a `High` severity issue.\n\n### Recommended Mitigation Steps\n\nConsider using the non-upgradeable `CollateralToken` contract to hold user's allowances instead.\n\nSee also our Recommendation in \\[issue #49](https://github.com/code-423n4/2022-03-rolla-findings/issues/49).\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/48#issuecomment-1102146181):**\n > Resolved with the removal of the previous access control role-based system: [RollaProject/quant-protocol#90](https://github.com/RollaProject/quant-protocol/pull/90).\n\n**[alcueca (judge) decreased severity to Medium and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/48#issuecomment-1106040260):**\n > Assets are not directly at risk, as a governance attack must happen first. Downgraded to medium.\n\n\n\n***\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 20 reports were submitted by wardens detailing low risk and non-critical issues. The [report highlighted below](https://github.com/code-423n4/2022-03-rolla-findings/issues/8) by **0x1f8b** received the top score from the judge.\n\n*The following wardens also submitted reports: [berndartmueller](https://github.com/code-423n4/2022-03-rolla-findings/issues/61), [IllIllI](https://github.com/code-423n4/2022-03-rolla-findings/issues/37), [0xkatana](https://github.com/code-423n4/2022-03-rolla-findings/issues/58), [gzeon](https://github.com/code-423n4/2022-03-rolla-findings/issues/22), [0xDjango](https://github.com/code-423n4/2022-03-rolla-findings/issues/62), [defsec](https://github.com/code-423n4/2022-03-rolla-findings/issues/54), [danb](https://github.com/code-423n4/2022-03-rolla-findings/issues/36), [badbird](https://github.com/code-423n4/2022-03-rolla-findings/issues/25), [rayn](https://github.com/code-423n4/2022-03-rolla-findings/issues/30), [cryptphi](https://github.com/code-423n4/2022-03-rolla-findings/issues/63), [Ruhum](https://github.com/code-423n4/2022-03-rolla-findings/issues/18), [robee](https://github.com/code-423n4/2022-03-rolla-findings/issues/1), [TerrierLover](https://github.com/code-423n4/2022-03-rolla-findings/issues/20), [WatchPug](https://github.com/code-423n4/2022-03-rolla-findings/issues/42), [0v3rf10w](https://github.com/code-423n4/2022-03-rolla-findings/issues/56), [hyh](https://github.com/code-423n4/2022-03-rolla-findings/issues/41), [jayjonah8](https://github.com/code-423n4/2022-03-rolla-findings/issues/6), [remora](https://github.com/code-423n4/2022-03-rolla-findings/issues/23), and [0xmint](https://github.com/code-423n4/2022-03-rolla-findings/issues/26).*\n\n## [L-01]\n\nIt's possible to call the method [addAsset](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/AssetsRegistry.sol#L60) multiple times with the same `_underlying`, if you call `addAsset` with empty `symbol` it will bypass the [validAsset](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/AssetsRegistry.sol#L37) modifier, and it will be possible to call again the `addAsset` with different values. It will produce a mismatch with the reality and `getAssetsLength`.\n\nThis could cause a loss of funds if it is not verified before that this `symbol` is other than empty. It is mandatory to add a require to verify that the `symbol` is not empty. It's also recommended to add a require in [\\_assetSymbol](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L24) to ensure non-existence tokens are returned.\n\n## [L-02]\n\nIt's possible to call the method [createCollateralToken](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/CollateralToken.sol#L61) multiple times with the same `_qTokenAddress`, if you call `createCollateralToken` with empty `_qTokenAddress` it will bypass the [require(idToInfo\\[id\\].qTokenAddress == address(0))](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/CollateralToken.sol#L81), and it will be possible to call again the `createCollateralToken` with different values. It will produce a mismatch with the reality and `collateralTokenIds`.\n\nIt is mandatory to add a require to verify that the `_qTokenAddress` is not empty.\n\n## [L-03]\n\nIt's possible to approve with [metaSetApprovalForAll](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/CollateralToken.sol#L218-L219) an empty address for any operator, `ecrecover` is not checked to return `address(0)`, so using `owner=address(0)` it is possible to approve or reject empty owners for any operator. It's recommended to use ECDSA from open-zeppelin.\n\n## [L-04]\n\nWhen calling [\\_getMonth](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L255) with a value greater than 12 \"December\" is returned, it's best to make sure the value is as expected.\n\n## [L-05]\n\nUse a buggy solidity version with immutables.\n\nThe contract uses immutable, and this solidity version defined in the pragma has some issues with them, as you can see [here](https://github.com/ethereum/solidity/blob/develop/Changelog.md#089-2021-09-29).\n\n## [L-06]\n\nIt's possible to call the method [addAssetOracle](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/pricing/oracle/ProviderOracleManager.sol#L25) multiple times with the same `_asset`, if you call `addAssetOracle` with empty `_oracle` it will bypass the [assetOracles\\[\\_asset\\] == address(0)](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/pricing/oracle/ProviderOracleManager.sol#L34), and it will be possible to call again the `addAssetOracle` with different values. It will produce a mismatch with the reality and `assets`\n\nIt is mandatory to add a require to verify that the `_oracle` is not empty.\n\n## [N-01]\n\n`collateralTokenId` is used as `deadline` and it could be confused, it's better to rename it or add a specific comment about that.\n\n*   [Actions.sol#L110](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/libraries/Actions.sol#L110)\n*   [Actions.sol#L135](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/libraries/Actions.sol#L135)\n\n## [N-02]\n\nUse `uint8` for `decimals` in [QTokenStringUtils.sol#L142](https://github.com/code-423n4/2022-03-rolla/blob/efe4a3c1af8d77c5dfb5ba110c3507e67a061bdd/quant-protocol/contracts/options/QTokenStringUtils.sol#L142)\n\n**[0xca11 (Rolla) confirmed, resolved, and commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/8#issuecomment-1102154756):**\n > Resolved in [RollaProject/quant-protocol@ebe5f2b](https://github.com/RollaProject/quant-protocol/commit/ebe5f2b83a4b8e2431e125e1d803963f7f0be03d).\n\n**[alcueca (judge) commented](https://github.com/code-423n4/2022-03-rolla-findings/issues/8#issuecomment-1096516916):**\n > Score: 100\n\n\n\n***\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}