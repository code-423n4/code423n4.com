{
  "circa": {
    "title": "Covalent contest",
    "sponsor": "Covalent",
    "slug": "2021-10-covalent",
    "date": "2021-11-19",
    "findings": "https://github.com/code-423n4/2021-10-covalent-findings/issues",
    "contest": 43
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Covalent smart contract system written in Solidity. The code contest took place between October 19—October 21 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>14 Wardens contributed reports to the Covalent code contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/jonah1005w\">jonah1005</a></li>\n<li><a href=\"https://twitter.com/xYrYuYx\">xYrYuYx</a></li>\n<li>pants</li>\n<li><a href=\"https://twitter.com/HickupH\">hickuphh3</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li>harleythedog</li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/GalloDaSballo\">Alex the Entreprenerd</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a> and <a href=\"https://twitter.com/money_lego\">moneylegobatman</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 9 unique vulnerabilities and 38 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 2 received a risk rating in the category of HIGH severity, 3 received a risk rating in the category of MEDIUM severity, and 4 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 11 non-critical recommendations and 18 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-10-covalent\">C4 Covalent contest repository</a>, and is composed of 17 smart contracts written in the Solidity programming language and includes 442 lines of Solidity code..</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-2\" style=\"position:relative;\"><a href=\"#high-risk-findings-2\" aria-label=\"high risk findings 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (2)</h1>\n<h2 id=\"h-01-usage-of-an-incorrect-version-of-ownbale-library-can-potentially-malfunction-all-onlyowner-functions\" style=\"position:relative;\"><a href=\"#h-01-usage-of-an-incorrect-version-of-ownbale-library-can-potentially-malfunction-all-onlyowner-functions\" aria-label=\"h 01 usage of an incorrect version of ownbale library can potentially malfunction all onlyowner functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/45\">[H-01] Usage of an incorrect version of <code>Ownbale</code> library can potentially malfunction all <code>onlyOwner</code> functions</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2021-10-covalent/blob/ded3aeb2476da553e8bb1fe43358b73334434737/contracts/DelegatedStaking.sol#L62-L63\"><code>DelegatedStaking.sol</code> L62-L63</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// this is used to have the contract upgradeable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initialize</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint128</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minStakedRequired</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initializer</span><span class=\"mtk1\"> {</span></span></span></code></pre>\n<p>Based on the context and comments in the code, the <code>DelegatedStaking.sol</code> contract is designed to be deployed as an upgradeable proxy contract.</p>\n<p>However, the current implementation is using an non-upgradeable version of the <code>Ownbale</code> library: <code>@openzeppelin/contracts/access/Ownable.sol</code> instead of the upgradeable version: <code>@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol</code>.</p>\n<p>A regular, non-upgradeable <code>Ownbale</code> library will make the deployer the default owner in the constructor. Due to a requirement of the proxy-based upgradeability system, no constructors can be used in upgradeable contracts. Therefore, there will be no owner when the contract is deployed as a proxy contract.</p>\n<p>As a result, all the <code>onlyOwner</code> functions will be inaccessible.</p>\n<h5 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Use <code>@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol</code> and <code>@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol</code> instead.</p>\n<p>And change the <code>initialize()</code> function to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initialize</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint128</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minStakedRequired</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initializer</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">__Ownable_init</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/45\">kitti-katy (Covalent) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/45#issuecomment-955111019\">GalloDaSballo (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with the finding, when using Upgradeable Proxies it’s important to use the adequate libraries that will be compatible with initializable contracts</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/45#issuecomment-955111738\">GalloDaSballo (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The sponsor has mitigated the issue</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent/pull/23\">kitti-katy (Covalent) patched</a></strong></p>\n<h2 id=\"h-02-unstake-should-update-exchange-rates-first\" style=\"position:relative;\"><a href=\"#h-02-unstake-should-update-exchange-rates-first\" aria-label=\"h 02 unstake should update exchange rates first permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/57\">[H-02] <code>unstake</code> should update exchange rates first</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>unstake</code> function does not immediately update the exchange rates. It first computes the <code>validatorSharesRemove = tokensToShares(amount, v.exchangeRate)</code> <strong>with the old exchange rate</strong>.</p>\n<p>Only afterwards, it updates the exchange rates (if the validator is not disabled):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// @audit shares are computed here with old rate</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint128</span><span class=\"mtk1\"> </span><span class=\"mtk12\">validatorSharesRemove</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">tokensToShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk12\">exchangeRate</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">validatorSharesRemove</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Unstake amount is too small&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk12\">disabledEpoch</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// @audit rates are updated here</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">updateGlobalExchangeRate</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">updateValidator</span><span class=\"mtk1\">(</span><span class=\"mtk12\">v</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>More shares for the amount are burned than required and users will lose rewards in the end.</p>\n<h4 id=\"poc\" style=\"position:relative;\"><a href=\"#poc\" aria-label=\"poc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>POC</h4>\n<p>Demonstrating that users will lose rewards:</p>\n<ol>\n<li>Assume someone staked <code>1000 amount</code> and received <code>1000 shares</code>, and <code>v.exchangeRate = 1.0</code>. (This user is the single staker)</li>\n<li>Several epochs pass, interest accrues, and <code>1000 tokens</code> accrue for the validator, <code>tokensGivenToValidator = 1000</code>. User should be entitled to 1000 in principal + 1000 in rewards = 2000 tokens.</li>\n<li>But user calls <code>unstake(1000)</code>, which sets <code>validatorSharesRemove = tokensToShares(amount, v.exchangeRate) = 1000 / 1.0 = 1000</code>. <strong>Afterwards</strong>, the exchange rate is updated: <code>v.exchangeRate += tokensGivenToValidator / totalShares = 1.0 + 1.0 = 2.0</code>. The staker is updated with <code>s.shares -= validatorSharesRemove = 0</code> and <code>s.staked -= amount = 0</code>. And the user receives their 1000 tokens but notice how the user’s shares are now at zero as well.</li>\n<li>User tries to claim rewards calling <code>redeemAllRewards</code> which fails as the <code>rewards</code> are 0.</li>\n</ol>\n<p>If the user had first called <code>redeemAllRewards</code> and <code>unstake</code> afterwards they’d have received their 2000 tokens.</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The exchange rates always need to be updated first before doing anything.\nMove the <code>updateGlobalExchangeRate()</code> and <code>updateValidator(v)</code> calls to the beginning of the function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/57\">kitti-katy (Covalent) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/57#issuecomment-955111691\">GalloDaSballo (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with the finding, using the old exchange rate ends up burning more shares than what would be correct\nThe sponsor has mitigated the issue</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-3\" style=\"position:relative;\"><a href=\"#medium-risk-findings-3\" aria-label=\"medium risk findings 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (3)</h1>\n<h2 id=\"m-01-reward-tokens-could-get-lost-due-to-rounding-down\" style=\"position:relative;\"><a href=\"#m-01-reward-tokens-could-get-lost-due-to-rounding-down\" aria-label=\"m 01 reward tokens could get lost due to rounding down permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/10\">[M-01] reward tokens could get lost due to rounding down</a></h2>\n<p><em>Submitted by gpersoon, also found by hickuphh3, xYrYuYx, and jonah1005</em></p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The function <code>depositRewardTokens</code> divides the “amount” of tokens by <code>allocatedTokensPerEpoch</code> to calculate the <code>endEpoch</code>.\nWhen “amount” isn’t a multiple of <code>allocatedTokensPerEpoch</code> the result of the division will be rounded down,\neffectively losing a number of tokens for the rewards.</p>\n<p>For example if <code>allocatedTokensPerEpoch</code> is set to 3e18 and “amount” is 100e18 then <code>endEpoch</code> will be increased with 33e18 and the last 1e18 tokens are lost.</p>\n<p>A similar problem occurs here:</p>\n<ul>\n<li>in <code>setAllocatedTokensPerEpoch()</code>, with the recalculation of <code>endEpoch</code></li>\n<li>in <code>takeOutRewardTokens()</code>, with the retrieval of tokens</li>\n<li>in _stake(), when initializing <code>endEpoch</code> (e.g. when <code>endEpoch</code>==0)</li>\n</ul>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent/blob/ded3aeb2476da553e8bb1fe43358b73334434737/contracts/DelegatedStaking.sol#L90-L98\"><code>DelegatedStaking.sol</code> L90-L98</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent/blob/ded3aeb2476da553e8bb1fe43358b73334434737/contracts/DelegatedStaking.sol#L368-L383\"><code>DelegatedStaking.sol</code> L368-L383</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>In <code>depositRewardTokens()</code> add, in the beginning of function, before the if statement:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> % </span><span class=\"mtk12\">allocatedTokensPerEpoch</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;Not multiple&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>In <code>takeOutRewardTokens()</code> add:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> % </span><span class=\"mtk12\">allocatedTokensPerEpoch</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;Not multiple&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Update <code>setAllocatedTokensPerEpoch()</code> to something like:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk8\">`endEpoch`</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint128</span><span class=\"mtk1\"> </span><span class=\"mtk12\">futureRewards</span><span class=\"mtk1\"> = ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">futureRewards</span><span class=\"mtk1\"> % </span><span class=\"mtk12\">amount</span><span class=\"mtk1\"> ==</span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;Not multiple&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...\\</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">} </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> { </span><span class=\"mtk3\">// to prevent issues with \\_stake()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewardsLocked</span><span class=\"mtk1\"> % </span><span class=\"mtk12\">allocatedTokensPerEpoch</span><span class=\"mtk1\">==</span><span class=\"mtk7\">0</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;Not multiple&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/10#issuecomment-948903386\">kitti-katy (Covalent) confirmed</a>:</strong></p>\n<blockquote>\n<p>Agreed, the original assumption was that the owner would always make sure the take out and deposit amount is multiple of emission rate. But yes, this is good to add the check. Also it is not that risky since the emission rate wouldn’t be that high per epoch and the loss will always be less than the emission rate.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/10#issuecomment-957018348\">GalloDaSballo (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with the finding, since it’s a rounding error the max loss in rewards can at most be 1 less than the denominator</p>\n<p>That said, this is a Medium Severity Finding as per the doc:\n<code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n<p>Where in this case the rounding is a way to leak value (loss of yield)</p>\n</blockquote>\n<h2 id=\"m-02-incorrect-updateglobalexchangerate-implementation\" style=\"position:relative;\"><a href=\"#m-02-incorrect-updateglobalexchangerate-implementation\" aria-label=\"m 02 incorrect updateglobalexchangerate implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/17\">[M-02] Incorrect <code>updateGlobalExchangeRate</code> implementation</a></h2>\n<p><em>Submitted by xYrYuYx</em></p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p><code>UpdateGlobalExchangeRate</code> has incorrect implementation when <code>totalGlobalShares</code> is zero.</p>\n<p>If any user didn’t start stake, <code>totalGlobalShares</code> is 0, and every stake it will increase.\nbut there is possibility that <code>totalGlobalShares</code> can be 0 amount later by unstake or disable validator.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>This is my test case to proof this issue: <a href=\"https://github.com/xYrYuYx/C4-2021-10-covalent/blob/main/test/c4-tests/C4_issues.js#L76\">C4_issues.js L76</a></p>\n<p>In my test case, I disabled validator to make <code>totalGlobalShares</code> to zero.\nAnd in this case, some reward amount will be forever locked in the contract.\nAfter disable validator, I mined 10 blocks, and 4 more blocks mined due to other function calls,\nSo total 14 CQT is forever locked in the contract.</p>\n<h4 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h4>\n<p>Hardhat test</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Please think again when <code>totalGlobalShares</code> is zero.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/17#issuecomment-948913401\">kitti-katy (Covalent) acknowledged</a>:</strong></p>\n<blockquote>\n<p>That is right, and I think the best solution would be to add a validator instance who is the owner and stake some low amount of tokens in it. This way we can make sure there is no such situation when <code>totalGlobalShares</code> becomes <code>0</code> and if everyone unstaked, the owner could take out reward tokens and then unstake / redeem rewards.</p>\n<p>Not sure. That could even be marked as “high risk”. if the situation happens and not handled right away (taking out reward tokens), then there could be more significant financial loss.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/17#issuecomment-950028436\">kitti-katy (Covalent) commented</a>:</strong></p>\n<blockquote>\n<p>marked resolved as it will be manually handled</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/17#issuecomment-962730124\">GalloDaSballo (judge) commented</a>:</strong></p>\n<blockquote>\n<p>The issue found by the warden is straightforward:\nThrough mix of unstaking and the use of <code>disableValidator</code> the warden was able to lock funds, making them irredemeable</p>\n<p>It seems to me that this is caused by the fact that <code>unstake</code> as well as <code>disableValidator</code> will reduce the shares: <a href=\"https://github.com/code-423n4/2021-10-covalent/blob/a8368e7982d336a4b464a53cfe221b2395da801f/contracts/DelegatedStaking.sol#L348%60\">https://github.com/code-423n4/2021-10-covalent/blob/a8368e7982d336a4b464a53cfe221b2395da801f/contracts/DelegatedStaking.sol#L348`</a></p>\n<p>I would recommend separating the shares accounting from the activation of validator, simply removing the subtraction  of global shares in <code>disableValidator</code> would allow them to claim those shares.</p>\n<p>The function <code>disableValidator</code> can be called by either the validator or the owner, while onlyOwner can add a new validator</p>\n<p>The owner has the ability to perform this type of griefing, as well as a group of validators if they so chose</p>\n<p>Due to the specifics of the grief I will rate it of Medium Severity, as per the docs:\n<code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n<p>In this case we have a way to leak value (lock funds) with specific condition (malicious owner or multiple griefing validators)</p>\n</blockquote>\n<h2 id=\"m-03-validator-can-fail-to-receive-commission-reward-in-redeemallrewards\" style=\"position:relative;\"><a href=\"#m-03-validator-can-fail-to-receive-commission-reward-in-redeemallrewards\" aria-label=\"m 03 validator can fail to receive commission reward in redeemallrewards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/65\">[M-03] Validator can fail to receive commission reward in <code>redeemAllRewards</code></a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<h4 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Validator can fail to receive commission reward by calling <code>redeemAllRewards</code>.\nThere’s a check in <code>redeemAllRewards</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint128</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewards</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">sharesToTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">s</span><span class=\"mtk1\">.</span><span class=\"mtk12\">shares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk12\">exchangeRate</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">s</span><span class=\"mtk1\">.</span><span class=\"mtk12\">staked</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">rewards</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Nothing to redeem&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The validator’s tx might be reverted here even if he got some commission reward to receive.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>We can trigger the bug by setting <code>commisionRate</code> to <code>1e18 - 1</code> (<a href=\"https://github.com/code-423n4/2021-10-covalent/blob/main/contracts/DelegatedStaking.sol#L275-L276\">DelegatedStaking.sol L275-L276</a>)</p>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Though this may rarely happen and the validator can redeem the reward through <code>redeemRewards</code>, this may cause some issues when the validator is handled by a contract.</p>\n<p>I consider calling <code>redeemRewards</code> in <code>redeemAllReawards</code> as a more succinct way to do this.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/65#issuecomment-948954017\">kitti-katy (Covalent) acknowledged</a>:</strong></p>\n<blockquote>\n<p>I don’t think there will ever be a commission rate set to almost 100%. Since it is changed by the owner we will make sure the input is correct.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/65#issuecomment-957813671\">GalloDaSballo (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with the finding and understand the sponsors take.</p>\n<p>As per the docs for contests:\n<code>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n<p>This fall as a medium severity</p>\n<p>A simple mitigation would be to limit the <code>commisionRate</code> to less than the value that causes issues</p>\n</blockquote>\n<h1 id=\"low-risk-findings-4\" style=\"position:relative;\"><a href=\"#low-risk-findings-4\" aria-label=\"low risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (4)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/20\">[L-01] <code>addValidator()</code>: Validator’s commission rate should be checked to not exceed divider</a> <em>Submitted by hickuphh3, also found by cmichel, jonah1005, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/36\">[L-02] Line 127 lack of precision</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/35\">[L-03] addValidatior doesn’t check new validator address != 0</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/59\">[L-04] Unbounded iteration over validators array</a> <em>Submitted by cmichel</em></li>\n</ul>\n<h1 id=\"non-critical-findings-11\" style=\"position:relative;\"><a href=\"#non-critical-findings-11\" aria-label=\"non critical findings 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (11)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/42\">[N-01] Typos</a> <em>Submitted by WatchPug, also found by hickuphh3 and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/3\">[N-02] Unnecessary require checker</a> <em>Submitted by xYrYuYx</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/70\">[N-03] Inconsistent definition of integer sizes in function <code>getDelegatorDetails()</code></a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/68\">[N-04] Unclear definition of <code>validatorId</code>’s integer size</a> <em>Submitted by pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/60\">[N-05] Misleading parameter name</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/55\">[N-06] Code Style: private/internal function names should be prefixed with <code>_</code></a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/46\">[N-07] Code duplication</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/22\">[N-08] Make more data accessible</a> <em>Submitted by hickuphh3</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/9\">[N-09] <code>getValidatorsDetails</code> is getting disabled validators as well</a> <em>Submitted by csanuragjain</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/34\">[N-10] emit staked should be at stake function and not _stake.</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/33\">[N-11] emit initialize</a> <em>Submitted by pants</em></li>\n</ul>\n<h1 id=\"gas-optimizations-18\" style=\"position:relative;\"><a href=\"#gas-optimizations-18\" aria-label=\"gas optimizations 18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (18)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/89\">[G-01] Move Function <code>_stake</code> Validator Declaration</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/52\">[G-02] Adding unchecked directive can save gas</a> <em>Submitted by WatchPug, also found by pauliax and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/19\">[G-03] Long Revert Strings</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/2\">[G-04] Update function access</a> <em>Submitted by xYrYuYx, also found by WatchPug, defsec, harleythedog, pants, and pauliax</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/1\">[G-05] Recommend to use OZ SafeERC20 library</a> <em>Submitted by xYrYuYx, also found by cmichel, defsec, and pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/67\">[G-06] Declare variable <code>CQT</code> as constant</a> <em>Submitted by pmerkleplant, also found by harleythedog</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/75\">[G-07] Change lines to save gas</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/73\">[G-08] Change order of lines to save gas in <code>setAllocatedTokensPerEpoch</code></a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/39\">[G-09] <code>getDelegatorDetails</code> declaration inside a loop</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/53\">[G-10] Cache storage variables in the stack can save gas</a> <em>Submitted by WatchPug, also found by harleythedog and pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/37\">[G-11] ++i is more gas efficient than i++ in loops forwarding</a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/29\">[G-12] <code>delegatorCoolDown</code> </a> <em>Submitted by pants</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/27\">[G-13] state variable divider could be set immutable.</a> <em>Submitted by pants, also found by WatchPug and jonah1005</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/26\">[G-14] <code>takeOutRewardTokens()</code>: Optimise epochs calculation and comparison </a> <em>Submitted by hickuphh3, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/13\">[G-15] reset <code>rewardsLocked</code> to 0 when no longer used</a> <em>Submitted by gpersoon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/51\">[G-16] Check <code>validatorId &#x3C; validatorsN</code> can be done earlier</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/49\">[G-17] Avoid unnecessary storage read can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-10-covalent-findings/issues/63\">[G-18] unnecessary assert when dealing with CQT</a> <em>Submitted by jonah1005</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-2\">High Risk Findings (2)</a></p>\n<ul>\n<li><a href=\"#h-01-usage-of-an-incorrect-version-of-ownbale-library-can-potentially-malfunction-all-onlyowner-functions\">[H-01] Usage of an incorrect version of <code>Ownbale</code> library can potentially malfunction all <code>onlyOwner</code> functions</a></li>\n<li><a href=\"#h-02-unstake-should-update-exchange-rates-first\">[H-02] <code>unstake</code> should update exchange rates first</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-3\">Medium Risk Findings (3)</a></p>\n<ul>\n<li><a href=\"#m-01-reward-tokens-could-get-lost-due-to-rounding-down\">[M-01] reward tokens could get lost due to rounding down</a></li>\n<li><a href=\"#m-02-incorrect-updateglobalexchangerate-implementation\">[M-02] Incorrect <code>updateGlobalExchangeRate</code> implementation</a></li>\n<li><a href=\"#m-03-validator-can-fail-to-receive-commission-reward-in-redeemallrewards\">[M-03] Validator can fail to receive commission reward in <code>redeemAllRewards</code></a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-4\">Low Risk Findings (4)</a></li>\n<li><a href=\"#non-critical-findings-11\">Non-Critical Findings (11)</a></li>\n<li><a href=\"#gas-optimizations-18\">Gas Optimizations (18)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Covalent smart contract system written in Solidity. The code contest took place between October 19—October 21 2021.\n\n## Wardens\n\n14 Wardens contributed reports to the Covalent code contest:\n\n1. [cmichel](https://twitter.com/cmichelio)\n2. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n3. [jonah1005](https://twitter.com/jonah1005w)\n4. [xYrYuYx](https://twitter.com/xYrYuYx)\n5. pants\n6. [hickuphh3](https://twitter.com/HickupH)\n7. [gpersoon](https://twitter.com/gpersoon)\n8. [ye0lde](https://twitter.com/_ye0lde)\n9. [pauliax](https://twitter.com/SolidityDev)\n10. harleythedog\n11. [pmerkleplant](https://twitter.com/merkleplant_eth)\n12. [defsec](https://twitter.com/defsec_)\n13. [csanuragjain](https://twitter.com/csanuragjain)\n\nThis contest was judged by [Alex the Entreprenerd](https://twitter.com/GalloDaSballo).\n\nFinal report assembled by [CloudEllie](https://twitter.com/CloudEllie1) and [moneylegobatman](https://twitter.com/money_lego).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 9 unique vulnerabilities and 38 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 2 received a risk rating in the category of HIGH severity, 3 received a risk rating in the category of MEDIUM severity, and 4 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 11 non-critical recommendations and 18 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Covalent contest repository](https://github.com/code-423n4/2021-10-covalent), and is composed of 17 smart contracts written in the Solidity programming language and includes 442 lines of Solidity code..\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (2)\n\n## [[H-01] Usage of an incorrect version of `Ownbale` library can potentially malfunction all `onlyOwner` functions](https://github.com/code-423n4/2021-10-covalent-findings/issues/45)\n_Submitted by WatchPug_\n\n[`DelegatedStaking.sol` L62-L63](https://github.com/code-423n4/2021-10-covalent/blob/ded3aeb2476da553e8bb1fe43358b73334434737/contracts/DelegatedStaking.sol#L62-L63)\n\n```solidity\n// this is used to have the contract upgradeable\nfunction initialize(uint128 minStakedRequired) public initializer {\n```\n\nBased on the context and comments in the code, the `DelegatedStaking.sol` contract is designed to be deployed as an upgradeable proxy contract.\n\nHowever, the current implementation is using an non-upgradeable version of the `Ownbale` library: `@openzeppelin/contracts/access/Ownable.sol` instead of the upgradeable version: `@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol`.\n\nA regular, non-upgradeable `Ownbale` library will make the deployer the default owner in the constructor. Due to a requirement of the proxy-based upgradeability system, no constructors can be used in upgradeable contracts. Therefore, there will be no owner when the contract is deployed as a proxy contract.\n\nAs a result, all the `onlyOwner` functions will be inaccessible.\n\n##### Recommendation\nUse `@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol` and `@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol` instead.\n\nAnd change the `initialize()` function to:\n\n```solidity\nfunction initialize(uint128 minStakedRequired) public initializer {\n    __Ownable_init();\n    ...\n}\n```\n\n**[kitti-katy (Covalent) confirmed](https://github.com/code-423n4/2021-10-covalent-findings/issues/45)**\n\n**[GalloDaSballo (judge) commented](https://github.com/code-423n4/2021-10-covalent-findings/issues/45#issuecomment-955111019):**\n > Agree with the finding, when using Upgradeable Proxies it's important to use the adequate libraries that will be compatible with initializable contracts\n\n**[GalloDaSballo (judge) commented](https://github.com/code-423n4/2021-10-covalent-findings/issues/45#issuecomment-955111738):**\n > The sponsor has mitigated the issue\n\n**[kitti-katy (Covalent) patched](https://github.com/code-423n4/2021-10-covalent/pull/23)**\n\n## [[H-02] `unstake` should update exchange rates first](https://github.com/code-423n4/2021-10-covalent-findings/issues/57)\n_Submitted by cmichel_\n\nThe `unstake` function does not immediately update the exchange rates. It first computes the `validatorSharesRemove = tokensToShares(amount, v.exchangeRate)` **with the old exchange rate**.\n\nOnly afterwards, it updates the exchange rates (if the validator is not disabled):\n\n```solidity\n// @audit shares are computed here with old rate\nuint128 validatorSharesRemove = tokensToShares(amount, v.exchangeRate);\nrequire(validatorSharesRemove > 0, \"Unstake amount is too small\");\n\nif (v.disabledEpoch == 0) {\n    // @audit rates are updated here\n    updateGlobalExchangeRate();\n    updateValidator(v);\n    // ...\n}\n```\n\n#### Impact\nMore shares for the amount are burned than required and users will lose rewards in the end.\n\n#### POC\nDemonstrating that users will lose rewards:\n\n1.  Assume someone staked `1000 amount` and received `1000 shares`, and `v.exchangeRate = 1.0`. (This user is the single staker)\n2.  Several epochs pass, interest accrues, and `1000 tokens` accrue for the validator, `tokensGivenToValidator = 1000`. User should be entitled to 1000 in principal + 1000 in rewards = 2000 tokens.\n3.  But user calls `unstake(1000)`, which sets `validatorSharesRemove = tokensToShares(amount, v.exchangeRate) = 1000 / 1.0 = 1000`. **Afterwards**, the exchange rate is updated: `v.exchangeRate += tokensGivenToValidator / totalShares = 1.0 + 1.0 = 2.0`. The staker is updated with `s.shares -= validatorSharesRemove = 0` and `s.staked -= amount = 0`. And the user receives their 1000 tokens but notice how the user's shares are now at zero as well.\n4.  User tries to claim rewards calling `redeemAllRewards` which fails as the `rewards` are 0.\n\nIf the user had first called `redeemAllRewards` and `unstake` afterwards they'd have received their 2000 tokens.\n\n#### Recommended Mitigation Steps\nThe exchange rates always need to be updated first before doing anything.\nMove the `updateGlobalExchangeRate()` and `updateValidator(v)` calls to the beginning of the function.\n\n\n**[kitti-katy (Covalent) confirmed](https://github.com/code-423n4/2021-10-covalent-findings/issues/57)**\n\n**[GalloDaSballo (judge) commented](https://github.com/code-423n4/2021-10-covalent-findings/issues/57#issuecomment-955111691):**\n > Agree with the finding, using the old exchange rate ends up burning more shares than what would be correct\n> The sponsor has mitigated the issue\n\n\n# Medium Risk Findings (3)\n\n## [[M-01] reward tokens could get lost due to rounding down](https://github.com/code-423n4/2021-10-covalent-findings/issues/10)\n_Submitted by gpersoon, also found by hickuphh3, xYrYuYx, and jonah1005_\n\n#### Impact\nThe function `depositRewardTokens` divides the \"amount\" of tokens by `allocatedTokensPerEpoch` to calculate the `endEpoch`.\nWhen \"amount\" isn't a multiple of `allocatedTokensPerEpoch` the result of the division will be rounded down,\neffectively losing a number of tokens for the rewards.\n\nFor example if `allocatedTokensPerEpoch` is set to 3e18 and \"amount\" is 100e18 then `endEpoch` will be increased with 33e18 and the last 1e18 tokens are lost.\n\nA similar problem occurs here:\n-  in `setAllocatedTokensPerEpoch()`, with the recalculation of `endEpoch`\n-  in `takeOutRewardTokens()`, with the retrieval of tokens\n-  in \\_stake(), when initializing `endEpoch` (e.g. when `endEpoch`==0)\n\n#### Proof of Concept\n- [`DelegatedStaking.sol` L90-L98](https://github.com/code-423n4/2021-10-covalent/blob/ded3aeb2476da553e8bb1fe43358b73334434737/contracts/DelegatedStaking.sol#L90-L98)\n- [`DelegatedStaking.sol` L368-L383](https://github.com/code-423n4/2021-10-covalent/blob/ded3aeb2476da553e8bb1fe43358b73334434737/contracts/DelegatedStaking.sol#L368-L383)\n\n#### Recommended Mitigation Steps\nIn `depositRewardTokens()` add, in the beginning of function, before the if statement:\n```solidity\nrequire(amount % allocatedTokensPerEpoch == 0,\"Not multiple\");\n```\n\nIn `takeOutRewardTokens()` add:\n```solidity\nrequire(amount % allocatedTokensPerEpoch == 0,\"Not multiple\");\n```\n\nUpdate `setAllocatedTokensPerEpoch()` to something like:\n\n```solidity\nif (`endEpoch` != 0) {\n...\nuint128 futureRewards = ...\nrequire(futureRewards % amount ==0,\"Not multiple\");\n...\\\n} else { // to prevent issues with \\_stake()\nrequire(rewardsLocked % allocatedTokensPerEpoch==0,\"Not multiple\");\n}\n```\n\n**[kitti-katy (Covalent) confirmed](https://github.com/code-423n4/2021-10-covalent-findings/issues/10#issuecomment-948903386):**\n > Agreed, the original assumption was that the owner would always make sure the take out and deposit amount is multiple of emission rate. But yes, this is good to add the check. Also it is not that risky since the emission rate wouldn't be that high per epoch and the loss will always be less than the emission rate.\n\n**[GalloDaSballo (judge) commented](https://github.com/code-423n4/2021-10-covalent-findings/issues/10#issuecomment-957018348):**\n > Agree with the finding, since it's a rounding error the max loss in rewards can at most be 1 less than the denominator\n>\n> That said, this is a Medium Severity Finding as per the doc:\n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n>\n> Where in this case the rounding is a way to leak value (loss of yield)\n\n## [[M-02] Incorrect `updateGlobalExchangeRate` implementation](https://github.com/code-423n4/2021-10-covalent-findings/issues/17)\n_Submitted by xYrYuYx_\n\n#### Impact\n`UpdateGlobalExchangeRate` has incorrect implementation when `totalGlobalShares` is zero.\n\nIf any user didn't start stake, `totalGlobalShares` is 0, and every stake it will increase.\nbut there is possibility that `totalGlobalShares` can be 0 amount later by unstake or disable validator.\n\n#### Proof of Concept\nThis is my test case to proof this issue: [C4_issues.js L76](https://github.com/xYrYuYx/C4-2021-10-covalent/blob/main/test/c4-tests/C4_issues.js#L76)\n\nIn my test case, I disabled validator to make `totalGlobalShares` to zero.\nAnd in this case, some reward amount will be forever locked in the contract.\nAfter disable validator, I mined 10 blocks, and 4 more blocks mined due to other function calls,\nSo total 14 CQT is forever locked in the contract.\n\n#### Tools Used\nHardhat test\n\n#### Recommended Mitigation Steps\nPlease think again when `totalGlobalShares` is zero.\n\n**[kitti-katy (Covalent) acknowledged](https://github.com/code-423n4/2021-10-covalent-findings/issues/17#issuecomment-948913401):**\n > That is right, and I think the best solution would be to add a validator instance who is the owner and stake some low amount of tokens in it. This way we can make sure there is no such situation when `totalGlobalShares ` becomes `0` and if everyone unstaked, the owner could take out reward tokens and then unstake / redeem rewards.\n>\n> Not sure. That could even be marked as \"high risk\". if the situation happens and not handled right away (taking out reward tokens), then there could be more significant financial loss.\n\n**[kitti-katy (Covalent) commented](https://github.com/code-423n4/2021-10-covalent-findings/issues/17#issuecomment-950028436):**\n > marked resolved as it will be manually handled\n\n**[GalloDaSballo (judge) commented](https://github.com/code-423n4/2021-10-covalent-findings/issues/17#issuecomment-962730124):**\n > The issue found by the warden is straightforward:\n> Through mix of unstaking and the use of `disableValidator` the warden was able to lock funds, making them irredemeable\n>\n> It seems to me that this is caused by the fact that `unstake` as well as `disableValidator` will reduce the shares: https://github.com/code-423n4/2021-10-covalent/blob/a8368e7982d336a4b464a53cfe221b2395da801f/contracts/DelegatedStaking.sol#L348`\n>\n> I would recommend separating the shares accounting from the activation of validator, simply removing the subtraction  of global shares in `disableValidator` would allow them to claim those shares.\n>\n> The function `disableValidator` can be called by either the validator or the owner, while onlyOwner can add a new validator\n>\n> The owner has the ability to perform this type of griefing, as well as a group of validators if they so chose\n>\n> Due to the specifics of the grief I will rate it of Medium Severity, as per the docs:\n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n>\n> In this case we have a way to leak value (lock funds) with specific condition (malicious owner or multiple griefing validators)\n\n## [[M-03] Validator can fail to receive commission reward in `redeemAllRewards`](https://github.com/code-423n4/2021-10-covalent-findings/issues/65)\n_Submitted by jonah1005_\n\n#### Impact\nValidator can fail to receive commission reward by calling `redeemAllRewards`.\nThere's a check in `redeemAllRewards`\n\n```solidity\nuint128 rewards = sharesToTokens(s.shares, v.exchangeRate) - s.staked;\nrequire(rewards > 0, \"Nothing to redeem\");\n```\n\nThe validator's tx might be reverted here even if he got some commission reward to receive.\n\n#### Proof of Concept\nWe can trigger the bug by setting `commisionRate` to `1e18 - 1` ([DelegatedStaking.sol L275-L276](https://github.com/code-423n4/2021-10-covalent/blob/main/contracts/DelegatedStaking.sol#L275-L276))\n\n#### Recommended Mitigation Steps\nThough this may rarely happen and the validator can redeem the reward through `redeemRewards`, this may cause some issues when the validator is handled by a contract.\n\nI consider calling `redeemRewards` in `redeemAllReawards` as a more succinct way to do this.\n\n**[kitti-katy (Covalent) acknowledged](https://github.com/code-423n4/2021-10-covalent-findings/issues/65#issuecomment-948954017):**\n > I don't think there will ever be a commission rate set to almost 100%. Since it is changed by the owner we will make sure the input is correct.\n\n**[GalloDaSballo (judge) commented](https://github.com/code-423n4/2021-10-covalent-findings/issues/65#issuecomment-957813671):**\n > Agree with the finding and understand the sponsors take.\n>\n> As per the docs for contests:\n> `\n> 2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.\n> `\n>\n> This fall as a medium severity\n>\n> A simple mitigation would be to limit the `commisionRate` to less than the value that causes issues\n\n# Low Risk Findings (4)\n\n- [[L-01] `addValidator()`: Validator's commission rate should be checked to not exceed divider](https://github.com/code-423n4/2021-10-covalent-findings/issues/20) _Submitted by hickuphh3, also found by cmichel, jonah1005, and pauliax_\n- [[L-02] Line 127 lack of precision](https://github.com/code-423n4/2021-10-covalent-findings/issues/36) _Submitted by pants_\n- [[L-03] addValidatior doesn't check new validator address != 0](https://github.com/code-423n4/2021-10-covalent-findings/issues/35) _Submitted by pants_\n- [[L-04] Unbounded iteration over validators array](https://github.com/code-423n4/2021-10-covalent-findings/issues/59) _Submitted by cmichel_\n\n# Non-Critical Findings (11)\n\n- [[N-01] Typos](https://github.com/code-423n4/2021-10-covalent-findings/issues/42) _Submitted by WatchPug, also found by hickuphh3 and ye0lde_\n- [[N-02] Unnecessary require checker](https://github.com/code-423n4/2021-10-covalent-findings/issues/3) _Submitted by xYrYuYx_\n- [[N-03] Inconsistent definition of integer sizes in function `getDelegatorDetails()`](https://github.com/code-423n4/2021-10-covalent-findings/issues/70) _Submitted by pmerkleplant_\n- [[N-04] Unclear definition of `validatorId`'s integer size](https://github.com/code-423n4/2021-10-covalent-findings/issues/68) _Submitted by pmerkleplant_\n- [[N-05] Misleading parameter name](https://github.com/code-423n4/2021-10-covalent-findings/issues/60) _Submitted by WatchPug_\n- [[N-06] Code Style: private/internal function names should be prefixed with `_`](https://github.com/code-423n4/2021-10-covalent-findings/issues/55) _Submitted by WatchPug_\n- [[N-07] Code duplication](https://github.com/code-423n4/2021-10-covalent-findings/issues/46) _Submitted by WatchPug_\n- [[N-08] Make more data accessible](https://github.com/code-423n4/2021-10-covalent-findings/issues/22) _Submitted by hickuphh3_\n- [[N-09] `getValidatorsDetails` is getting disabled validators as well](https://github.com/code-423n4/2021-10-covalent-findings/issues/9) _Submitted by csanuragjain_\n- [[N-10] emit staked should be at stake function and not _stake.](https://github.com/code-423n4/2021-10-covalent-findings/issues/34) _Submitted by pants_\n- [[N-11] emit initialize](https://github.com/code-423n4/2021-10-covalent-findings/issues/33) _Submitted by pants_\n\n# Gas Optimizations (18)\n\n- [[G-01] Move Function `_stake` Validator Declaration](https://github.com/code-423n4/2021-10-covalent-findings/issues/89) _Submitted by ye0lde_\n- [[G-02] Adding unchecked directive can save gas](https://github.com/code-423n4/2021-10-covalent-findings/issues/52) _Submitted by WatchPug, also found by pauliax and ye0lde_\n- [[G-03] Long Revert Strings](https://github.com/code-423n4/2021-10-covalent-findings/issues/19) _Submitted by ye0lde_\n- [[G-04] Update function access](https://github.com/code-423n4/2021-10-covalent-findings/issues/2) _Submitted by xYrYuYx, also found by WatchPug, defsec, harleythedog, pants, and pauliax_\n- [[G-05] Recommend to use OZ SafeERC20 library](https://github.com/code-423n4/2021-10-covalent-findings/issues/1) _Submitted by xYrYuYx, also found by cmichel, defsec, and pants_\n- [[G-06] Declare variable `CQT` as constant](https://github.com/code-423n4/2021-10-covalent-findings/issues/67) _Submitted by pmerkleplant, also found by harleythedog_\n- [[G-07] Change lines to save gas](https://github.com/code-423n4/2021-10-covalent-findings/issues/75) _Submitted by pants_\n- [[G-08] Change order of lines to save gas in `setAllocatedTokensPerEpoch`](https://github.com/code-423n4/2021-10-covalent-findings/issues/73) _Submitted by pants_\n- [[G-09] `getDelegatorDetails` declaration inside a loop](https://github.com/code-423n4/2021-10-covalent-findings/issues/39) _Submitted by pants_\n- [[G-10] Cache storage variables in the stack can save gas](https://github.com/code-423n4/2021-10-covalent-findings/issues/53) _Submitted by WatchPug, also found by harleythedog and pants_\n- [[G-11] ++i is more gas efficient than i++ in loops forwarding](https://github.com/code-423n4/2021-10-covalent-findings/issues/37) _Submitted by pants_\n- [[G-12] `delegatorCoolDown` ](https://github.com/code-423n4/2021-10-covalent-findings/issues/29) _Submitted by pants_\n- [[G-13] state variable divider could be set immutable.](https://github.com/code-423n4/2021-10-covalent-findings/issues/27) _Submitted by pants, also found by WatchPug and jonah1005_\n- [[G-14] `takeOutRewardTokens()`: Optimise epochs calculation and comparison ](https://github.com/code-423n4/2021-10-covalent-findings/issues/26) _Submitted by hickuphh3, also found by WatchPug_\n- [[G-15] reset `rewardsLocked` to 0 when no longer used](https://github.com/code-423n4/2021-10-covalent-findings/issues/13) _Submitted by gpersoon_\n- [[G-16] Check `validatorId < validatorsN` can be done earlier](https://github.com/code-423n4/2021-10-covalent-findings/issues/51) _Submitted by WatchPug_\n- [[G-17] Avoid unnecessary storage read can save gas](https://github.com/code-423n4/2021-10-covalent-findings/issues/49) _Submitted by WatchPug_\n- [[G-18] unnecessary assert when dealing with CQT](https://github.com/code-423n4/2021-10-covalent-findings/issues/63) _Submitted by jonah1005_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}