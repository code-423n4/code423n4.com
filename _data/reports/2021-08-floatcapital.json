{
  "circa": {
    "title": "Float Capital contest",
    "sponsor": "Float Capital",
    "slug": "2021-08-floatcapital",
    "date": "2021-09-16",
    "findings": "https://github.com/code-423n4/2021-08-floatcapital-findings/issues",
    "contest": 22
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code 432n4 (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Float Capital smart contract system written in Solidity. The code contest took place between August 4—August 11.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>16 Wardens contributed reports to the Float Capital code contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li><a href=\"https://github.com/x9453\">shw</a></li>\n<li><a href=\"https://twitter.com/HickupH\">hickuphh3</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/jonah1005w\">jonah1005</a></li>\n<li><a href=\"https://twitter.com/0xRajeev\">0xRajeev</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/Tensors8\">tensors</a></li>\n<li><a href=\"https://twitter.com/hack3r_0m\">hack3r-0m</a></li>\n<li><a href=\"https://twitter.com/MukeshJ_eth\">Jmukesh</a></li>\n<li><a href=\"https://twitter.com/0xImpostor\">0xImpostor</a></li>\n<li>evertkors</li>\n<li><a href=\"https://twitter.com/loop_225\">loop</a></li>\n<li><a href=\"https://twitter.com/_hrkrshnn\">hrkrshnn</a></li>\n<li><a href=\"https://twitter.com/patitonar\">patitonar</a></li>\n<li><a href=\"https://github.com/bernard-wagner\">bw</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://github.com/0xean\" title=\"judge\">0xean (judge)</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/money_lego\">moneylegobatman</a> and <a href=\"https://twitter.com/_ninek_\">ninek</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 24 unique vulnerabilities. All of the issues presented here are linked back to their original finding</p>\n<p>Of these vulnerabilities, 3 received a risk rating in the category of HIGH severity, 6 received a risk rating in the category of MEDIUM severity, and 15 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 25 non-critical recommendations and 21 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-08-floatcapital\">C4 Float Capital code contest repository</a> is comprised of 43 smart contracts written in the Solidity programming language and includes 4,215 lines of Solidity, 7,512 lines of ReasonMl, and 8,062 lines of Rescript code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings\" style=\"position:relative;\"><a href=\"#high-risk-findings\" aria-label=\"high risk findings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings</h1>\n<h2 id=\"h-01-copy-paste-error-in-_batchconfirmoutstandingpendingactions\" style=\"position:relative;\"><a href=\"#h-01-copy-paste-error-in-_batchconfirmoutstandingpendingactions\" aria-label=\"h 01 copy paste error in _batchconfirmoutstandingpendingactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/5\">[H-01] copy paste error in <code>_batchConfirmOutstandingPendingActions</code></a></h2>\n<p><em>Submitted by gpersoon, also found by cmichel and shw</em></p>\n<p>The function <code>_batchConfirmOutstandingPendingActions</code> of <code>LongShort.sol</code> processes the variable <code>batched_amountSyntheticToken_toShiftAwayFrom_marketSide</code>, and sets it to 0 after processing. However, probably due to a copy/paste error, in the second instance, where <code>batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][false]</code> is processed, the wrong version is set to 0: <code>batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][true]</code> = 0</p>\n<p>This means the next time the <code>batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][false]</code> is processed again. As it is never reset, it keeps increasing. The result is that the internal administration will be off and far too many tokens will be shifted tokens from SHORT to LONG.</p>\n<p><a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/LongShort.sol#L1126\"><code>LongShort.sol</code> L1126</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_batchConfirmOutstandingPendingActions</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amountForCurrentAction_workingVariable</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">batched_amountSyntheticToken_toShiftAwayFrom_marketSide</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk4\">true</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">batched_amountSyntheticToken_toShiftAwayFrom_marketSide</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk12\">true</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amountForCurrentAction_workingVariable</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">batched_amountSyntheticToken_toShiftAwayFrom_marketSide</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk4\">false</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">batched_amountSyntheticToken_toShiftAwayFrom_marketSide</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk12\">true</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// should probably be false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>Recommend changing the second instance of the following (on line 1207)\n<code>batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][true] = 0</code>\nto\n<code>batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][false] = 0</code></p>\n<p>p.s. confirmed by Jason of Floatcapital: “Yes, that should definitely be false!”</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/5#issuecomment-895969550\">JasoonS (Float) commented</a>:</strong></p>\n<blockquote>\n<p>Mitigation</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">- batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][true] = 0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+ batched_amountSyntheticToken_toShiftAwayFrom_marketSide[marketIndex][false] = 0</span></span></span></code></pre>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/5#issuecomment-896714257\">moose-code (Float) confirmed</a>:</strong></p>\n<blockquote>\n<p>Good attention to detail. Silly on our part.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/5#issuecomment-897472713\">DenhamPreen (Float) patched</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/Float-Capital/monorepo/pull/1087\">https://github.com/Float-Capital/monorepo/pull/1087</a></p>\n<p>Resolved PR</p>\n<p>*note this repo is still private</p>\n</blockquote>\n<h2 id=\"h-02-2-variables-not-indexed-by-marketindex\" style=\"position:relative;\"><a href=\"#h-02-2-variables-not-indexed-by-marketindex\" aria-label=\"h 02 2 variables not indexed by marketindex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/8\">[H-02] 2 variables not indexed by <code>marketIndex</code></a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>In the token contract: <code>batched_stakerNextTokenShiftIndex</code> is indexed by <code>marketIndex</code>, so it can have separate (or the same) values for each different <code>marketIndex</code>.</p>\n<p><code>stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mapping</code> and <code>stakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mapping</code> are not indexed by <code>marketIndex</code>.\nSo the values of <code>stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mapping</code> and <code>stakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mapping</code>\ncan be overwritten by a different market, if <code>batched_stakerNextTokenShiftIndex[market1]</code>==<code>batched_stakerNextTokenShiftIndex[market2]</code></p>\n<p>This will lead to weird results in<code>_calculateAccumulatedFloat</code>, allocating too much or too little float.</p>\n<p><a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/Staker.sol#L622\"><code>Staker.sol</code> L622</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pushUpdatedMarketPricesToUpdateFloatIssuanceCalculations</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mapping</span><span class=\"mtk1\">[ </span><span class=\"mtk12\">batched_stakerNextTokenShiftIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">]  ] = </span><span class=\"mtk12\">stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mappingIfShiftExecuted</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">stakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mapping</span><span class=\"mtk1\">[  </span><span class=\"mtk12\">batched_stakerNextTokenShiftIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">]  ] = </span><span class=\"mtk12\">latestRewardIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">] + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">batched_stakerNextTokenShiftIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">] += </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>Recommend adding an index with <code>marketIndex</code> to the variables:</p>\n<ul>\n<li><code>stakerTokenShiftIndex_to_longShortMarketPriceSnapshotIndex_mapping</code></li>\n<li><code>stakerTokenShiftIndex_to_accumulativeFloatIssuanceSnapshotIndex_mapping</code></li>\n</ul>\n<p>Also consider shortening the variable names, this way mistakes can be spotted easier.</p>\n<p>Confirmed by Jason of Float Capital: Yes, you are totally right, it should use the <code>marketIndex</code> since they are specific per market!</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/8#issuecomment-895999895\">JasoonS (Float) confirmed</a>:</strong></p>\n<blockquote>\n<p><img class=\"emoji-icon\" alt=\"emoji-see_no_evil\" data-icon=\"emoji-see_no_evil\" style=\"display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px\" src=\"data:image/png;base64, \" title=\"emoji-see_no_evil\" /> Embarrassed by this one!</p>\n<p>Thank you for the report.</p>\n<p>Fixed!!</p>\n</blockquote>\n<h2 id=\"h-03-users-could-shift-tokens-on-staker-with-more-than-he-has-staked\" style=\"position:relative;\"><a href=\"#h-03-users-could-shift-tokens-on-staker-with-more-than-he-has-staked\" aria-label=\"h 03 users could shift tokens on staker with more than he has staked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/141\">[H-03] Users could shift tokens on <code>Staker</code> with more than he has staked</a></h2>\n<p><em>Submitted by shw</em></p>\n<p>The <code>shiftTokens</code> function of <code>Staker</code> checks whether the user has staked at least the number of tokens he wants to shift from one side to the other (line 885). A user could call the <code>shiftTokens</code> function multiple times before the next price update to shift the staker’s token from one side to the other with more than he has staked. <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/Staker.sol#L885\">Staker.sol#L885</a></p>\n<p>Recommend adding checks on <code>userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_long</code> and <code>userNextPrice_amountStakedSyntheticToken_toShiftAwayFrom_short</code> to ensure that the sum of the two variables does not exceed user’s stake balance.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/141#issuecomment-897369855\">JasoonS (Float) confirmed</a>:</strong></p>\n<blockquote>\n<p>Yes, spot on! We spotted this the next morning after launching the competition. Token shifting was a last minute addition to the codebase. Really glad someone spotted it, but only in the last few hours, phew!</p>\n<p>This would allow a malicious user to completely shift all the tokens (even those not belonging to them to one side or the other!!)\nNo funds could be stolen by the user directly (since the execution of those shifts would fail on the user level), but it could be done for personal gain (eg improving the users FLT issuance rate, or similar economic manipulation).</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-6\" style=\"position:relative;\"><a href=\"#medium-risk-findings-6\" aria-label=\"medium risk findings 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (6)</h1>\n<h2 id=\"m-01-latestmarket-used-where-marketindex-should-have-been-used\" style=\"position:relative;\"><a href=\"#m-01-latestmarket-used-where-marketindex-should-have-been-used\" aria-label=\"m 01 latestmarket used where marketindex should have been used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/9\">[M-01] <code>latestMarket</code> used where <code>marketIndex</code> should have been used</a></h2>\n<p><em>Submitted by gpersoon, also found by 0xImpostor, cmichel, shw, hack3r-0m, jonah1005, loop and pauliax</em></p>\n<p>The functions <code>initializeMarket</code> and <code>_seedMarketInitially</code> use the variable <code>latestMarket</code>.\nIf these functions would be called seperately from <code>createNewSyntheticMarket</code>, then <code>latestMarket</code> would have the same value for each call of <code>initializeMarket</code> and <code>_seedMarketInitially</code></p>\n<p>This would mean that the <code>latestMarket</code> is initialized multiple times and the previous market(s) are not initialized properly.\nNote: the call to addNewStakingFund could have prevented this issue, but also allows this, see separate issue.</p>\n<p>Note: the functions can only be called by the admin, so if <code>createNewSyntheticMarket</code> and <code>initializeMarket</code> are called in combination, then it would not lead to problems,\nbut in future release of the software the calls to <code>createNewSyntheticMarket</code> and <code>initializeMarket</code> might get separated.</p>\n<p><a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/LongShort.sol#L304\"><code>LongShort.sol</code> #L304</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_seedMarketInitially</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initialMarketSeedForEachMarketSide</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">ISyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">latestMarket</span><span class=\"mtk1\">][</span><span class=\"mtk4\">true</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PERMANENT_INITIAL_LIQUIDITY_HOLDER</span><span class=\"mtk1\">,</span><span class=\"mtk12\">initialMarketSeedForEachMarketSide</span><span class=\"mtk1\">);   </span><span class=\"mtk3\">// should be marketIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">ISyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">latestMarket</span><span class=\"mtk1\">][</span><span class=\"mtk4\">false</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PERMANENT_INITIAL_LIQUIDITY_HOLDER</span><span class=\"mtk1\">,</span><span class=\"mtk12\">initialMarketSeedForEachMarketSide</span><span class=\"mtk1\">);  </span><span class=\"mtk3\">// should be marketIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initializeMarket</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">,....)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">marketExists</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">], </span><span class=\"mtk8\">&quot;already initialized&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">latestMarket</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;index too high&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">marketExists</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">..</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">IStaker</span><span class=\"mtk1\">(</span><span class=\"mtk12\">staker</span><span class=\"mtk1\">).</span><span class=\"mtk11\">addNewStakingFund</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">`latestMarket`</span><span class=\"mtk1\">,                                       </span><span class=\"mtk3\">// should be marketIndex.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">syntheticTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">latestMarket</span><span class=\"mtk1\">][</span><span class=\"mtk4\">true</span><span class=\"mtk1\">],   </span><span class=\"mtk3\">// should be marketIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">syntheticTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">latestMarket</span><span class=\"mtk1\">][</span><span class=\"mtk4\">false</span><span class=\"mtk1\">],  </span><span class=\"mtk3\">// should be marketIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span></code></pre>\n<p>Recommend replacing <code>latestMarket</code> with <code>marketIndex</code> in the functions <code>initializeMarket</code> and <code>_seedMarketInitially</code>.</p>\n<p>p.s. confirmed by Jason of float capital: Definitely an issue, luckily both of those functions are adminOnly. But that is definitely not ideal!</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/9#issuecomment-896001724\">JasoonS (Float) confirmed</a>:</strong></p>\n<blockquote>\n<p>Great spot!</p>\n<p><img src=\"https://user-images.githubusercontent.com/6032276/128869917-0121e5cb-d550-4d1e-ac25-5c97efdd2ff1.png\" alt=\"image\"></p>\n<p>Not a risk if you know about it (you just need to launch markets sequentially not in batches), but we didn’t. So 2 - medium risk is fair :)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/9#issuecomment-897493238\">DenhamPreen (Float) patched</a>:</strong></p>\n<blockquote>\n<p>Resolved PR\n<a href=\"https://github.com/Float-Capital/monorepo/pull/1106\">https://github.com/Float-Capital/monorepo/pull/1106</a></p>\n</blockquote>\n<h2 id=\"m-02-incorrect-balance-computed-in-getusersconfirmedbutnotsettledsynthbalance\" style=\"position:relative;\"><a href=\"#m-02-incorrect-balance-computed-in-getusersconfirmedbutnotsettledsynthbalance\" aria-label=\"m 02 incorrect balance computed in getusersconfirmedbutnotsettledsynthbalance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/142\">[M-02] Incorrect balance computed in <code>getUsersConfirmedButNotSettledSynthBalance()</code></a></h2>\n<p><em>Submitted by hack3r-0m and cmichel</em></p>\n<p>Consider the following state:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">long_synth_balace</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">300</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">short_synth_balace</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">200</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">marketUpdateIndex</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">x</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">userNextPrice_currentUpdateIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">userNextPrice_syntheticToken_toShiftAwayFrom_marketSide</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">][</span><span class=\"mtk4\">true</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">batched_amountSyntheticToken_toShiftAwayFrom_marketSide</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">][</span><span class=\"mtk4\">true</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>User calls <code>shiftPositionFromLongNextPrice(marketIndex=1, amountSyntheticTokensToShift=100)</code></p>\n<p>This results in following state changes:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">long_synth_balace</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">200</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">short_synth_balace</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">200</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">userNextPrice_syntheticToken_toShiftAwayFrom_marketSide</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">][</span><span class=\"mtk4\">true</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">batched_amountSyntheticToken_toShiftAwayFrom_marketSide</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">][</span><span class=\"mtk4\">true</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">100</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">userNextPrice_currentUpdateIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">x</span><span class=\"mtk1\">+</span><span class=\"mtk7\">1</span><span class=\"mtk1\"> ;</span></span></span></code></pre>\n<p>Due to some other transactions, oracle updates twice, and now the <code>marketUpdateIndex[1]</code> is x+2 and also updating price snapshots.</p>\n<p>When User calls <code>getUsersConfirmedButNotSettledSynthBalance(user, 1)</code></p>\n<p>initial condition:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">userNextPrice_currentUpdateIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk12\">user</span><span class=\"mtk1\">] != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">userNextPrice_currentUpdateIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk12\">user</span><span class=\"mtk1\">] &lt;= </span><span class=\"mtk12\">currentMarketUpdateIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>will be true;\n<a href=\"https://github.com/hack3r-0m/2021-08-floatcapital/blob/main/contracts/contracts/LongShort.sol#L532\"><code>LongShort.sol</code> L532</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">syntheticToken_priceSnapshot</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk12\">isLong</span><span class=\"mtk1\">][</span><span class=\"mtk12\">currentMarketUpdateIndex</span><span class=\"mtk1\">]</span></span></span></code></pre>\n<p>This uses price of current x+2 th update while it should balance of accounting for price of x+1 th update.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/142#issuecomment-897368280\">JasoonS (Float) confirmed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Yes good spot.</p>\n<p>This function is view only, and is only used for view only purposes. The rest of the system will always operate correctly because it rather uses <code>_executeOutstandingNextPriceSettlements</code> than the <code>getUsersConfirmedButNotSettledSynthBalance</code>. Therefore I propose this as a <strong>1 Low Risk</strong> vulnerability.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/142#issuecomment-905007960\">0xean (judge) (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I am going to align with the 2 (Med Risk) severity.  Reporting the incorrect position in a UI to a user could definitely lead unexpected loss of funds in a sharp market move where a user is intending on hedging elsewhere.</p>\n</blockquote>\n<h2 id=\"m-03-missing-eventstimelocks-for-owneradmin-only-functions-that-change-critical-parameters\" style=\"position:relative;\"><a href=\"#m-03-missing-eventstimelocks-for-owneradmin-only-functions-that-change-critical-parameters\" aria-label=\"m 03 missing eventstimelocks for owneradmin only functions that change critical parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/85\">[M-03] Missing events/timelocks for owner/admin only functions that change critical parameters</a></h2>\n<p><em>Submitted by 0xRajeev, also found by tensors</em></p>\n<p>Owner/admin only functions that change critical parameters should emit events and have timelocks. Events allow capturing the changed parameters so that off-chain tools/interfaces can register such changes with timelocks that allow users to evaluate them and consider if they would like to engage/exit based on how they perceive the changes as affecting the trustworthiness of the protocol or profitability of the implemented financial services. The alternative of directly querying on-chain contract state for such changes is not considered practical for most users/usages.</p>\n<p>Missing events and timelocks do not promote transparency and if such changes immediately affect users’ perception of fairness or trustworthiness, they could exit the protocol causing a reduction in liquidity which could negatively impact protocol TVL and reputation.</p>\n<p>There are owner/admin functions that do not emit any events in <code>LongShort.sol</code>. It is not apparent that any owner/admin functions will have timelocks.</p>\n<p>See similar High-severity <a href=\"https://blog.openzeppelin.com/audius-contracts-audit/#high\">H03</a> finding in OpenZeppelin’s Audit of Audius and Medium-severity <a href=\"https://blog.openzeppelin.com/uma-audit-phase-4/\">M01</a> finding OpenZeppelin’s Audit of UMA Phase 4</p>\n<p>See issue page for referenced code.</p>\n<p>Recommend adding events to all owner/admin functions that change critical parameters. Add timelocks to introduce time delays for critical parameter changes that significantly impact market/user incentives/security.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/85#issuecomment-897497116\">JasoonS (Float) acknowledged</a>:</strong></p>\n<blockquote>\n<p>We will manage timelocks and multi-sigs externally to these contracts.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/85#issuecomment-898693915\">JasoonS (Float) commented</a>:</strong></p>\n<blockquote>\n<p>I would consider this a duplicate of #84 in many ways. (or at least #84 is a sub-issue of this issue)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/85#issuecomment-905048244\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>duplicate of #84 as both offer solutions for dealing with privileged functionality (including the transfer of ownership). Leaving severity as 2 based on the potential risks associated with an incorrect admin change or similar.</p>\n</blockquote>\n<h2 id=\"m-04-stakersol-wrong-values-returned-in-edge-cases-of-_calculatefloatpersecond\" style=\"position:relative;\"><a href=\"#m-04-stakersol-wrong-values-returned-in-edge-cases-of-_calculatefloatpersecond\" aria-label=\"m 04 stakersol wrong values returned in edge cases of _calculatefloatpersecond permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/6\">[M-04] Staker.sol: Wrong values returned in edge cases of <code>_calculateFloatPerSecond()</code></a></h2>\n<p><em>Submitted by hickuphh3</em></p>\n<p>In <code>_calculateFloatPerSecond()</code>, the edge cases where full rewards go to either the long or short token returns</p>\n<p><code>return (1e18 * k * longPrice, 0);</code> and</p>\n<p><code>return (0, 1e18 * k * shortPrice);</code> respectively.</p>\n<p>This is however <code>1e18</code> times too large. We can verify this by checking the equivalent calculation in the ‘normal case’, where we assume all the rewards go to the short token, ie. <code>longRewardUnscaled = 0</code>  and <code>shortRewardUnscaled = 1e18</code>. Plugging this into the calculation below,</p>\n<p><code>return ((longRewardUnscaled * k * longPrice) / 1e18, (shortRewardUnscaled * k * shortPrice) / 1e18);</code> results in</p>\n<p><code>(0, 1e18 * k * shortPrice / 1e18)</code> or <code>(0, k * shortPrice)</code>.</p>\n<p>As we can see, this would result in an extremely large float token issuance rate, which would be disastrous.</p>\n<p>The edge cases should return <code>(k * longPrice, 0)</code> and <code>(0, k * shortPrice)</code> in the cases where rewards should go fully to long and short token holders respectively.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/6#issuecomment-895995908\">JasoonS (Float) confirmed</a>:</strong></p>\n<blockquote>\n<p>Fix:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-return (1e18 * k * longPrice, 0);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+return (k * longPrice, 0);</span></span></span></code></pre>\n<p>and</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-return (0, 1e18 * k * shortPrice);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+return (0, k * shortPrice);</span></span></span></code></pre>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/6#issuecomment-897480501\">DenhamPreen (Float) patched</a>:</strong></p>\n<blockquote>\n<p>Resolved\n<a href=\"https://github.com/Float-Capital/monorepo/pull/1085\">https://github.com/Float-Capital/monorepo/pull/1085</a></p>\n</blockquote>\n<h2 id=\"m-05-wrong-aave-usage-of-claimrewards\" style=\"position:relative;\"><a href=\"#m-05-wrong-aave-usage-of-claimrewards\" aria-label=\"m 05 wrong aave usage of claimrewards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/49\">[M-05] Wrong aave usage of <code>claimRewards</code></a></h2>\n<p><em>Submitted by jonah1005</em></p>\n<p>Aave yield manager claims rewards with the payment token. According to aave’s document, aToken should be provided.\nThe aave rewards would be unclaimable.</p>\n<p>YieldManager’s logic in <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/YieldManagerAave.sol#L161-L170\">L161-L170</a></p>\n<p>Reference: <a href=\"https://docs.aave.com/developers/guides/liquidity-mining#claimrewards\">https://docs.aave.com/developers/guides/liquidity-mining#claimrewards</a></p>\n<p>Recommend changing to</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardsDepositedAssets</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">address</span><span class=\"mtk1\">[](</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">rewardsDepositedAssets</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">aToken</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/49#issuecomment-896811177\">DenhamPreen (Float) confirmed</a>:</strong></p>\n<blockquote>\n<p>Great catch!</p>\n<p>This contract is going to be upgradable but really applicable within this context 👍</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/49#issuecomment-896845365\">moose-code (Float) commented</a>:</strong></p>\n<blockquote>\n<p>Oof yeah! Good one :)</p>\n<p>Devil in those documentation details :)</p>\n<p><img src=\"https://user-images.githubusercontent.com/20556729/129041188-b712e09a-f735-44d4-922f-328b156e2461.png\" alt=\"image\"></p>\n</blockquote>\n<h2 id=\"m-06-prevent-markets-getting-stuck-when-prices-dont-move\" style=\"position:relative;\"><a href=\"#m-06-prevent-markets-getting-stuck-when-prices-dont-move\" aria-label=\"m 06 prevent markets getting stuck when prices dont move permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/16\">[M-06] Prevent markets getting stuck when prices don’t move</a></h2>\n<p><em>Submitted by gpersoon, also found by cmichel</em></p>\n<p>Suppose there is a synthetic token where the price stays constant, for example:</p>\n<ul>\n<li>synthetic DAI  (with a payment token of DAI the price will not move)</li>\n<li>binary option token (for example tracking the USA elections; after the election results there will be no more price movements)</li>\n</ul>\n<p>In that case <code>assetPriceHasChanged</code> will never be true (again) and <code>marketUpdateIndex[marketIndex]</code> will never increase.\nThis means the <code>_executeOutstandingNextPrice</code>* functions will never be executed, which means the market effectively will be stuck.</p>\n<p><a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/LongShort.sol#L669\"><code>LongShort.sol</code> L669</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> `</span><span class=\"mtk11\">_updateSystemStateInternal</span><span class=\"mtk1\">`(</span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">requireMarketExists</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newAssetPrice</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IOracleManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">oracleManagers</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">updatePrice</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">oldAssetPrice</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">int256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">assetPrice</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">assetPriceHasChanged</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">oldAssetPrice</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">newAssetPrice</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">assetPriceHasChanged</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">staker</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    ....</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">assetPriceHasChanged</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    ....</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">marketUpdateIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">] += </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;  </span><span class=\"mtk3\">// never reaches this point if the price doesn&#39;t change</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1035\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1036\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_executeOutstandingNextPriceSettlements</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1037\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">userCurrentUpdateIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">userNextPrice_currentUpdateIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk12\">user</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1038\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">userCurrentUpdateIndex</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">userCurrentUpdateIndex</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">marketUpdateIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">]) { </span><span class=\"mtk3\">// needs marketUpdateIndex[marketIndex] to be increased</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1039\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_executeOutstandingNextPriceMints</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1040\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_executeOutstandingNextPriceMints</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1041\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_executeOutstandingNextPriceRedeems</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1042\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_executeOutstandingNextPriceRedeems</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1043\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_executeOutstandingNextPriceTokenShifts</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"1044\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_executeOutstandingNextPriceTokenShifts</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Recommend enhancing <code>_updateSystemStateInternal</code> so that after a certain period of time without price movements (for example 1 day), the entire function is executed (including the <code>marketUpdateIndex[marketIndex]</code> += 1;)</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/16#issuecomment-896069784\">JasoonS (Float) disputed</a>:</strong></p>\n<blockquote>\n<p>Good point, we thought the time since last update check wasn’t necessary.</p>\n<p>I’ll chat with the team about what they think the risk is. But I don’t think it is 3 given that we don’t plan to launch any assets that don’t have regular change (so market would be stuck for a limited time - even if it is long).</p>\n<p>In a lot of ways our ‘nextPriceExecution` model is designed for this case. Some more traditional markets close for the weekend and over night. Our mechanism means that users will be able to buy and trade these assets at any time and get the asset as soon as there is an update.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/16#issuecomment-896290768\">JasoonS (Float) commented</a>:</strong></p>\n<blockquote>\n<p>The more I think about this the more I think it is a safety feature. It is way more likely that if the oracle keeps returning the same value that something is broken (which means we can catch the issue before it negatively impacts the system by unfairly managing user funds or similar). If it really is stuck on the same value legitimately it can replace the OracleManager that is being used to help with that.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/16#issuecomment-896735385\">moose-code (Float) commented</a>:</strong></p>\n<blockquote>\n<p>Since there is no current plan for a binary market, and the system would definitely need other accommodations to allow a binary market, since next price execution etc, this doesn’t make sense as an issue in this case. The system is built for markets where continuous price updates will occur.</p>\n<p>Agree with Jason, if not price update is occurring, there is likely an issue with the oracle, and our system is not failing even in light of this issue. It is effectively paused until a new price update is given. As Jason mentions we can use the oracle manager to fix this</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/16#issuecomment-906047797\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Due to the ability to update the oracle, funds would not be lost, but it would be an availability risk (even if temporary) for the system.  Based on that I am downgrading to a 2.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-15\" style=\"position:relative;\"><a href=\"#low-risk-findings-15\" aria-label=\"low risk findings 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (15)</h1>\n<h2 id=\"l-01-missing-input-validation-on-many-functions-throughout-the-code\" style=\"position:relative;\"><a href=\"#l-01-missing-input-validation-on-many-functions-throughout-the-code\" aria-label=\"l 01 missing input validation on many functions throughout the code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/1\">[L-01] Missing input validation on many functions throughout the code</a></h2>\n<p><em>Submitted by tensors, also found by 0xRajeev, JMukesh and pauliax</em></p>\n<p>Many functions throughout <code>LongShort.sol</code> and <code>YieldManager.sol</code> have no simple checks for validating inputs. Below some examples are linked. See <code>LongShort.sol</code> <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/contracts/contracts/LongShort.sol#L254\">L254</a>, and <code>YieldManager.sol</code> <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/contracts/contracts/YieldManagerAave.sol#L149\">L149</a>.</p>\n<p>Recommend simple validations like requiring non-zero address or checking that amounts are non-zero would fix this.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/1#issuecomment-895984918\">JasoonS (Float) disputed</a>:</strong></p>\n<blockquote>\n<p><strong>0 - non-critical</strong></p>\n<p>Both examples given are not vulnerabilities since they are not public functions.</p>\n<p><a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/contracts/contracts/LongShort.sol#L254\">L254 in LongShort.sol</a>\nThis is an <code>onlyAdmin</code> function. We purposely removed null checks from admin functions (we will only call these functions under highly controlled circumstances with via code (ie ethers.js) that checks for forgotten arguments).</p>\n<p><a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/contracts/contracts/YieldManagerAave.sol#L149\">L149 in YieldManagerAave.sol</a>\nThis function is <code>longShortOnly</code> so ONLY the LongShort contract.\nIf you can find a bug (an actual example) in the <code>LongShort.sol</code> contract where it can give the incorrect arguments to the <code>YieldManagerAave</code> contract then this could be a valid issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/1#issuecomment-905092238\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>given the downside of not having these checks in place and for example the admin being set to a null address there seems little benefit to not having them. Downgrading to 1</p>\n</blockquote>\n<h2 id=\"l-02-comment-code-mismatch-for-_balanceincentivecurve_exponent-threshold\" style=\"position:relative;\"><a href=\"#l-02-comment-code-mismatch-for-_balanceincentivecurve_exponent-threshold\" aria-label=\"l 02 comment code mismatch for _balanceincentivecurve_exponent threshold permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/89\">[L-02] Comment-code mismatch for <code>_balanceIncentiveCurve_exponent</code> threshold</a></h2>\n<p><em>Submitted by 0xRajeev, also found by hickuphh3</em></p>\n<p>The code comment says: “// The exponent has to be less than 5 in these versions of the contracts.” but the code immediately after the comment implements a check “&#x3C; 6.” It is unclear if the comment is incorrect or the check is wrong. An incorrect check may have mathematical implications. <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/contracts/contracts/Staker.sol#L276-L277\">Staker.sol L276-L277</a></p>\n<p>Recommend revisiting comment and code to sync them by fixing the comment or the code whichever is incorrect.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/89#issuecomment-897516642\">JasoonS (Float) acknowledged and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Thanks - has been pointed out before. <strong>0 non-critical</strong></p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/89#issuecomment-905097568\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Per <a href=\"https://docs.code4rena.com/roles/wardens/judging-criteria#estimating-risk-tl-dr\">https://docs.code4rena.com/roles/wardens/judging-criteria#estimating-risk-tl-dr</a> - comments are a 1 (Low Risk). Agreeing with the warden here.</p>\n</blockquote>\n<h2 id=\"l-03-use-of-floating-pragma\" style=\"position:relative;\"><a href=\"#l-03-use-of-floating-pragma\" aria-label=\"l 03 use of floating pragma permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/96\">[L-03] Use of floating pragma</a></h2>\n<p><em>Submitted by JMukesh</em></p>\n<p><a href=\"https://swcregistry.io/docs/SWC-103\">https://swcregistry.io/docs/SWC-103</a></p>\n<p><code>ILendingPool.sol</code> have floating pragma and its been used in <code>YieldManger.sol</code> <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/contracts/contracts/YieldManagerAave.sol#L9\">L9</a>.</p>\n<p>Recommend using fixed solidity version</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/96#issuecomment-897529036\">JasoonS (Float) disagreed</a>:</strong></p>\n<blockquote>\n<p>We want you to have fixed versions.</p>\n<p><strong>0 non-critical</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/96#issuecomment-905099546\">0xean (judge) commented</a>:</strong>\n@JasoonS (Float) - I am not sure I understand your comment, the warden is stating that ILendingPool <em>should</em> have a fixed version.</p>\n<p>Leaving as 1 and valid for now.</p>\n</blockquote>\n<h2 id=\"l-04-prevent-reentrancy\" style=\"position:relative;\"><a href=\"#l-04-prevent-reentrancy\" aria-label=\"l 04 prevent reentrancy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/13\">[L-04] prevent reentrancy</a></h2>\n<p><em>Submitted by gpersoon, also found by hickuphh3</em></p>\n<p>If the payment token would be an ERC777 token (or another token that has callbacks), then an reentrancy attack could be tried.\nEspecially in <code>function_executeOutstandingNextPriceSettlements</code> multiple transfers are called, which could call callbacks.\nThese callbacks could go to an attacker contract which could call functions of the <code>LongShort.sol</code> contract</p>\n<p>Although I haven’t found a scenario to misuse the reentrancy its better to prevent this.\n<code>LongShort.sol</code> <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/LongShort.sol#L1035\">#L1035</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_executeOutstandingNextPriceSettlements</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">userCurrentUpdateIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">userNextPrice_currentUpdateIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk12\">user</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">userCurrentUpdateIndex</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">userCurrentUpdateIndex</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">marketUpdateIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">]) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_executeOutstandingNextPriceMints</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);        </span><span class=\"mtk3\">// transfers synth token to user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_executeOutstandingNextPriceMints</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);       </span><span class=\"mtk3\">// transfers synth token to user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_executeOutstandingNextPriceRedeems</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);  </span><span class=\"mtk3\">// transfers payment token to user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_executeOutstandingNextPriceRedeems</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);  </span><span class=\"mtk3\">// transfers payment token to user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_executeOutstandingNextPriceTokenShifts</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">true</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk11\">_executeOutstandingNextPriceTokenShifts</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">userNextPrice_currentUpdateIndex</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">][</span><span class=\"mtk12\">user</span><span class=\"mtk1\">] = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ExecuteNextPriceSettlementsUser</span><span class=\"mtk1\">(</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span></code></pre>\n<p>Recommend preventing reentrancy attacks in one of the following ways:</p>\n<ul>\n<li>make sure the payment tokens don’t have call back function / are not ERC777</li>\n<li>or add reentrancy guards to _executeOutstandingNextPriceSettlements (see <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\">ReentrancyGuard.sol</a>)</li>\n</ul>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/13#issuecomment-896048395\">JasoonS (Float) disputed</a>:</strong></p>\n<blockquote>\n<p>Very good point! We are aware of this, and will make sure of this for V2 for sure.</p>\n<p>We wrote in the readme that we will only use DAI as a payment token (there are lots of weird types of tokens that could break our system, not only tokens with hooks!)</p>\n<p>See readme: <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/README.md#L156\">https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/README.md#L156</a></p>\n<p>I now see that I didn’t mention ‘hooks’ in that comment, but it does say we will deeply analyse any potential payment token and only use DAI initially. I’ll leave this to the judges.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/13#issuecomment-905606753\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Given the readme doesn’t specifically mentions hooks, I think the warden is highlighting a good thing for the sponsor to consider in future iterations. Leaving current severity.</p>\n</blockquote>\n<h2 id=\"l-05-permanent_initial_liquidity_holder-not-100-safe\" style=\"position:relative;\"><a href=\"#l-05-permanent_initial_liquidity_holder-not-100-safe\" aria-label=\"l 05 permanent_initial_liquidity_holder not 100 safe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/15\">[L-05] <code>PERMANENT_INITIAL_LIQUIDITY_HOLDER</code> not 100% safe</a></h2>\n<p><em>Submitted by gpersoon</em></p>\n<p>The initial tokens are minted to the address <code>PERMANENT_INITIAL_LIQUIDITY_HOLDER</code>\nThe comments suggest they can never be moved from there.\nHowever <code>transferFrom</code> in <code>SyntheticToken.sol</code> allows <code>longShort</code> to move tokens from any address so also from address <code>PERMANENT_INITIAL_LIQUIDITY_HOLDER</code>.</p>\n<p>This is unlikely to happen because the current source of <code>LongShort.sol</code> doesn’t allow for this action.\nHowever <code>LongShort.sol</code> is upgradable to in theory a future version could allow this. <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/LongShort.sol#L34\">LongShort.sol L34</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk3\">/// @notice this is the address that permanently locked initial liquidity for markets is held by.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk3\">/// These tokens will never move so market can never have zero liquidity on a side.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk3\">/// @dev f10a7 spells float in hex - for fun - important part is that the private key for this address in not known.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">PERMANENT_INITIAL_LIQUIDITY_HOLDER</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0xf10A7_F10A7_f10A7_F10a7_F10A7_f10a7_F10A7_f10a7</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter\" aria-hidden=\"true\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"304\"></span><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"305\"></span><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_seedMarketInitially</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initialMarketSeedForEachMarketSide</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"306\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"307\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">ISyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">latestMarket</span><span class=\"mtk1\">][</span><span class=\"mtk12\">true</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PERMANENT_INITIAL_LIQUIDITY_HOLDER</span><span class=\"mtk1\">,</span><span class=\"mtk12\">initialMarketSeedForEachMarketSide</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-gutter-pad\"></span><span class=\"grvsc-gutter grvsc-line-number\" aria-hidden=\"true\" data-content=\"308\"></span><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">ISyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">latestMarket</span><span class=\"mtk1\">][</span><span class=\"mtk4\">false</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PERMANENT_INITIAL_LIQUIDITY_HOLDER</span><span class=\"mtk1\">, </span><span class=\"mtk12\">initialMarketSeedForEachMarketSide</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/SyntheticToken.sol#L91\"><code>SyntheticToken.sol</code> L91</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">longShort</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">longShort</span><span class=\"mtk1\">) {   </span><span class=\"mtk3\">// sender could be any address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">super</span><span class=\"mtk1\">.</span><span class=\"mtk11\">_transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">super</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">recipient</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Recommend accepting the risk and document this in the contract. Or, update <code>transferFrom</code> to contain the following:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">recipient</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">longShort</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">longShort</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">sender</span><span class=\"mtk1\">!=</span><span class=\"mtk12\">PERMANENT_INITIAL_LIQUIDITY_HOLDER</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/15#issuecomment-896064211\">JasoonS (Float) acknowledged and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>Note, even if we were to remove this initial liquidity there is no issue as long as the market has users on both sides.</p>\n<p>This initial liquidity is solely for the first few minutes (or however long) of the market when there is no external users yet.</p>\n<p>If the market ever has zero users (zero additional liquidity) and we were to somehow force those last tokens to be redeemed, ‘zero users’ would care that the market has collapsed and is non-functional anymore.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/15#issuecomment-896732884\">moose-code (Float) commented</a>:</strong></p>\n<blockquote>\n<p>Interesting point but its way too far fetched we upgrade the smart contract to include a function that would ever call transferFrom from the very awkward address 0xf10A7<em>F10A7</em>f10A7<em>F10a7</em>F10A7<em>f10a7</em>F10A7_f10a7</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/15#issuecomment-898625400\">JasoonS (Float) commented</a>:</strong></p>\n<blockquote>\n<p>tldr: there are far worse things that we could upgrade into the contracts than this where there is basically nothing to gain anyway.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/15#issuecomment-905618881\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Leaving as 1, sponsor acknowledges it’s an edge case that could cause non functioning markets which certainly qualifies as “state handling” in</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">1 — Low: Low: Assets are not at risk. State handling, function incorrect as to spec, issues with comments.</span></span></code></pre>\n</blockquote>\n<h2 id=\"l-06-stakersol-updating-kvalue-requires-interpolation-with-initial-timestamp\" style=\"position:relative;\"><a href=\"#l-06-stakersol-updating-kvalue-requires-interpolation-with-initial-timestamp\" aria-label=\"l 06 stakersol updating kvalue requires interpolation with initial timestamp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/69\">[L-06] Staker.sol: Updating <code>kValue</code> requires interpolation with initial timestamp</a></h2>\n<p><em>Submitted by hickuphh3</em></p>\n<p>Updating a <code>kValue</code> of a market requires interpolation against the initial timestamp, which can be a hassle and might lead to a wrong value set from what is expected.</p>\n<p>Consider the following scenario:</p>\n<ul>\n<li>Initially set <code>kValue = 2e18</code>, <code>kPeriod = 2592000</code> (30 days)</li>\n<li>After 15 days, would like to refresh the market incentive (start again with <code>kValue = 2e18</code>), lasting another 30 days.</li>\n</ul>\n<p>In the current implementation, the admin would call <code>_changeMarketLaunchIncentiveParameters()</code> with the following inputs:</p>\n<ul>\n<li><code>period = 3888000</code> (45 days)</li>\n<li>\n<p><code>kValue</code> needs to be worked backwards from the formula</p>\n<p><code>kInitialMultiplier - (((kInitialMultiplier - 1e18) * (block.timestamp - initialTimestamp)) / kPeriod)</code>. To achieve the desired effect, we would get <code>kValue = 25e17</code> (formula returns 2e18 after 15 days with kPeriod = 45 days).</p>\n</li>\n</ul>\n<p>This isn’t immediately intuitive and could lead to mistakes.</p>\n<p>Recommend that Instead of calculating from <code>initialTimestamp</code> (when <code>addNewStakingFund()</code> was called), calculate from when the market incentives were last updated. This would require a new mapping to store last updated timestamps of market incentives.</p>\n<p>For example, using the scenario above, refreshing the market incentive would mean using inputs <code>period = 2592000</code> (30 days) with <code>kValue = 2e18</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// marketIndex =&gt; timestamp of updated market launch incentive params</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">mapping</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketLaunchIncentive_update_timestamps</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_changeMarketLaunchIncentiveParameters</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">period</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initialMultiplier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">initialMultiplier</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;marketLaunchIncentiveMultiplier must be &gt;= 1e18&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">marketLaunchIncentive_period</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">period</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">marketLaunchIncentive_multipliers</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">initialMultiplier</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">marketLaunchIncentive_update_timestamps</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_getKValue</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Parameters controlling the float issuance multiplier.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">kPeriod</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">kInitialMultiplier</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">_getMarketLaunchIncentiveParameters</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Sanity check - under normal circumstances, the multipliers should</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// *never* be set to a value &lt; 1e18, as there are guards against this.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">assert</span><span class=\"mtk1\">(</span><span class=\"mtk12\">kInitialMultiplier</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// currently: uint256 initialTimestamp = accumulativeFloatPerSyntheticTokenSnapshots[marketIndex][0].timestamp;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk3\">// changed to take from last updated timestamp instead of initial timestamp</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initialTimestamp</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">marketLaunchIncentive_update_timestamps</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">initialTimestamp</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">kPeriod</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">kInitialMultiplier</span><span class=\"mtk1\"> - (((</span><span class=\"mtk12\">kInitialMultiplier</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">) * (</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">initialTimestamp</span><span class=\"mtk1\">)) / </span><span class=\"mtk12\">kPeriod</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/69#issuecomment-897445040\">JasoonS (Float) confirmed</a>:</strong></p>\n<blockquote>\n<p>You are right. we should probably just delete the external <code>changeMarketLaunchIncentiveParameters</code> function so that it can only be set once.</p>\n</blockquote>\n<h2 id=\"l-07-tokenfactorysol-defaultadminrole-has-wrong-value-\" style=\"position:relative;\"><a href=\"#l-07-tokenfactorysol-defaultadminrole-has-wrong-value-\" aria-label=\"l 07 tokenfactorysol defaultadminrole has wrong value  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/72\">[L-07] TokenFactory.sol: DEFAULT<em>ADMIN</em>ROLE has wrong value </a></h2>\n<p><em>Submitted by hickuphh3</em></p>\n<p><code>TokenFactory.sol</code> defines <code>DEFAULT_ADMIN_ROLE = keccak256(\"DEFAULT_ADMIN_ROLE\");</code>, but OpenZeppelin’s <code>AccessControl.sol</code> defines <code>DEFAULT_ADMIN_ROLE = 0x00</code>, so that by default, all other roles defined will have their admin role to be <code>DEFAULT_ADMIN_ROLE</code>.</p>\n<p>This makes the following lines erroneous:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Give minter roles</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">SyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">grantRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">DEFAULT_ADMIN_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">longShort</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">SyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">grantRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">MINTER_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">longShort</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">SyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">grantRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PAUSER_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">longShort</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Revoke roles</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">SyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">revokeRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">DEFAULT_ADMIN_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">SyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">revokeRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">MINTER_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">SyntheticToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">syntheticToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">revokeRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PAUSER_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<p>Due to how <code>grantRole()</code> and <code>revokeRole()</code> works, the lines above will not revert. However, note that <code>TokenFactory</code> will have <code>DEFAULT_ADMIN_ROLE (0x00)</code> instead of <code>LongShort</code>. This by itself doesn’t seem to have any adverse effects, since <code>TokenFactory</code> doesn’t do anything else apart from creating new synthetic tokens.</p>\n<p>Nonetheless, I believe that <code>DEFAULT_ADMIN_ROLE</code> was unintentionally defined as <code>keccak256(\"DEFAULT_ADMIN_ROLE\")</code>, and should be amended.</p>\n<p>The revoking role order will also have to be swapped so that <code>DEFAULT_ADMIN_ROLE</code> is revoked last.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">DEFAULT_ADMIN_ROLE</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0x00</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">createSyntheticToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">syntheticName</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">syntheticSymbol</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">staker</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isLong</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyLongShort</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">ISyntheticToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">syntheticToken</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Revoke roles</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">_syntheticToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">revokeRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">MINTER_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">_syntheticToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">revokeRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">PAUSER_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">_syntheticToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">revokeRole</span><span class=\"mtk1\">(</span><span class=\"mtk12\">DEFAULT_ADMIN_ROLE</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/72#issuecomment-897463294\">JasoonS (Float) acknowledged</a>:</strong></p>\n<blockquote>\n<p>Thanks they changed that more recently (or bad copy pasting…)</p>\n</blockquote>\n<h2 id=\"l-08-yieldmanageraavesol-wrong-branch-in-depositpaymenttoken-if-amountreservedincaseofinsufficientaaveliquidity--amount\" style=\"position:relative;\"><a href=\"#l-08-yieldmanageraavesol-wrong-branch-in-depositpaymenttoken-if-amountreservedincaseofinsufficientaaveliquidity--amount\" aria-label=\"l 08 yieldmanageraavesol wrong branch in depositpaymenttoken if amountreservedincaseofinsufficientaaveliquidity  amount permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/74\">[L-08] <code>YieldManagerAave.sol</code>: Wrong branch in <code>depositPaymentToken()</code> if <code>amountReservedInCaseOfInsufficientAaveLiquidity</code> == amount</a></h2>\n<p><em>Submitted by hickuphh3</em></p>\n<p>In the unlikely event <code>amountReservedInCaseOfInsufficientAaveLiquidity == amount</code>, the <code>else</code> case will be executed, which means <code>lendingPool.deposit()</code> is called with a value of zero. It would therefore be better to change the condition so that the <code>if</code> case is executed instead.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">depositPaymentToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">longShortOnly</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// If amountReservedInCaseOfInsufficientAaveLiquidity isn&#39;t zero, then efficiently net the difference between the amount</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// It basically always be zero besides extreme and unlikely situations with aave.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">amountReservedInCaseOfInsufficientAaveLiquidity</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t</span><span class=\"mtk3\">// instead of strictly greater than</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">amountReservedInCaseOfInsufficientAaveLiquidity</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk12\">amountReservedInCaseOfInsufficientAaveLiquidity</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">amount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// Return early, nothing to deposit into the lending pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/74#issuecomment-897465760\">JasoonS (Float) confirmed</a>:</strong></p>\n<blockquote>\n<p>Hmm, yes, the deposit function in aave will revert if zero right?</p>\n<p>Thanks for reporting.</p>\n</blockquote>\n<h2 id=\"l-09-longshort-should-not-shares-the-same-yield-manager-between-different-markets\" style=\"position:relative;\"><a href=\"#l-09-longshort-should-not-shares-the-same-yield-manager-between-different-markets\" aria-label=\"l 09 longshort should not shares the same yield manager between different markets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/48\">[L-09] <code>LongShort</code> should not shares the same Yield Manager between different markets</a></h2>\n<p><em>Submitted by jonah1005, also found by cmichel and gpersoon</em></p>\n<p><code>LongShort</code> should not shares the same Yield Manager between different markets\nThe <code>LongShort</code> contract would not stop different markets from using the same yield manager contracts. Any extra aToken in the yield manager would be considered as market incentives in function <code>distributeYieldForTreasuryAndReturnMarketAllocation</code>. Thus, using the same yield manager for different markets would break the markets and allow users to withdraw fund that doesn’t belong to them. <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/YieldManagerAave.sol#L179-L204\"><code>YieldManagerAave.sol</code> L179-L204</a></p>\n<p>Given the fluency of programming skills the dev shows, I believe they wouldn’t make this mistake on deployment. Still, I think there’s space to improve in the YieldManagerAave contract. IMHO. As it’s tightly coupled with <code>longshort</code> contract and its market logic, a initialize market function in the yield manager seems more reasonable.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/48#issuecomment-896486601\">JasoonS (Float) confirmed</a>:</strong></p>\n<blockquote>\n<p>Duplicate #10</p>\n<p>I agree there is no way I would actually make that mistake. But technically possible, so that is a fair comment.</p>\n<p>Why not have some code in the yield manager like the following (pseudo code, not tested):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">boolean</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isInitialized</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">initializeForMarket</span><span class=\"mtk1\">() </span><span class=\"mtk11\">onlyLongShort</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk12\">isInitialized</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Yield Manager is already in use&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">isInitialized</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">true</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>And that function gets called by long short.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/48#issuecomment-897666556\">DenhamPreen (Float) resolved</a>:</strong></p>\n<blockquote>\n<p><a href=\"https://github.com/Float-Capital/monorepo/pull/1139\">https://github.com/Float-Capital/monorepo/pull/1139</a></p>\n</blockquote>\n<h2 id=\"l-10-the-address-of-aave-lendingpool-may-change\" style=\"position:relative;\"><a href=\"#l-10-the-address-of-aave-lendingpool-may-change\" aria-label=\"l 10 the address of aave lendingpool may change permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/99\">[L-10] The address of Aave <code>lendingPool</code> may change</a></h2>\n<p><em>Submitted by pauliax</em></p>\n<p>Contract <code>YieldManagerAave</code> caches <code>lendingPool</code>, however, in theory, it is possible that the implementation may change (see <a href=\"https://github.com/aave/aave-protocol/blob/4b4545fb583fd4f400507b10f3c3114f45b8a037/contracts/configuration/LendingPoolAddressesProvider.sol#L58-L65\">L58-L65</a> of Aave’s  <code>LendingPoolAddressesProvider.sol</code>). I am not sure how likely in practice is that but a common solution that I see in other protocols that integrate with Aave is querying the <code>lendingPool</code> on the go (of course then you also need to handle the change in approvals).</p>\n<p>An example solution you can see <a href=\"https://github.com/code-423n4/2021-07-sherlock/blob/d9c610d2c3e98a412164160a787566818debeae4/contracts/strategies/AaveV2.sol#L63-L65\">here</a>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/99#issuecomment-897562485\">JasoonS (Float) sponsor</a>:</strong></p>\n<blockquote>\n<p>Thanks</p>\n</blockquote>\n<h2 id=\"l-11-confusing-comments\" style=\"position:relative;\"><a href=\"#l-11-confusing-comments\" aria-label=\"l 11 confusing comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/12\">[L-11] confusing comments</a></h2>\n<p><em>Submitted by gpersoon, also found by 0xImpostor</em></p>\n<p>I’ve seen comments which are confusing:\n<code>~10^31 or 10 Trillion (10^13)</code> ==> probably should be 2^31\n<code>x * 5e17 ==</code>(x * 10e18) / 2`   ==> probably should be 1e18/2</p>\n<p>// <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/Staker.sol#L19\">https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/Staker.sol#L19</a>\n// 2^52 ~= 4.5e15\n// With an exponent of 5, the largest total liquidity possible in a market (to avoid integer overflow on exponentiation) is ~10^31 or 10 Trillion (10^13)</p>\n<p>//<a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/Staker.sol#L480\">https://github.com/code-423n4/2021-08-floatcapital/blob/main/contracts/contracts/Staker.sol#L480</a>\n// NOTE: <code>x * 5e17</code> == <code>(x * 10e18) / 2</code></p>\n<p>Recommend double checking the comments.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/12#issuecomment-896042626\">JasoonS (Float) confirmed</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p> ~10^31 or 10 Trillion (10^13) ==> probably should be 2^31</p>\n</blockquote>\n<p>This is just an approximation to justify why the values we chose are safe. Assuming a maximum of 10 Trillion DAI (very very conservative upper estimate to market size), then that would be 10^31 DAI decimal units (so not 2^31). Can clarify this, thanks!</p>\n<blockquote>\n<p> x * 5e17==(x * 10e18) / 2` ==> probably should be 1e18/2</p>\n</blockquote>\n<p>Yes, we picked this one up, it should be 1e18 :)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/12#issuecomment-905635116\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Based on C4’s documentation this is a 1</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">1 — Low: Low: Assets are not at risk. State handling, function incorrect as to spec, issues with comments.</span></span></code></pre>\n</blockquote>\n<h2 id=\"l-12-docstring\" style=\"position:relative;\"><a href=\"#l-12-docstring\" aria-label=\"l 12 docstring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/27\">[L-12] Docstring</a></h2>\n<p><em>Submitted by evertkors, also found by loop</em></p>\n<p>A lot of docstrings for <code>marketIndex</code> are @param marketIndex An int32 which uniquely identifies a market. but it is a <code>uint32</code> not an <code>int32</code></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/27#issuecomment-905637078\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>based on  <a href=\"https://docs.code4rena.com/roles/wardens/judging-criteria#estimating-risk-tl-dr\">https://docs.code4rena.com/roles/wardens/judging-criteria#estimating-risk-tl-dr</a> upgrading this to 1</p>\n</blockquote>\n<h2 id=\"l-13-possibly-not-all-synths-can-be-withdrawn\" style=\"position:relative;\"><a href=\"#l-13-possibly-not-all-synths-can-be-withdrawn\" aria-label=\"l 13 possibly not all synths can be withdrawn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/129\">[L-13] Possibly not all synths can be withdrawn</a></h2>\n<p><em>Submitted by cmichel</em></p>\n<p>The <code>LongShort._handleTotalPaymentTokenValueChangeForMarketWithYieldManager</code> function assumes that the <code>YieldManager</code> indeed withdraws all of the desired payment tokens, but it could be that they are currently lent out at Aave.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// NB there will be issues here if not enough liquidity exists to withdraw</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Boolean should be returned from yield manager and think how to appropriately handle this</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">IYieldManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">yieldManagers</span><span class=\"mtk1\">[</span><span class=\"mtk12\">marketIndex</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">removePaymentTokenFromMarket</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(-</span><span class=\"mtk12\">totalPaymentTokenValueChangeForMarket</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Recommend trying to withdraw these tokens will then fail.</p>\n<blockquote>\n<p>Boolean should be returned from yield manager and think how to appropriately handle this 😁</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/129#issuecomment-897566013\">JasoonS (Float) disputed</a>:</strong></p>\n<blockquote>\n<p>That happens on the user level, they can just try again later (our UI will give a good message).</p>\n<p>It was designed like this.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/129#issuecomment-906014323\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>based on the incorrect comment in the code I am going to leave as a 1 (per - <a href=\"https://docs.code4rena.com/roles/wardens/judging-criteria#estimating-risk-tl-dr\">https://docs.code4rena.com/roles/wardens/judging-criteria#estimating-risk-tl-dr</a>)</p>\n<p>but it does look like the system is designed to handle this scenario regardless of the boolean returned (or not being returned)</p>\n</blockquote>\n<h2 id=\"l-14-protocol-requires-a-running-bot-in-order-to-make-sure-trades-are-actually-executed\" style=\"position:relative;\"><a href=\"#l-14-protocol-requires-a-running-bot-in-order-to-make-sure-trades-are-actually-executed\" aria-label=\"l 14 protocol requires a running bot in order to make sure trades are actually executed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/3\">[L-14] Protocol requires a running bot in order to make sure trades are actually executed</a></h2>\n<p><em>Submitted by tensors</em></p>\n<p>Because smart contracts need to be poked to execute, trades placed before an oracle update won’t be executed until someone else calls the function to execute queued trades. This means that a bot must run to constantly execute trades after every oracle update.</p>\n<p>If such a bot was not running, users would have an incentive to only execute their trades after a favorable oracle update. However, having a dedicated bot run by the team centralizes the project with a single failure point. The typical solution here is to create keeper incentives for the protocol.</p>\n<p>Recommend either making sure the team has a bot running or preferably create incentives for other users to constantly keep the queued orders executing.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/3#issuecomment-895991761\">JasoonS (Float) disputed</a>:</strong></p>\n<blockquote>\n<p><strong>0 - non-critical</strong></p>\n<p>In the worst case of the bot going down, no vulnerabilities open up.</p>\n<p>The only issue that arises is that the price won’t be tracked as accurately during those periods (but it will still track it, just not as accurately).</p>\n<p>The protocol allows anyone to call an update, and any user interaction (non-update interaction) will also call the update if an update is due.</p>\n<blockquote>\n<p>If such a bot was not running, users would have an incentive to only execute their trades after a favorable oracle update.</p>\n</blockquote>\n<p>That is great, then the incentives are working, they cannot do better than a fair price update which is ‘fair’ in my opinion.</p>\n<p>Indeed:\nWe have been in talks with the chainlink keeprs team to be the first project to use them when they launch on polygon. We should have mentioned this in the README. Until then we have built a robust bot.</p>\n<p>Note, this bot is for UX, not to patch up a vulnerability.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/3#issuecomment-896713143\">moose-code (Float) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with @JasoonS (Float) . The bot failing opens no vulnerabilities, the synthetics may just less closely track the underlying if no contract interactions are present.</p>\n<p>Given rational markets with actors on both sides (long and short), and given it will always be beneficial for one side to execute the update to capitalize on the movement, its safe to assume that in a rational market the updateSystemState in every case should be called by at least one participant, meaning theoretically a bot isn’t even necessary.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/3#issuecomment-896722256\">Stentonian commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>trades placed before an oracle update won’t be executed until someone else calls the function to execute queued trades.</p>\n</blockquote>\n<p>What function is this? There are multiple update functions so it’s not clear which one the warden is referring to. If they are referring to the function <code>_executeOutstandingNextPriceSettlements</code> (the one that they linked in the ‘Proof of concept’ section) then the warden’s statement is a non-issue. The system is designed to do exactly what the warden says. So the next statement is incorrect:</p>\n<blockquote>\n<p>This means that a bot must run to constantly execute trades after every oracle update.</p>\n</blockquote>\n<p>LongShort keeps track of which trade should happen at which price for each user, so when <code>_executeOutstandingNextPriceSettlements</code> is eventually called (no matter how many price updates have occurred since the trade request) it will use the oracle’s next price update that occurred <strong>right after the time when trade was requestd.</strong> And <code>_executeOutstandingNextPriceSettlements</code> is called before any other action is taken by the user that would require the data from the trade having completed. No need to have a bot call this function.</p>\n<p>If the warden is referring to another update function then it’s not clear which.</p>\n<blockquote>\n<p>The only issue that arises is that the price won’t be tracked as accurately during those periods (but it will still track it, just not as accurately).</p>\n</blockquote>\n<p>This is not actually mentioned by the warden in the issue description, even tho it is a real problem. So I don’t think we need to include it here. The warden is specifically pointing out <code>executeOutstandingNextPriceSettlements</code> which will never have any issues no matter if there is a bot or not.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/3#issuecomment-906322230\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>There are incentives built into the market already for users to update if the bot was to stop running.  Yes, the bot should be treated as a tier-1 service for a reasonable user experience and for the most efficient tracking, but the risk of this to the system as a whole locking user funds or allowing people to significantly and unfairly profit doesn’t seem to be there.</p>\n<p>All that being said, it is a failure point within the system but one with low risk, downgrading to 1 - Low Risk.</p>\n</blockquote>\n<h2 id=\"l-15-race-condition-risk-with-initialize-functions\" style=\"position:relative;\"><a href=\"#l-15-race-condition-risk-with-initialize-functions\" aria-label=\"l 15 race condition risk with initialize functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/82\">[L-15] Race-condition risk with initialize functions</a></h2>\n<p><em>Submitted by 0xRajeev, also found by cmichel</em></p>\n<p>Race-condition risk with initialize functions if deployment script is not robust to create and initialize contracts atomically or if factory contracts do not create and initialize appropriately.</p>\n<p>If this is not implemented correctly, an attacker can front-run to initialize contracts with their parameters. This, if noticed, will require a redeployment of contracts resulting in potential DoS and  reputational damage. See <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/contracts/contracts/LongShort.sol#L188-L193\">Short.sol L188-L193</a>, <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/contracts/contracts/FloatToken.sol#L21-L25\">FloatToken.sol L21-L25</a>, and <a href=\"https://github.com/code-423n4/2021-08-floatcapital/blob/bd419abf68e775103df6e40d8f0e8d40156c2f81/contracts/contracts/Staker.sol#L179-L186\">Staker.sol L179-L186</a>.</p>\n<p>Recommend ensuring deployment script is robust to create and initialize contracts atomically or factory contracts create and initialize appropriately.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/82#issuecomment-897490152\">JasoonS (Float) disputed</a>:</strong></p>\n<blockquote>\n<p>We use open-zeppelin scripts todo this automatically.</p>\n<p>Additionally we initialize the base implementations too to prevent any foul play by pranksters.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/82#issuecomment-906341201\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Given that the contest didn’t include the scope of the scripts and that this is a risk in the contract implementation without a factory I believe this is a valid risk even if the sponsor believes its mitigated.</p>\n</blockquote>\n<h1 id=\"non-critical-findings-25\" style=\"position:relative;\"><a href=\"#non-critical-findings-25\" aria-label=\"non critical findings 25 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (25)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/126\">[N-01] Markets cannot be initialized with payment tokens of few decimals</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/93\">[N-02] Assuming tokens are compliant with ERC20 could cause transactions to revert unexpectedly</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/140\">[N-03] Received amount of transfer-on-fee/deflationary tokens are not correctly accounted</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/86\">[N-04] Interface notations are used for abstract contracts</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/14\">[N-05] extra safety in distributeYieldForTreasuryAndReturnMarketAllocation</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/136\">[N-06] consistently use <code>msg.sender</code> or <code>_msgSender()</code>(recommended)</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/101\">[N-07] 0xf10A7<em>F10A7</em>f10A7<em>F10a7</em>F10A7<em>f10a7</em>F10A7_f10a7</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/11\">[N-08] Constant values used inline</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/138\">[N-09] emit event at stage changes</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/55\">[N-10] Index Events</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/56\">[N-11] LongShort.sol &#x26; YieldManagerAave.sol: Verify / derive input arguments</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/59\">[N-12] <code>LongShort.sol</code>: Inconsistency in _claimAndDistributeYieldThenRebalanceMarket()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/61\">[N-13] Single Source of Truth</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/62\">[N-14] Spelling Errors</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/67\">[N-15] Staker.sol: Shift event emissions to internal functions</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/68\">[N-16] Staker.sol: TODO add link in comment</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/70\">[N-17] Staker.sol: withdrawAll() does not include incoming outstanding shifts to the user</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/19\">[N-18] Multiple initialize functions</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/36\">[N-19] FloatToken would revoke stakerAddress’s permission if msg.sender == stakerAddress</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/100\">[N-20] Aave’s claimRewards returns the actual rewards claimed</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/111\">[N-21] Style issues</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/80\">[N-22] executeOutstandingNextPriceSettlementsUserMulti may exceed gas limits</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/81\">[N-23] Missing use of requireMarketExists modifier on multiple functions</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/30\">[N-24] Solution is susceptible to MEV, harming users.</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/4\">[N-25] Oracle updates can be frontrun by stakers to gain a profit</a></li>\n</ul>\n<h1 id=\"gas-optimizations-21\" style=\"position:relative;\"><a href=\"#gas-optimizations-21\" aria-label=\"gas optimizations 21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (21)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/42\">[G-01] Pass time delta into internal functions</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/63\">[G-02]\tStaker.sol: Cache <code>marketIndex</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/76\">[G-03] Caching state variables in local variables can save gas</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/79\">[G-04] Unused named returns can be removed for optimization</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/87\">[G-05] Function visibility can be changed from public to external</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/53\">[G-06] Immutable Variables</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/118\">[G-07] Gas: <code>SyntheticToken</code> does not use pausing functionality</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/26\">[G-08] Internal _withdraw, reading from storage twice.</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/17\">[G-09] slight difference between withdraw and withdrawAll</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/52\">[G-10] Drop require checks for synthetic tokens</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/54\">[G-11] Increase Solc Optimiser Runs</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/58\">[G-12] <code>LongShort.sol</code>: Cache marketUpdateIndex[marketIndex]</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/60\">[G-13] <code>LongShort.sol</code>: Some math can be unchecked in _getYieldSplit()</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/64\">[G-14] Staker.sol: Cache shift amounts</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/66\">[G-15] Staker.sol: Redundant zero intialization for accumulativeFloatPerSyntheticTokenSnapshots</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/71\">[G-16] TokenFactory.sol: Appropriate type declaration to avoid numerous casting</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/97\">[G-17] [Optimization] Cache length in the loop</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/50\">[G-18] Appropriate storage variable type declaration to save on casting</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/106\">[G-19] Cache storage access and duplicate calculations</a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/110\">[G-20] treasury state variable in <code>LongShort</code></a></li>\n<li><a href=\"https://github.com/code-423n4/2021-08-floatcapital-findings/issues/107\">[G-21] onlyValidMarket is never used</a></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings\">High Risk Findings</a></p>\n<ul>\n<li><a href=\"#h-01-copy-paste-error-in-_batchconfirmoutstandingpendingactions\">[H-01] copy paste error in <code>_batchConfirmOutstandingPendingActions</code></a></li>\n<li><a href=\"#h-02-2-variables-not-indexed-by-marketindex\">[H-02] 2 variables not indexed by <code>marketIndex</code></a></li>\n<li><a href=\"#h-03-users-could-shift-tokens-on-staker-with-more-than-he-has-staked\">[H-03] Users could shift tokens on <code>Staker</code> with more than he has staked</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-6\">Medium Risk Findings (6)</a></p>\n<ul>\n<li><a href=\"#m-01-latestmarket-used-where-marketindex-should-have-been-used\">[M-01] <code>latestMarket</code> used where <code>marketIndex</code> should have been used</a></li>\n<li><a href=\"#m-02-incorrect-balance-computed-in-getusersconfirmedbutnotsettledsynthbalance\">[M-02] Incorrect balance computed in <code>getUsersConfirmedButNotSettledSynthBalance()</code></a></li>\n<li><a href=\"#m-03-missing-eventstimelocks-for-owneradmin-only-functions-that-change-critical-parameters\">[M-03] Missing events/timelocks for owner/admin only functions that change critical parameters</a></li>\n<li><a href=\"#m-04-stakersol-wrong-values-returned-in-edge-cases-of-_calculatefloatpersecond\">[M-04] Staker.sol: Wrong values returned in edge cases of <code>_calculateFloatPerSecond()</code></a></li>\n<li><a href=\"#m-05-wrong-aave-usage-of-claimrewards\">[M-05] Wrong aave usage of <code>claimRewards</code></a></li>\n<li><a href=\"#m-06-prevent-markets-getting-stuck-when-prices-dont-move\">[M-06] Prevent markets getting stuck when prices don’t move</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-findings-15\">Low Risk Findings (15)</a></p>\n<ul>\n<li><a href=\"#l-01-missing-input-validation-on-many-functions-throughout-the-code\">[L-01] Missing input validation on many functions throughout the code</a></li>\n<li><a href=\"#l-02-comment-code-mismatch-for-_balanceincentivecurve_exponent-threshold\">[L-02] Comment-code mismatch for <code>_balanceIncentiveCurve_exponent</code> threshold</a></li>\n<li><a href=\"#l-03-use-of-floating-pragma\">[L-03] Use of floating pragma</a></li>\n<li><a href=\"#l-04-prevent-reentrancy\">[L-04] prevent reentrancy</a></li>\n<li><a href=\"#l-05-permanent_initial_liquidity_holder-not-100-safe\">[L-05] <code>PERMANENT_INITIAL_LIQUIDITY_HOLDER</code> not 100% safe</a></li>\n<li><a href=\"#l-06-stakersol-updating-kvalue-requires-interpolation-with-initial-timestamp\">[L-06] Staker.sol: Updating <code>kValue</code> requires interpolation with initial timestamp</a></li>\n<li><a href=\"#l-07-tokenfactorysol-defaultadminrole-has-wrong-value-\">[L-07] TokenFactory.sol: DEFAULT<em>ADMIN</em>ROLE has wrong value </a></li>\n<li><a href=\"#l-08-yieldmanageraavesol-wrong-branch-in-depositpaymenttoken-if-amountreservedincaseofinsufficientaaveliquidity--amount\">[L-08] <code>YieldManagerAave.sol</code>: Wrong branch in <code>depositPaymentToken()</code> if <code>amountReservedInCaseOfInsufficientAaveLiquidity</code> == amount</a></li>\n<li><a href=\"#l-09-longshort-should-not-shares-the-same-yield-manager-between-different-markets\">[L-09] <code>LongShort</code> should not shares the same Yield Manager between different markets</a></li>\n<li><a href=\"#l-10-the-address-of-aave-lendingpool-may-change\">[L-10] The address of Aave <code>lendingPool</code> may change</a></li>\n<li><a href=\"#l-11-confusing-comments\">[L-11] confusing comments</a></li>\n<li><a href=\"#l-12-docstring\">[L-12] Docstring</a></li>\n<li><a href=\"#l-13-possibly-not-all-synths-can-be-withdrawn\">[L-13] Possibly not all synths can be withdrawn</a></li>\n<li><a href=\"#l-14-protocol-requires-a-running-bot-in-order-to-make-sure-trades-are-actually-executed\">[L-14] Protocol requires a running bot in order to make sure trades are actually executed</a></li>\n<li><a href=\"#l-15-race-condition-risk-with-initialize-functions\">[L-15] Race-condition risk with initialize functions</a></li>\n</ul>\n</li>\n<li><a href=\"#non-critical-findings-25\">Non-Critical Findings (25)</a></li>\n<li><a href=\"#gas-optimizations-21\">Gas Optimizations (21)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}