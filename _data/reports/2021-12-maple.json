{
  "circa": {
    "title": "Maple Finance contest",
    "sponsor": "Maple Finance",
    "slug": "2021-12-maple",
    "date": "2022-01-05",
    "findings": "https://github.com/code-423n4/2021-12-maple-findings/issues",
    "contest": 55
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Maple Finance smart contract system written in Solidity. The code contest took place between December 2—December 8 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>13 Wardens contributed reports to the Maple Finance contest:</p>\n<ol>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li>robee</li>\n<li>hyh</li>\n<li>jayjonah8</li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/Meta0xNull\">Meta0xNull</a></li>\n<li><a href=\"https://twitter.com/GiveMeTestEther\">GiveMeTestEther</a></li>\n<li><a href=\"https://twitter.com/wuwe19\">wuwe1</a></li>\n<li>saian</li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/SolidityDev\">pauliax</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/money_lego\">moneylegobatman</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 8 unique vulnerabilities and 25 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 1 received a risk rating in the category of HIGH severity, 2 received a risk rating in the category of MEDIUM severity, and 5 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 7 non-critical recommendations and 10 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review is linked in the <a href=\"https://github.com/code-423n4/2021-12-maple#audit-scope\">C4 Maple Finance contest repository README</a>.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-1\" style=\"position:relative;\"><a href=\"#high-risk-findings-1\" aria-label=\"high risk findings 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (1)</h1>\n<h2 id=\"h-01-makepayment-lack-of-access-control-allows-malicious-lender-to-retrieve-a-large-portion-of-the-funds-earlier-making-the-borrower-suffer-fund-loss\" style=\"position:relative;\"><a href=\"#h-01-makepayment-lack-of-access-control-allows-malicious-lender-to-retrieve-a-large-portion-of-the-funds-earlier-making-the-borrower-suffer-fund-loss\" aria-label=\"h 01 makepayment lack of access control allows malicious lender to retrieve a large portion of the funds earlier making the borrower suffer fund loss permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/56\">[H-01] <code>makePayment()</code> Lack of access control allows malicious <code>lender</code> to retrieve a large portion of the funds earlier, making the borrower suffer fund loss</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/maple-labs/loan/blob/9684bcef06481e493d060974b1777a4517c4e792/contracts/MapleLoan.sol#L86-L93\"><code>MapleLoan.sol</code> L86-L93</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">makePayment</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) || </span><span class=\"mtk12\">ERC20Helper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_fundsAsset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;ML:MP:TRANSFER_FROM_FAILED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ( </span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\"> ) = </span><span class=\"mtk11\">_makePayment</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PaymentMade</span><span class=\"mtk1\">(</span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>The current implementation allows anyone to call <code>makePayment()</code> and repay the loan with <code>_drawableFunds</code>.</p>\n<p>This makes it possible for a malicious <code>lender</code> to call <code>makePayment()</code> multiple times right after <code>fundLoan()</code> and retrieve most of the funds back immediately, while then <code>borrower</code> must continue to make payments or lose the <code>collateral</code>.</p>\n<h5 id=\"poc\" style=\"position:relative;\"><a href=\"#poc\" aria-label=\"poc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PoC</h5>\n<p>Given:</p>\n<ul>\n<li><code>_collateralRequired</code> = 1 BTC</li>\n<li><code>_principalRequested</code> = 12,000 USDC</li>\n<li><code>_paymentInterval</code> = 30 day</li>\n<li><code>_paymentsRemaining</code> = 12</li>\n<li><code>_gracePeriod</code> = 1 day</li>\n<li><code>interestRate_</code> = 2e17</li>\n<li>The borrower calls <code>postCollateral()</code> and added <code>1 BTC</code> as <code>_collateralAsset</code>;</li>\n<li>The lender calls <code>fundLoan()</code> and added <code>12,000 USDC</code> as  <code>_fundsAsset</code>;</li>\n<li>The lender calls <code>makePayment()</code> 11 times, then:</li>\n<li><code>_drawableFunds</code> = 96</li>\n<li><code>_claimableFunds</code> = 11903</li>\n<li><code>_principal</code> = 1553</li>\n<li>The lender calls <code>_claimFunds()</code> get 11,903 USDC of <code>_fundsAsset</code> back;</li>\n</ul>\n<p>Now, for the borrower <code>1,579 USDC</code> is due, but only <code>96 USDC</code> can be used. The borrower is now forced to pay the interests for the funds that never be used or lose the collateral.</p>\n<h5 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">makePayment</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) || </span><span class=\"mtk12\">ERC20Helper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_fundsAsset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;ML:MP:TRANSFER_FROM_FAILED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">_borrower</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;ML:DF:NOT_BORROWER&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ( </span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\"> ) = </span><span class=\"mtk11\">_makePayment</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">PaymentMade</span><span class=\"mtk1\">(</span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/56#issuecomment-989565363\">deluca-mike (Maple) confirmed</a>:</strong></p>\n<blockquote>\n<p>Good catch. However, we do want accounts other than the borrower to make payments (this is actually functionality that our current borrowers use), so instead of this fix, we may enforce that a payment can only be made some window of time before it is due, to prevent anyone from prematurely paying it down.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/56#issuecomment-997433285\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great find, with a POC, deserves a severity of high as it may incur in funds lost for the borrower. The sponsor has acknowledged and mitigated the issue.</p>\n</blockquote>\n<h1 id=\"medium-risk-findings-2\" style=\"position:relative;\"><a href=\"#medium-risk-findings-2\" aria-label=\"medium risk findings 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (2)</h1>\n<h2 id=\"m-01-anyone-can-call-closeloan-to-close-the-loan\" style=\"position:relative;\"><a href=\"#m-01-anyone-can-call-closeloan-to-close-the-loan\" aria-label=\"m 01 anyone can call closeloan to close the loan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/46\">[M-01] Anyone can call <code>closeLoan()</code> to close the loan</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/maple-labs/loan/blob/9684bcef06481e493d060974b1777a4517c4e792/contracts/MapleLoan.sol#L56-L63\"><code>MapleLoan.sol</code> L56-L63</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">closeLoan</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) || </span><span class=\"mtk12\">ERC20Helper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_fundsAsset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;ML:CL:TRANSFER_FROM_FAILED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ( </span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\"> ) = </span><span class=\"mtk11\">_closeLoan</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LoanClosed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Based on the context, we believe that the <code>closeLoan()</code> should only be called by the <code>borrower</code>. However, the current implementation allows anyone to call <code>closeLoan()</code> anytime after <code>fundLoan()</code>.</p>\n<p>If there is no <code>earlyFee</code>, this enables a griefing attack, causing the <code>borrower</code> and <code>lender</code> to abandon this contract and redo everything which costs more gas.</p>\n<p>If a platform fee exits, the lender will also suffer fund loss from the platform fee charged in <code>fundLoan()</code>.</p>\n<h5 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Change to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">closeLoan</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) || </span><span class=\"mtk12\">ERC20Helper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_fundsAsset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;ML:CL:TRANSFER_FROM_FAILED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">_borrower</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;ML:DF:NOT_BORROWER&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ( </span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\"> ) = </span><span class=\"mtk11\">_closeLoan</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LoanClosed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">principal_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">interest_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/46#issuecomment-989556034\">deluca-mike (Maple) confirmed</a>:</strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/46#issuecomment-997429287\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great find, missing authorization.</p>\n</blockquote>\n<h2 id=\"m-02-unsafe-implementation-of-fundloan-allows-attacker-to-steal-collateral-from-an-unfunded-loan\" style=\"position:relative;\"><a href=\"#m-02-unsafe-implementation-of-fundloan-allows-attacker-to-steal-collateral-from-an-unfunded-loan\" aria-label=\"m 02 unsafe implementation of fundloan allows attacker to steal collateral from an unfunded loan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/47\">[M-02] Unsafe implementation of <code>fundLoan()</code> allows attacker to steal collateral from an unfunded loan</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/maple-labs/loan/blob/9684bcef06481e493d060974b1777a4517c4e792/contracts/MapleLoanInternals.sol#L257-L273\"><code>MapleLoanInternals.sol</code> L257-L273</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">treasuryFee</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">fundsLent_</span><span class=\"mtk1\"> * </span><span class=\"mtk11\">ILenderLike</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender_</span><span class=\"mtk1\">).</span><span class=\"mtk11\">treasuryFee</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">_paymentInterval</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_paymentsRemaining</span><span class=\"mtk1\">) / </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">365</span><span class=\"mtk1\"> </span><span class=\"mtk12\">days</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">10_000</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Transfer delegate fee, if any, to the pool delegate, and decrement drawable funds.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">delegateFee</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">fundsLent_</span><span class=\"mtk1\"> * </span><span class=\"mtk11\">ILenderLike</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender_</span><span class=\"mtk1\">).</span><span class=\"mtk11\">investorFee</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">_paymentInterval</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_paymentsRemaining</span><span class=\"mtk1\">) / </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">365</span><span class=\"mtk1\"> </span><span class=\"mtk12\">days</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">10_000</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// Drawable funds is the amount funded, minus any fees.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_drawableFunds</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">fundsLent_</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">treasuryFee</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">delegateFee</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">treasuryFee</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) || </span><span class=\"mtk12\">ERC20Helper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_fundsAsset</span><span class=\"mtk1\">, </span><span class=\"mtk11\">ILenderLike</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender_</span><span class=\"mtk1\">).</span><span class=\"mtk11\">mapleTreasury</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">treasuryFee</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;MLI:FL:T_TRANSFER_FAILED&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">delegateFee</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) || </span><span class=\"mtk12\">ERC20Helper</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_fundsAsset</span><span class=\"mtk1\">, </span><span class=\"mtk11\">ILenderLike</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lender_</span><span class=\"mtk1\">).</span><span class=\"mtk11\">poolDelegate</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">delegateFee</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">&quot;MLI:FL:PD_TRANSFER_FAILED&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span></code></pre>\n<p>In the current implementation, <code>mapleTreasury</code>, <code>poolDelegate</code> and <code>treasuryFee</code> are taken from user input <code>lender_</code>, which can be faked by setting up a contract with <code>ILenderLike</code> interfaces.</p>\n<p>This allows the attacker to set very high fees, making <code>_drawableFunds</code> near 0.</p>\n<p>Since <code>mapleTreasury</code> and <code>poolDelegate</code> are also read from <code>lender_</code>, <code>treasuryFee</code> and <code>investorFee</code> can be retrieved back to the attacker.</p>\n<p>As a result, the borrower won’t get any <code>_drawableFunds</code> while also being unable to remove collateral.</p>\n<h5 id=\"poc-1\" style=\"position:relative;\"><a href=\"#poc-1\" aria-label=\"poc 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PoC</h5>\n<p>Given:</p>\n<ul>\n<li><code>_collateralRequired</code> = 10 BTC</li>\n<li><code>_principalRequested</code> = 1,000,000 USDC</li>\n<li><code>_paymentInterval</code> = 1 day</li>\n<li><code>_paymentsRemaining</code> = 10</li>\n<li><code>_gracePeriod</code> = 1 day</li>\n<li>Alice (borrower) calls <code>postCollateral()</code> and added <code>10 BTC</code> as <code>_collateralAsset</code>;</li>\n<li>The attacker calls <code>fundLoan()</code> by taking <code>1,000,000 USDC</code> of flashloan and using a fake <code>lender</code>contract;</li>\n<li>Alice calls <code>drawdownFunds()</code> with any amount > 0 will fail;</li>\n<li>Alice calls <code>removeCollateral()</code> with any amount > 0 will get “MLI:DF:INSUFFICIENT_COLLATERAL” error;</li>\n<li>Unless Alice make payment (which is meaningless), after 2 day, the attacker can call <code>repossess()</code> and get <code>10 BTC</code>.</li>\n</ul>\n<h5 id=\"recommendation-2\" style=\"position:relative;\"><a href=\"#recommendation-2\" aria-label=\"recommendation 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h5>\n<p>Consider reading <code>treasuryFee</code>, <code>investorFee</code>, <code>mapleTreasury</code>, <code>poolDelegate</code> from an authoritative source instead.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/47#issuecomment-989304172\">lucas-manuel (Maple) confirmed and disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>We would consider this medium risk, since a borrower would never post collateral before a loan is funded. We can enforce this on the smart contracts level though by adding a require to the <code>postCollateral</code> function to assert that the principal amount is greater than zero.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/47#issuecomment-997435819\">pauliax (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Great find. As per the sponsor’s recommendation, this scenario is not very likely, so I am marking this issue as of medium severity.</p>\n</blockquote>\n<h1 id=\"low-risk-findings-5\" style=\"position:relative;\"><a href=\"#low-risk-findings-5\" aria-label=\"low risk findings 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (5)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/11\">[L-01] Must approve 0 first</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/33\">[L-02] Same implementation can be registerd for several versions</a> <em>Submitted by cmichel</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/45\">[L-03] Insufficient input validation</a> <em>Submitted by WatchPug, also found by hyh and jayjonah8</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/67\">[L-04] Fund stuck in <code>Liquidator</code> if <code>stopLiquidation</code> is called </a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/35\">[L-05] Functionality of liquidation strategies can be broken</a> <em>Submitted by cmichel</em></li>\n</ul>\n<h1 id=\"non-critical-findings-7\" style=\"position:relative;\"><a href=\"#non-critical-findings-7\" aria-label=\"non critical findings 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (7)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/10\">[N-01] Open TODOs</a> <em>Submitted by robee, also found by Meta0xNull</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/22\">[N-02] Typos</a> <em>Submitted by wuwe1</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/23\">[N-03] Floating pragma</a> <em>Submitted by saian, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/52\">[N-04] Unchecked return value for <code>ERC20.approve</code> call</a> <em>Submitted by WatchPug, also found by defsec and robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/72\">[N-05] IsContract Function Usage</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/57\">[N-06] Consider adding storage gaps to proxied contracts</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/25\">[N-07] Function poolDelegate does not have a named return (DebtLocker.sol)</a> <em>Submitted by ye0lde</em></li>\n</ul>\n<h1 id=\"gas-optimizations-10\" style=\"position:relative;\"><a href=\"#gas-optimizations-10\" aria-label=\"gas optimizations 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (10)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/24\">[G-01] ”> 0” is less efficient than “!= 0” for unsigned integers</a> <em>Submitted by ye0lde, also found by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/3\">[G-02] Short the following require messages</a> <em>Submitted by robee, also found by Meta0xNull and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/50\">[G-03] Adding unchecked directive can save gas</a> <em>Submitted by WatchPug, also found by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/4\">[G-04] Storage double reading. Could save SLOAD</a> <em>Submitted by robee, also found by GiveMeTestEther, hyh, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/7\">[G-05] State variables that could be set immutable</a> <em>Submitted by robee, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/55\">[G-06] Gas Optimization: Use constant instead of block.timestamp</a> <em>Submitted by gzeon</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/62\">[G-07] Cache external call result in the stack can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/64\">[G-08] <code>Liquidator.sol#_locked</code> Switching between 1, 2 instead of true, false is more gas efficient</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/65\">[G-09] Avoid unnecessary arithmetic operations can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2021-12-maple-findings/issues/66\">[G-10] Reuse arithmetic results can save gas </a> <em>Submitted by WatchPug</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-1\">High Risk Findings (1)</a></p>\n<ul>\n<li><a href=\"#h-01-makepayment-lack-of-access-control-allows-malicious-lender-to-retrieve-a-large-portion-of-the-funds-earlier-making-the-borrower-suffer-fund-loss\">[H-01] <code>makePayment()</code> Lack of access control allows malicious <code>lender</code> to retrieve a large portion of the funds earlier, making the borrower suffer fund loss</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-2\">Medium Risk Findings (2)</a></p>\n<ul>\n<li><a href=\"#m-01-anyone-can-call-closeloan-to-close-the-loan\">[M-01] Anyone can call <code>closeLoan()</code> to close the loan</a></li>\n<li><a href=\"#m-02-unsafe-implementation-of-fundloan-allows-attacker-to-steal-collateral-from-an-unfunded-loan\">[M-02] Unsafe implementation of <code>fundLoan()</code> allows attacker to steal collateral from an unfunded loan</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-5\">Low Risk Findings (5)</a></li>\n<li><a href=\"#non-critical-findings-7\">Non-Critical Findings (7)</a></li>\n<li><a href=\"#gas-optimizations-10\">Gas Optimizations (10)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>",
  "md": "\n# Overview\n\n## About C4\n\nCode4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.\n\nA C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.\n\nDuring the code contest outlined in this document, C4 conducted an analysis of Maple Finance smart contract system written in Solidity. The code contest took place between December 2—December 8 2021.\n\n## Wardens\n\n13 Wardens contributed reports to the Maple Finance contest:\n\n1. WatchPug ([jtp](https://github.com/jack-the-pug) and [ming](https://github.com/mingwatch))\n2. [cmichel](https://twitter.com/cmichelio)\n3. [gzeon](https://twitter.com/gzeon)\n4. robee\n5. hyh\n6. jayjonah8\n7. [ye0lde](https://twitter.com/_ye0lde)\n8. [Meta0xNull](https://twitter.com/Meta0xNull)\n9. [GiveMeTestEther](https://twitter.com/GiveMeTestEther)\n10. [wuwe1](https://twitter.com/wuwe19)\n11. saian\n12. [defsec](https://twitter.com/defsec_)\n\nThis contest was judged by [pauliax](https://twitter.com/SolidityDev).\n\nFinal report assembled by [moneylegobatman](https://twitter.com/money_lego) and [CloudEllie](https://twitter.com/CloudEllie1).\n\n# Summary\n\nThe C4 analysis yielded an aggregated total of 8 unique vulnerabilities and 25 total findings. All of the issues presented here are linked back to their original finding.\n\nOf these vulnerabilities, 1 received a risk rating in the category of HIGH severity, 2 received a risk rating in the category of MEDIUM severity, and 5 received a risk rating in the category of LOW severity.\n\nC4 analysis also identified 7 non-critical recommendations and 10 gas optimizations.\n\n# Scope\n\nThe code under review is linked in the [C4 Maple Finance contest repository README](https://github.com/code-423n4/2021-12-maple#audit-scope).\n\n# Severity Criteria\n\nC4 assesses the severity of disclosed vulnerabilities according to a methodology based on [OWASP standards](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology).\n\nVulnerabilities are divided into three primary risk categories: high, medium, and low.\n\nHigh-level considerations for vulnerabilities span the following key areas when conducting assessments:\n\n- Malicious Input Handling\n- Escalation of privileges\n- Arithmetic\n- Gas use\n\nFurther information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on [the C4 website](https://code423n4.com).\n\n# High Risk Findings (1)\n\n## [[H-01] `makePayment()` Lack of access control allows malicious `lender` to retrieve a large portion of the funds earlier, making the borrower suffer fund loss](https://github.com/code-423n4/2021-12-maple-findings/issues/56)\n_Submitted by WatchPug_\n\n[`MapleLoan.sol` L86-L93](https://github.com/maple-labs/loan/blob/9684bcef06481e493d060974b1777a4517c4e792/contracts/MapleLoan.sol#L86-L93)\n\n```solidity\nfunction makePayment(uint256 amount_) external override returns (uint256 principal_, uint256 interest_) {\n    // The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.\n    require(amount_ == uint256(0) || ERC20Helper.transferFrom(_fundsAsset, msg.sender, address(this), amount_), \"ML:MP:TRANSFER_FROM_FAILED\");\n\n    ( principal_, interest_ ) = _makePayment();\n\n    emit PaymentMade(principal_, interest_);\n}\n```\n\nThe current implementation allows anyone to call `makePayment()` and repay the loan with `_drawableFunds`.\n\nThis makes it possible for a malicious `lender` to call `makePayment()` multiple times right after `fundLoan()` and retrieve most of the funds back immediately, while then `borrower` must continue to make payments or lose the `collateral`.\n\n##### PoC\n\nGiven:\n\n*   `_collateralRequired` = 1 BTC\n*   `_principalRequested` = 12,000 USDC\n*   `_paymentInterval` = 30 day\n*   `_paymentsRemaining` = 12\n*   `_gracePeriod` = 1 day\n*   `interestRate_` = 2e17\n\n1.  The borrower calls `postCollateral()` and added `1 BTC` as `_collateralAsset`;\n2.  The lender calls `fundLoan()` and added `12,000 USDC` as  `_fundsAsset`;\n3.  The lender calls `makePayment()` 11 times, then:\n\n*   `_drawableFunds` = 96\n*   `_claimableFunds` = 11903\n*   `_principal` = 1553\n\n4.  The lender calls `_claimFunds()` get 11,903 USDC of `_fundsAsset` back;\n\nNow, for the borrower `1,579 USDC` is due, but only `96 USDC` can be used. The borrower is now forced to pay the interests for the funds that never be used or lose the collateral.\n\n##### Recommendation\n\nChange to:\n\n```solidity\nfunction makePayment(uint256 amount_) external override returns (uint256 principal_, uint256 interest_) {\n    // The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.\n    require(amount_ == uint256(0) || ERC20Helper.transferFrom(_fundsAsset, msg.sender, address(this), amount_), \"ML:MP:TRANSFER_FROM_FAILED\");\n\n    require(msg.sender == _borrower, \"ML:DF:NOT_BORROWER\");\n\n    ( principal_, interest_ ) = _makePayment();\n\n    emit PaymentMade(principal_, interest_);\n}\n```\n\n**[deluca-mike (Maple) confirmed](https://github.com/code-423n4/2021-12-maple-findings/issues/56#issuecomment-989565363):**\n > Good catch. However, we do want accounts other than the borrower to make payments (this is actually functionality that our current borrowers use), so instead of this fix, we may enforce that a payment can only be made some window of time before it is due, to prevent anyone from prematurely paying it down.\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2021-12-maple-findings/issues/56#issuecomment-997433285):**\n > Great find, with a POC, deserves a severity of high as it may incur in funds lost for the borrower. The sponsor has acknowledged and mitigated the issue.\n\n\n# Medium Risk Findings (2)\n\n## [[M-01] Anyone can call `closeLoan()` to close the loan](https://github.com/code-423n4/2021-12-maple-findings/issues/46)\n_Submitted by WatchPug_\n\n[`MapleLoan.sol` L56-L63](https://github.com/maple-labs/loan/blob/9684bcef06481e493d060974b1777a4517c4e792/contracts/MapleLoan.sol#L56-L63)\n\n```solidity\nfunction closeLoan(uint256 amount_) external override returns (uint256 principal_, uint256 interest_) {\n    // The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.\n    require(amount_ == uint256(0) || ERC20Helper.transferFrom(_fundsAsset, msg.sender, address(this), amount_), \"ML:CL:TRANSFER_FROM_FAILED\");\n\n    ( principal_, interest_ ) = _closeLoan();\n\n    emit LoanClosed(principal_, interest_);\n}\n```\n\nBased on the context, we believe that the `closeLoan()` should only be called by the `borrower`. However, the current implementation allows anyone to call `closeLoan()` anytime after `fundLoan()`.\n\nIf there is no `earlyFee`, this enables a griefing attack, causing the `borrower` and `lender` to abandon this contract and redo everything which costs more gas.\n\nIf a platform fee exits, the lender will also suffer fund loss from the platform fee charged in `fundLoan()`.\n\n##### Recommendation\n\nChange to:\n\n```solidity\nfunction closeLoan(uint256 amount_) external override returns (uint256 principal_, uint256 interest_) {\n    // The amount specified is an optional amount to be transfer from the caller, as a convenience for EOAs.\n    require(amount_ == uint256(0) || ERC20Helper.transferFrom(_fundsAsset, msg.sender, address(this), amount_), \"ML:CL:TRANSFER_FROM_FAILED\");\n\n    require(msg.sender == _borrower, \"ML:DF:NOT_BORROWER\");\n\n    ( principal_, interest_ ) = _closeLoan();\n\n    emit LoanClosed(principal_, interest_);\n}\n```\n\n**[deluca-mike (Maple) confirmed](https://github.com/code-423n4/2021-12-maple-findings/issues/46#issuecomment-989556034):**\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2021-12-maple-findings/issues/46#issuecomment-997429287):**\n > Great find, missing authorization.\n\n## [[M-02] Unsafe implementation of `fundLoan()` allows attacker to steal collateral from an unfunded loan](https://github.com/code-423n4/2021-12-maple-findings/issues/47)\n_Submitted by WatchPug_\n\n[`MapleLoanInternals.sol` L257-L273](https://github.com/maple-labs/loan/blob/9684bcef06481e493d060974b1777a4517c4e792/contracts/MapleLoanInternals.sol#L257-L273)\n\n```solidity\nuint256 treasuryFee = (fundsLent_ * ILenderLike(lender_).treasuryFee() * _paymentInterval * _paymentsRemaining) / uint256(365 days * 10_000);\n\n// Transfer delegate fee, if any, to the pool delegate, and decrement drawable funds.\nuint256 delegateFee = (fundsLent_ * ILenderLike(lender_).investorFee() * _paymentInterval * _paymentsRemaining) / uint256(365 days * 10_000);\n\n// Drawable funds is the amount funded, minus any fees.\n_drawableFunds = fundsLent_ - treasuryFee - delegateFee;\n\nrequire(\n    treasuryFee == uint256(0) || ERC20Helper.transfer(_fundsAsset, ILenderLike(lender_).mapleTreasury(), treasuryFee),\n    \"MLI:FL:T_TRANSFER_FAILED\"\n);\n\nrequire(\n    delegateFee == uint256(0) || ERC20Helper.transfer(_fundsAsset, ILenderLike(lender_).poolDelegate(), delegateFee),\n    \"MLI:FL:PD_TRANSFER_FAILED\"\n    );\n```\n\nIn the current implementation, `mapleTreasury`, `poolDelegate` and `treasuryFee` are taken from user input `lender_`, which can be faked by setting up a contract with `ILenderLike` interfaces.\n\nThis allows the attacker to set very high fees, making `_drawableFunds` near 0.\n\nSince `mapleTreasury` and `poolDelegate` are also read from `lender_`, `treasuryFee` and `investorFee` can be retrieved back to the attacker.\n\nAs a result, the borrower won't get any `_drawableFunds` while also being unable to remove collateral.\n\n##### PoC\n\nGiven:\n\n*   `_collateralRequired` = 10 BTC\n*   `_principalRequested` = 1,000,000 USDC\n*   `_paymentInterval` = 1 day\n*   `_paymentsRemaining` = 10\n*   `_gracePeriod` = 1 day\n\n1.  Alice (borrower) calls `postCollateral()` and added `10 BTC` as `_collateralAsset`;\n2.  The attacker calls `fundLoan()` by taking `1,000,000 USDC` of flashloan and using a fake `lender`contract;\n3.  Alice calls `drawdownFunds()` with any amount > 0 will fail;\n4.  Alice calls `removeCollateral()` with any amount > 0 will get \"MLI:DF:INSUFFICIENT_COLLATERAL\" error;\n5.  Unless Alice make payment (which is meaningless), after 2 day, the attacker can call `repossess()` and get `10 BTC`.\n\n##### Recommendation\n\nConsider reading `treasuryFee`, `investorFee`, `mapleTreasury`, `poolDelegate` from an authoritative source instead.\n\n**[lucas-manuel (Maple) confirmed and disagreed with severity](https://github.com/code-423n4/2021-12-maple-findings/issues/47#issuecomment-989304172):**\n > We would consider this medium risk, since a borrower would never post collateral before a loan is funded. We can enforce this on the smart contracts level though by adding a require to the `postCollateral` function to assert that the principal amount is greater than zero.\n\n**[pauliax (judge) commented](https://github.com/code-423n4/2021-12-maple-findings/issues/47#issuecomment-997435819):**\n > Great find. As per the sponsor's recommendation, this scenario is not very likely, so I am marking this issue as of medium severity.\n\n# Low Risk Findings (5)\n\n- [[L-01] Must approve 0 first](https://github.com/code-423n4/2021-12-maple-findings/issues/11) _Submitted by robee_\n- [[L-02] Same implementation can be registerd for several versions](https://github.com/code-423n4/2021-12-maple-findings/issues/33) _Submitted by cmichel_\n- [[L-03] Insufficient input validation](https://github.com/code-423n4/2021-12-maple-findings/issues/45) _Submitted by WatchPug, also found by hyh and jayjonah8_\n- [[L-04] Fund stuck in `Liquidator` if `stopLiquidation` is called ](https://github.com/code-423n4/2021-12-maple-findings/issues/67) _Submitted by gzeon_\n- [[L-05] Functionality of liquidation strategies can be broken](https://github.com/code-423n4/2021-12-maple-findings/issues/35) _Submitted by cmichel_\n\n# Non-Critical Findings (7)\n\n- [[N-01] Open TODOs](https://github.com/code-423n4/2021-12-maple-findings/issues/10) _Submitted by robee, also found by Meta0xNull_\n- [[N-02] Typos](https://github.com/code-423n4/2021-12-maple-findings/issues/22) _Submitted by wuwe1_\n- [[N-03] Floating pragma](https://github.com/code-423n4/2021-12-maple-findings/issues/23) _Submitted by saian, also found by WatchPug_\n- [[N-04] Unchecked return value for `ERC20.approve` call](https://github.com/code-423n4/2021-12-maple-findings/issues/52) _Submitted by WatchPug, also found by defsec and robee_\n- [[N-05] IsContract Function Usage](https://github.com/code-423n4/2021-12-maple-findings/issues/72) _Submitted by defsec_\n- [[N-06] Consider adding storage gaps to proxied contracts](https://github.com/code-423n4/2021-12-maple-findings/issues/57) _Submitted by WatchPug_\n- [[N-07] Function poolDelegate does not have a named return (DebtLocker.sol)](https://github.com/code-423n4/2021-12-maple-findings/issues/25) _Submitted by ye0lde_\n\n# Gas Optimizations (10)\n\n- [[G-01] \"> 0\" is less efficient than \"!= 0\" for unsigned integers](https://github.com/code-423n4/2021-12-maple-findings/issues/24) _Submitted by ye0lde, also found by gzeon_\n- [[G-02] Short the following require messages](https://github.com/code-423n4/2021-12-maple-findings/issues/3) _Submitted by robee, also found by Meta0xNull and WatchPug_\n- [[G-03] Adding unchecked directive can save gas](https://github.com/code-423n4/2021-12-maple-findings/issues/50) _Submitted by WatchPug, also found by gzeon_\n- [[G-04] Storage double reading. Could save SLOAD](https://github.com/code-423n4/2021-12-maple-findings/issues/4) _Submitted by robee, also found by GiveMeTestEther, hyh, and WatchPug_\n- [[G-05] State variables that could be set immutable](https://github.com/code-423n4/2021-12-maple-findings/issues/7) _Submitted by robee, also found by WatchPug_\n- [[G-06] Gas Optimization: Use constant instead of block.timestamp](https://github.com/code-423n4/2021-12-maple-findings/issues/55) _Submitted by gzeon_\n- [[G-07] Cache external call result in the stack can save gas](https://github.com/code-423n4/2021-12-maple-findings/issues/62) _Submitted by WatchPug_\n- [[G-08] `Liquidator.sol#_locked` Switching between 1, 2 instead of true, false is more gas efficient](https://github.com/code-423n4/2021-12-maple-findings/issues/64) _Submitted by WatchPug_\n- [[G-09] Avoid unnecessary arithmetic operations can save gas](https://github.com/code-423n4/2021-12-maple-findings/issues/65) _Submitted by WatchPug_\n- [[G-10] Reuse arithmetic results can save gas ](https://github.com/code-423n4/2021-12-maple-findings/issues/66) _Submitted by WatchPug_\n\n# Disclosures\n\nC4 is an open organization governed by participants in the community.\n\nC4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.\n\nC4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.\n"
}