{
  "circa": {
    "title": "XDEFI contest",
    "sponsor": "XDEFI",
    "slug": "2022-01-xdefi",
    "date": "2022-02-10",
    "findings": "https://github.com/code-423n4/2022-01-xdefi-findings/issues",
    "contest": 75
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of XDEFI contest smart contract system written in Solidity. The code contest took place between January 4—January 6 2022.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>41 Wardens contributed reports to the XDEFI contest:</p>\n<ol>\n<li>WatchPug (<a href=\"https://github.com/jack-the-pug\">jtp</a> and <a href=\"https://github.com/mingwatch\">ming</a>)</li>\n<li><a href=\"https://twitter.com/onewayfunction\">onewayfunction</a></li>\n<li><a href=\"https://twitter.com/SirH4shalot\">sirhashalot</a></li>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/KenzoAgada\">kenzo</a></li>\n<li><a href=\"https://twitter.com/fitraldys\">Fitraldys</a></li>\n<li><a href=\"https://twitter.com/meidhiwirara\">Tomio</a></li>\n<li>Czar102</li>\n<li>cccz</li>\n<li><a href=\"https://tqts.ar/\">tqts</a></li>\n<li>egjlmn1</li>\n<li>robee</li>\n<li>pedroais</li>\n<li><a href=\"https://twitter.com/JustDravee\">Dravee</a></li>\n<li><a href=\"https://twitter.com/defsec_\">defsec</a></li>\n<li><a href=\"https://github.com/TomAFrench\">TomFrenchBlockchain</a></li>\n<li><a href=\"https://twitter.com/PierrickGT\">PierrickGT</a></li>\n<li><a href=\"https://twitter.com/ori_dabush\">OriDabush</a></li>\n<li><a href=\"https://twitter.com/liam_eastwood13\">leastwood</a></li>\n<li><a href=\"https://twitter.com/qwertyuiop_eth\">MaCree</a></li>\n<li><a href=\"https://github.com/0xsanson\">0xsanson</a></li>\n<li><a href=\"https://www.instagram.com/riyan_rfa/\">rfa</a></li>\n<li>Jujic</li>\n<li><a href=\"https://twitter.com/hack3r_0m\">hack3r-0m</a></li>\n<li><a href=\"https://twitter.com/AgusDuha\">agusduha</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/GiveMeTestEther\">GiveMeTestEther</a></li>\n<li><a href=\"https://twitter.com/wuwe19\">wuwe1</a></li>\n<li>certora</li>\n<li>jayjonah8</li>\n<li><a href=\"https://twitter.com/danbinnun\">danb</a></li>\n<li><a href=\"https://twitter.com/gpersoon\">gpersoon</a></li>\n<li>harleythedog</li>\n<li><a href=\"https://ericci.dev/\">StErMi</a></li>\n<li>ACai</li>\n<li>bitbopper</li>\n<li>mtz</li>\n<li>p4st13r4</li>\n<li>saian</li>\n<li><a href=\"bousalman.com\">BouSalman</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/ivshti\">Ivo Georgiev</a>.</p>\n<p>Final report assembled by <a href=\"https://github.com/captainmango\">captainmango</a> and <a href=\"https://github.com/joshuashort\">dzhawsh</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 13 unique vulnerabilities and 50 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 2 received a risk rating in the category of HIGH severity, 1 received a risk rating in the category of MEDIUM severity, and 10 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 9 non-critical recommendations and 28 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2022-01-xdefi\">C4 XDEFI contest repository</a>, and is composed of 2 smart contracts written in the Solidity programming language and includes 539 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"high-risk-findings-2\" style=\"position:relative;\"><a href=\"#high-risk-findings-2\" aria-label=\"high risk findings 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (2)</h1>\n<h2 id=\"h-01-malicious-early-userattacker-can-malfunction-the-contract-and-even-freeze-users-funds-in-edge-cases\" style=\"position:relative;\"><a href=\"#h-01-malicious-early-userattacker-can-malfunction-the-contract-and-even-freeze-users-funds-in-edge-cases\" aria-label=\"h 01 malicious early userattacker can malfunction the contract and even freeze users funds in edge cases permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/156\">[H-01] Malicious early user/attacker can malfunction the contract and even freeze users’ funds in edge cases</a></h2>\n<p><em>Submitted by WatchPug</em></p>\n<p><a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/3856a42df295183b40c6eee89307308f196612fe/contracts/XDEFIDistribution.sol#L151-L151\">https://github.com/XDeFi-tech/xdefi-distribution/blob/3856a42df295183b40c6eee89307308f196612fe/contracts/XDEFIDistribution.sol#L151-L151</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_pointsPerUnit</span><span class=\"mtk1\"> += ((</span><span class=\"mtk12\">newXDEFI</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_pointsMultiplier</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">totalUnitsCached</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>In the current implementation,  <code>_pointsPerUnit</code> can be changed in <code>updateDistribution()</code> which can be called by anyone.</p>\n<p>A malicious early user can <code>lock()</code> with only <code>1 wei</code> of XDEFI and makes <code>_pointsPerUnit</code> to be very large, causing future users not to be able to <code>lock()</code> and/or <code>unlock()</code> anymore due to overflow in arithmetic related to <code>_pointsMultiplier</code>.</p>\n<p>As a result, the contract can be malfunctioning and even freeze users’ funds in edge cases.</p>\n<h4 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p>Given:</p>\n<ul>\n<li>bonusMultiplierOf[30 days] = 100</li>\n<li>Alice <code>lock()</code> <code>1 wei</code> of XDEFI for 30 days as the first user of the contract. Got <code>1</code> units, and <code>totalUnits</code> now is <code>1</code>;</li>\n<li>Alice sends <code>170141183460469 wei</code> of <code>XDEFI</code> to the contract and calls <code>updateDistribution()</code>:</li>\n</ul>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_pointsPerUnit</span><span class=\"mtk1\"> += ((</span><span class=\"mtk7\">170141183460469</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">128</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<ol start=\"3\">\n<li>Bob tries to <code>lock()</code> <code>1,100,000 * 1e18</code> of <code>XDEFI</code> for 30 days, the tx will fail, as <code>_pointsPerUnit * units</code> overlows;</li>\n<li>Bob <code>lock()</code> <code>1,000,000 * 1e18</code> of <code>XDEFI</code> for 30 days;</li>\n<li>The rewarder sends <code>250,000 * 1e18</code> of <code>XDEFI</code> to the contract and calls <code>updateDistribution()</code>:</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">_pointsPerUnit</span><span class=\"mtk1\"> += ((</span><span class=\"mtk7\">250_000</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">**</span><span class=\"mtk7\">128</span><span class=\"mtk1\">) / (</span><span class=\"mtk7\">1_000_000</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<ol start=\"6\">\n<li>30 days later, Bob tries to call <code>unlock()</code>, the tx will fail, as <code>_pointsPerUnit * units</code> overflows.</li>\n</ol>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Uniswap v2 solved a similar problem by sending the first 1000 lp tokens to the zero address.</p>\n<p>The same solution should work here, i.e., on constructor set an initial amount (like 1e8) for <code>totalUnits</code></p>\n<p><a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/3856a42df295183b40c6eee89307308f196612fe/contracts/XDEFIDistribution.sol#L39-L44\">https://github.com/XDeFi-tech/xdefi-distribution/blob/3856a42df295183b40c6eee89307308f196612fe/contracts/XDEFIDistribution.sol#L39-L44</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">constructor</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">string</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">baseURI_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">zeroDurationPointBase_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">ERC721</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Locked XDEFI&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;lXDEFI&quot;</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">((</span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">XDEFI_</span><span class=\"mtk1\">) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;INVALID_TOKEN&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">owner</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">baseURI</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">baseURI_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">_zeroDurationPointBase</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">zeroDurationPointBase_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">totalUnits</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">100_000_000</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/156#issuecomment-1008255566\">deluca-mike (XDEFI) confirmed</a>:</strong></p>\n<blockquote>\n<p>This is a great catch! I just tested it:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">expect</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;chai&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;hardhat&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;240000000000000000000000000&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">value</span><span class=\"mtk1\">, </span><span class=\"mtk12\">add</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sub</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">BigInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">value</span><span class=\"mtk1\">) * </span><span class=\"mtk7\">1_000_000_000_000_000_000</span><span class=\"mtk4\">n</span><span class=\"mtk1\"> + </span><span class=\"mtk10\">BigInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">add</span><span class=\"mtk1\">) - </span><span class=\"mtk10\">BigInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sub</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">describe</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;XDEFIDistribution&quot;</span><span class=\"mtk1\">, () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">it</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Can overflow _pointsPerUnit&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">god</span><span class=\"mtk1\">, </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bob</span><span class=\"mtk1\">] = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getSigners</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;XDEFI&quot;</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;XDEFI&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;XDEFI&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">deployed</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;XDEFIDistribution&quot;</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;https://www.xdefi.io/nfts/&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">deployed</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Give each account 2,000,000 XDEFI</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2_000_000</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2_000_000</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// bonusMultiplierOf[30 days] = 100</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setLockPeriods</span><span class=\"mtk1\">([</span><span class=\"mtk7\">2592000</span><span class=\"mtk1\">], [</span><span class=\"mtk7\">100</span><span class=\"mtk1\">])).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 1. Alice lock() 1 wei of XDEFI for 30 days as the first user of the contract. Got 1 units, and totalUnits now is 1;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">lock</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2592000</span><span class=\"mtk1\">, </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;1&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nft1</span><span class=\"mtk1\"> = (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenOfOwnerByIndex</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">((</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">positionOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft1</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">units</span><span class=\"mtk1\">).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 2. Alice sends 170141183460469 wei of XDEFI to the contract and calls updateDistribution()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk7\">170141183460469</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateDistribution</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 3. Bob tries to lock() 1,100,000 * 1e18 of XDEFI for 30 days, the tx will fail, as _pointsPerUnit * units overflows</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1_100_000</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">).</span><span class=\"mtk11\">lock</span><span class=\"mtk1\">(</span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1_100_000</span><span class=\"mtk1\">), </span><span class=\"mtk7\">2592000</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk11\">revertedWith</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;_toInt256Safe failed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 4. Bob lock() 1,000,000 * 1e18 of XDEFI for 30 days</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1_000_000</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">).</span><span class=\"mtk11\">lock</span><span class=\"mtk1\">(</span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1_000_000</span><span class=\"mtk1\">), </span><span class=\"mtk7\">2592000</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;1&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nft2</span><span class=\"mtk1\"> = (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenOfOwnerByIndex</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">((</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">positionOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft2</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">units</span><span class=\"mtk1\">).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1_000_000</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 5. The rewarder sends 250,000 * 1e18 of XDEFI to the contract and calls updateDistribution()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">250_000</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateDistribution</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 6. 30 days later, Bob tries to call unlock(), the tx will fail, as _pointsPerUnit * units overflows.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hre</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">provider</span><span class=\"mtk1\">.</span><span class=\"mtk11\">send</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;evm_increaseTime&#39;</span><span class=\"mtk1\">, [</span><span class=\"mtk7\">2592000</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">).</span><span class=\"mtk11\">unlock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft2</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk12\">be</span><span class=\"mtk1\">.</span><span class=\"mtk11\">revertedWith</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;_toInt256Safe failed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span></code></pre>\n<p>While I do like the suggestion to to <code>totalUnits = 100_000_000;</code> in the constructor, it will result “uneven” numbers due to the <code>totalUnits</code> offset. I wonder if I can resolve this but just reducing <code>_pointsMultiplier</code> to <code>uint256(2**96)</code> as per <a href=\"https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\">https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728</a>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/156#issuecomment-1008266150\">deluca-mike (XDEFI) commented</a>:</strong></p>\n<blockquote>\n<p>OK, I think I can solve this with <code>_pointsMultiplier = uint256(2**72)</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"js\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">expect</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;chai&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\"> } = </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;hardhat&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;240000000000000000000000000&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">value</span><span class=\"mtk1\">, </span><span class=\"mtk12\">add</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">sub</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">BigInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">value</span><span class=\"mtk1\">) * </span><span class=\"mtk7\">1_000_000_000_000_000_000</span><span class=\"mtk4\">n</span><span class=\"mtk1\"> + </span><span class=\"mtk10\">BigInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">add</span><span class=\"mtk1\">) - </span><span class=\"mtk10\">BigInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sub</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">describe</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;XDEFIDistribution&quot;</span><span class=\"mtk1\">, () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">it</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;Can overflow _pointsPerUnit&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">god</span><span class=\"mtk1\">, </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bob</span><span class=\"mtk1\">] = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getSigners</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;XDEFI&quot;</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;XDEFI&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;XDEFI&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">totalSupply</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">deployed</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getContractFactory</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;XDEFIDistribution&quot;</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">deploy</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;https://www.xdefi.io/nfts/&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">deployed</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Give each account 100M XDEFI</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100_000_000</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100_000_000</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// bonusMultiplierOf[30 days] = 255</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setLockPeriods</span><span class=\"mtk1\">([</span><span class=\"mtk7\">2592000</span><span class=\"mtk1\">], [</span><span class=\"mtk7\">255</span><span class=\"mtk1\">])).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 1. Alice lock() 1 wei of XDEFI for 30 days as the first user of the contract. Got 1 units, and totalUnits now is 1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">lock</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2592000</span><span class=\"mtk1\">, </span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;1&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nft1</span><span class=\"mtk1\"> = (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenOfOwnerByIndex</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">((</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">positionOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft1</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">units</span><span class=\"mtk1\">).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 2. Alice sends 100M XDEFI minus 1 wei to the contract and calls updateDistribution()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100_000_000</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alice</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateDistribution</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 3. Bob can lock() 100M XDEFI for 30 days</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100_000_000</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">).</span><span class=\"mtk11\">lock</span><span class=\"mtk1\">(</span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100_000_000</span><span class=\"mtk1\">), </span><span class=\"mtk7\">2592000</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">(</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;1&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">nft2</span><span class=\"mtk1\"> = (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">tokenOfOwnerByIndex</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">expect</span><span class=\"mtk1\">((</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">positionOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft2</span><span class=\"mtk1\">)).</span><span class=\"mtk12\">units</span><span class=\"mtk1\">).</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">equal</span><span class=\"mtk1\">(</span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">255_000_000</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 4. The rewarder sends 40M XDEFI to the contract and calls updateDistribution()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">, </span><span class=\"mtk11\">toWei</span><span class=\"mtk1\">(</span><span class=\"mtk7\">40_000_000</span><span class=\"mtk1\">))).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateDistribution</span><span class=\"mtk1\">()).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// 5. 30 days later, Bob can call unlock()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hre</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ethers</span><span class=\"mtk1\">.</span><span class=\"mtk12\">provider</span><span class=\"mtk1\">.</span><span class=\"mtk11\">send</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;evm_increaseTime&#39;</span><span class=\"mtk1\">, [</span><span class=\"mtk7\">2592000</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> (</span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">XDEFIDistribution</span><span class=\"mtk1\">.</span><span class=\"mtk11\">connect</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bob</span><span class=\"mtk1\">).</span><span class=\"mtk11\">unlock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">nft2</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bob</span><span class=\"mtk1\">.</span><span class=\"mtk12\">address</span><span class=\"mtk1\">)).</span><span class=\"mtk11\">wait</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">});</span></span></span></code></pre>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/156#issuecomment-1012773001\">deluca-mike (XDEFI) commented</a>:</strong></p>\n<blockquote>\n<p>In the <a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol\">release candidate contract</a>, in order to preserve the math (formulas), at the cost of some accuracy, we went with a <a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L23\"><code>_pointsMultiplier</code> of 72 bits</a>.</p>\n<p>Also, a <a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L53\">minimum units locked</a> is enforced, to prevent “dust” from creating a very very high <code>_pointsPerUnit</code>.</p>\n<p>Tests were written in order to stress test the contract against the above extreme cases.</p>\n<p>Further, a “no-going-back” <a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L100\">emergency mode setter</a> was implemented that allows (but does not force) users to <a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L147\">withdraw only their deposits</a> without any of the funds distribution math from being expected, in the event that some an edge case does arise.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/156#issuecomment-1013782548\">Ivshti (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>fantastic finding, agreed with the proposed severity!</p>\n<p>The sponsor fixes seem adequate: a lower <code>_poinsMultiplier</code>, a minimum lock and an emergency mode that disables reward math, somewhat similar to emergency withdraw functions in contracts like masterchef.</p>\n</blockquote>\n<h2 id=\"h-02-the-reentrancy-vulnerability-in-_safemint-can-allow-an-attacker-to-steal-all-rewards\" style=\"position:relative;\"><a href=\"#h-02-the-reentrancy-vulnerability-in-_safemint-can-allow-an-attacker-to-steal-all-rewards\" aria-label=\"h 02 the reentrancy vulnerability in _safemint can allow an attacker to steal all rewards permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/25\">[H-02] The reentrancy vulnerability in _safeMint can allow an attacker to steal all rewards</a></h2>\n<p><em>Submitted by cccz, also found by cmichel, Fitraldys, kenzo, onewayfunction, and tqts</em></p>\n<p>There is a reentrancy vulnerability in the _safeMint function</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_safeMint</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_mint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_checkOnERC721Received</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk12\">to</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk8\">&quot;ERC721: transfer to non ERC721Receiver implementer&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_checkOnERC721Received</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">from</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">to</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">private</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">to</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isContract</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">try</span><span class=\"mtk1\"> </span><span class=\"mtk11\">IERC721Receiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">to</span><span class=\"mtk1\">).</span><span class=\"mtk11\">onERC721Received</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_msgSender</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">from</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">) </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">bytes4</span><span class=\"mtk1\"> </span><span class=\"mtk12\">retval</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">retval</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">IERC721Receiver</span><span class=\"mtk1\">.</span><span class=\"mtk12\">onERC721Received</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>The lock function changes the totalDepositedXDEFI variable after calling the _safeMint function</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">lock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">noReenter</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Lock the XDEFI in the contract.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">SafeERC20</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">), </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Handle the lock position creation and get the tokenId of the locked position.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_lock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_lock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Prevent locking 0 amount in order generate many score-less NFTs, even if it is inefficient, and such NFTs would be ignored.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">MAX_TOTAL_XDEFI_SUPPLY</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;INVALID_AMOUNT&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Get bonus multiplier and check that it is not zero (which validates the duration).</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bonusMultiplier</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">bonusMultiplierOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bonusMultiplier</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;INVALID_DURATION&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Mint a locked staked position NFT to the destination.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_safeMint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_generateNewTokenId</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_getPoints</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Track deposits.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">totalDepositedXDEFI</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Since the updateDistribution function does not use the noReenter modifier, the attacker can re-enter the updateDistribution function in the _safeMint function. Since the value of totalDepositedXDEFI is not updated at this time, the _pointsPerUnit variable will become abnormally large.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">updateDistribution</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalUnitsCached</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">totalUnits</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">totalUnitsCached</span><span class=\"mtk1\">&gt; </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;NO_UNIT_SUPPLY&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newXDEFI</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_toUint256Safe</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_updateXDEFIBalance</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">newXDEFI</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">_pointsPerUnit</span><span class=\"mtk1\"> += ((</span><span class=\"mtk12\">newXDEFI</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">_pointsMultiplier</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">totalUnitsCached</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">DistributionUpdated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">newXDEFI</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_updateXDEFIBalance</span><span class=\"mtk1\">() </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newFundsTokenBalance_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">previousDistributableXDEFI</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">distributableXDEFI</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentDistributableXDEFI</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">distributableXDEFI</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">))-</span><span class=\"mtk12\">totalDepositedXDEFI</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">       </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_toInt256Safe</span><span class=\"mtk1\">(</span><span class=\"mtk12\">currentDistributableXDEFI</span><span class=\"mtk1\">)-</span><span class=\"mtk11\">_toInt256Safe</span><span class=\"mtk1\">(</span><span class=\"mtk12\">previousDistributableXDEFI</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   }</span></span></span></code></pre>\n<p>If the attacker calls the lock function to get the NFT before exploiting the reentrance vulnerability, then the unlock function can be called to steal a lot of rewards, and the assets deposited by the user using the reentrance vulnerability can also be redeemed by calling the unlock function. Since the unlock function calls the _updateXDEFIBalance function, the attacker cannot steal the assets deposited by the user</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">unlock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">noReenter</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountUnlocked_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Handle the unlock and get the amount of XDEFI eligible to withdraw.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amountUnlocked_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_unlock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Send the the unlocked XDEFI to the destination.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">SafeERC20</span><span class=\"mtk1\">.</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">XDEFI</span><span class=\"mtk1\">), </span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountUnlocked_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// NOTE: This needs to be done after updating `totalDepositedXDEFI` (which happens in `_unlock`) and transferring out.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_updateXDEFIBalance</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_unlock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">account_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountUnlocked_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Check that the account is the position NFT owner.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">account_</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NOT_OWNER&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Fetch position.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">Position</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">position</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">positionOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint96</span><span class=\"mtk1\"> </span><span class=\"mtk12\">units</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">units</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint88</span><span class=\"mtk1\"> </span><span class=\"mtk12\">depositedXDEFI</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">depositedXDEFI</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">expiry</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">expiry</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Check that enough time has elapsed in order to unlock.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">expiry</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;NO_LOCKED_POSITION&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">expiry</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;CANNOT_UNLOCK&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Get the withdrawable amount of XDEFI for the position.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">amountUnlocked_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_withdrawableGiven</span><span class=\"mtk1\">(</span><span class=\"mtk12\">units</span><span class=\"mtk1\">, </span><span class=\"mtk12\">depositedXDEFI</span><span class=\"mtk1\">, </span><span class=\"mtk12\">position</span><span class=\"mtk1\">.</span><span class=\"mtk12\">pointsCorrection</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Track deposits.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">totalDepositedXDEFI</span><span class=\"mtk1\"> -= </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">depositedXDEFI</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Burn FDT Position.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">totalUnits</span><span class=\"mtk1\"> -= </span><span class=\"mtk12\">units</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">delete</span><span class=\"mtk1\"> </span><span class=\"mtk12\">positionOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LockPositionWithdrawn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">account_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountUnlocked_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_withdrawableGiven</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint96</span><span class=\"mtk1\"> </span><span class=\"mtk12\">units_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint88</span><span class=\"mtk1\"> </span><span class=\"mtk12\">depositedXDEFI_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">int256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pointsCorrection_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">withdrawableXDEFI_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_toUint256Safe</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">_toInt256Safe</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pointsPerUnit</span><span class=\"mtk1\"> * </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">units_</span><span class=\"mtk1\">)) +</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">pointsCorrection_</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ) / </span><span class=\"mtk12\">_pointsMultiplier</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ) + </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">depositedXDEFI_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<p><a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-beta.0/contracts/XDEFIDistribution.sol#L253-L281\">https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-beta.0/contracts/XDEFIDistribution.sol#L253-L281</a></p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">-    function updateDistribution() external  {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+    function updateDistribution() external  noReenter {</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/25#issuecomment-1008233320\">deluca-mike (XDEFI) resolved</a>:</strong></p>\n<blockquote>\n<p>Valid and a big issue. However, due to other recommendations, I will not solve it this way. Instead, <code>updateDistribution()</code> will be called at the start of every lock/unlock function (so it can’t have a <code>noReenter</code> modifier), and the <code>_safeMint</code> calls will be moved to the end of their respective operations to prevent the effect of the re-entrancy (i.e. position will created with a <code>_pointsPerUnit</code> before a re-entering from <code>_safeMint</code> can affect it). Tests will be added to show this is not longer possible.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/25#issuecomment-1012774852\">deluca-mike (XDEFI) commented</a>:</strong></p>\n<blockquote>\n<p>In our release candidate contract, as mentioned above, <code>updateDistribution()</code> is called before each locking and unlocking function, via a <a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L77-L80\"><code>updatePointsPerUnitAtStart</code> modifier</a>, and thus, <code>updateDistribution()</code> is now a public fucntion, and since it is used by other functions, cannot be behind a <code>noReenter</code>.</p>\n<p>See:</p>\n<ul>\n<li><a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L177\"><code>lock</code></a></li>\n<li><a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L181\"><code>lockWithPermit</code></a></li>\n<li><a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L188\"><code>relock</code></a></li>\n<li><a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L195\"><code>unlock</code></a></li>\n<li><a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L233\"><code>relockBatch</code></a></li>\n<li><a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L240\"><code>unlockBatch</code></a></li>\n</ul>\n<p>Also, <a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/test/XDEFIDistributionReceivers.js\">a test was written</a> to ensure that this is no longer exploitable, and that the contract behaves properly if a re-entrancy call <code>updateDistribution()</code>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/25#issuecomment-1013783009\">Ivshti (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agreed with the severity.</p>\n<p>Resolution of reordering the calls seems to be adequate </p>\n</blockquote>\n<h1 id=\"medium-risk-findings-1\" style=\"position:relative;\"><a href=\"#medium-risk-findings-1\" aria-label=\"medium risk findings 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (1)</h1>\n<h2 id=\"m-01-_safemint-will-fail-due-to-an-edge-case-in-calculating-tokenid-using-the-_generatenewtokenid-function\" style=\"position:relative;\"><a href=\"#m-01-_safemint-will-fail-due-to-an-edge-case-in-calculating-tokenid-using-the-_generatenewtokenid-function\" aria-label=\"m 01 _safemint will fail due to an edge case in calculating tokenid using the _generatenewtokenid function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/17\">[M-01] <code>_safeMint</code> Will Fail Due To An Edge Case In Calculating <code>tokenId</code> Using The <code>_generateNewTokenId</code> Function</a></h2>\n<p><em>Submitted by leastwood, also found by cmichel, cmichel, egjlmn1, kenzo, MaCree, onewayfunction, sirhashalot, and WatchPug</em></p>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>NFTs are used to represent unique positions referenced by the generated <code>tokenId</code>. The <code>tokenId</code> value contains the position’s score in the upper 128 bits and the index wrt. the token supply in the lower 128 bits.</p>\n<p>When positions are unlocked after expiring, the relevant position stored in the <code>positionOf</code> mapping is deleted, however, the NFT is not. The <code>merge()</code> function is used to combine points in unlocked NFTs, burning the underlying NFTs upon merging. As a result, <code>_generateNewTokenId()</code> may end up using the same <code>totalSupply()</code> value, causing <code>_safeMint()</code> to fail if the same <code>amount_</code> and <code>duration_</code> values are used.</p>\n<p>This edge case only occurs if there is an overlap in the <code>points_</code> and <code>totalSupply() + 1</code> values used to generate <code>tokenId</code>. As a result, this may impact a user’s overall experience while interacting with the <code>XDEFI</code> protocol, as some transactions may fail unexpectedly.</p>\n<h4 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h4>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_lock</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Prevent locking 0 amount in order generate many score-less NFTs, even if it is inefficient, and such NFTs would be ignored.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">) &amp;&amp; </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">MAX_TOTAL_XDEFI_SUPPLY</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;INVALID_AMOUNT&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Get bonus multiplier and check that it is not zero (which validates the duration).</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bonusMultiplier</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">bonusMultiplierOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bonusMultiplier</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">uint8</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;INVALID_DURATION&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Mint a locked staked position NFT to the destination.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_safeMint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_generateNewTokenId</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_getPoints</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Track deposits.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">totalDepositedXDEFI</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Create Position.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint96</span><span class=\"mtk1\"> </span><span class=\"mtk12\">units</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint96</span><span class=\"mtk1\">((</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\"> * </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bonusMultiplier</span><span class=\"mtk1\">)) / </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">totalUnits</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">units</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">positionOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">] =</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">Position</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">units:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">units</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">depositedXDEFI:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint88</span><span class=\"mtk1\">(</span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">expiry:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">created:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">bonusMultiplier:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bonusMultiplier</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">pointsCorrection:</span><span class=\"mtk1\"> -</span><span class=\"mtk11\">_toInt256Safe</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pointsPerUnit</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">units</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">LockPositionCreated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amount_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">duration_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_generateNewTokenId</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">points_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Points is capped at 128 bits (max supply of XDEFI for 10 years locked), total supply of NFTs is capped at 128 bits.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">points_</span><span class=\"mtk1\"> &lt;&lt; </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">128</span><span class=\"mtk1\">)) + </span><span class=\"mtk11\">uint128</span><span class=\"mtk1\">(</span><span class=\"mtk11\">totalSupply</span><span class=\"mtk1\">() + </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">merge</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenIds_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">count</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenIds_length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">count</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk11\">uint256</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;MIN_2_TO_MERGE&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">points</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// For each NFT, check that it belongs to the caller, burn it, and accumulate the points.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">count</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">tokenIds_</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">) == </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;NOT_OWNER&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">positionOf</span><span class=\"mtk1\">[</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">].</span><span class=\"mtk12\">expiry</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;POSITION_NOT_UNLOCKED&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_burn</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">points</span><span class=\"mtk1\"> += </span><span class=\"mtk11\">_getPointsFromTokenId</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Mine a new NFT to the destinations, based on the accumulated points.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_safeMint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">destination_</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokenId_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_generateNewTokenId</span><span class=\"mtk1\">(</span><span class=\"mtk12\">points</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Consider replacing <code>totalSupply()</code> in <code>_generateNewTokenId()</code> with an internal counter. This should ensure that <code>_generateNewTokenId()</code> always returns a unique <code>tokenId</code> that is monotomically increasing .</p>\n<p><strong><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/17#issuecomment-1012535766\">deluca-mike (XDEFI) confirmed</a>:</strong></p>\n<blockquote>\n<p>In the release candidate contract, <code>_generateNewTokenId</code> now used an <a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L36\">internal <code>_tokensMinted</code> variable</a> instead of <code>totalSupply()</code>, as seen <a href=\"https://github.com/XDeFi-tech/xdefi-distribution/blob/v1.0.0-rc.0/contracts/XDEFIDistribution.sol#L393\">here</a>.\n<strong><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/17#issuecomment-1013783639\">Ivshti (Judge) commented</a>:</strong>\nAgreed with sponsor</p>\n<p>As for mitigation, the new way to generate token IDs seems cleaner, but more gas consuming</p>\n</blockquote>\n<h1 id=\"low-risk-findings-10\" style=\"position:relative;\"><a href=\"#low-risk-findings-10\" aria-label=\"low risk findings 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (10)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/30\">[L-01] Distribution Updates Can Be Gamed</a> <em>Submitted by leastwood, also found by cmichel, danb, egjlmn1, gpersoon, hack3r-0m, harleythedog, kenzo, StErMi, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/38\">[L-02] setLockPeriods function lack of input validation</a> <em>Submitted by cccz, also found by agusduha, certora, hack3r-0m, jayjonah8, Jujic, Tomio, WatchPug, and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/52\">[L-03] Owner can steal XDEFI without any capital risk</a> <em>Submitted by onewayfunction</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/193\">[L-04] Possible profitability manipulations</a> <em>Submitted by Czar102</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/14\">[L-06] Assert instead require to validate user inputs</a> <em>Submitted by robee, also found by egjlmn1 and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/139\">[L-07] <code>_zeroDurationPointBase</code> can potentially be exploited to get more scores</a> <em>Submitted by WatchPug, also found by pedroais</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/142\">[L-08] Unsafe type casting</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/2\">[L-09] Use of return value from assignment hampers readability</a> <em>Submitted by TomFrenchBlockchain, also found by egjlmn1, robee, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/183\">[L-10] No option to unlock funds before set duration</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/96\">[L-11] in function setLockPeriods, multiplier can be set to lower than 100</a> <em>Submitted by Tomio</em></li>\n</ul>\n<h1 id=\"non-critical-findings-9\" style=\"position:relative;\"><a href=\"#non-critical-findings-9\" aria-label=\"non critical findings 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (9)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/11\">[N-01] Require with not comprehensive message</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/197\">[N-02] Event for merge</a> <em>Submitted by 0xsanson</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/16\">[N-03] Missing event for admin function setBaseURI</a> <em>Submitted by BouSalman, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/171\">[N-04] Wrong revert message</a> <em>Submitted by Czar102</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/196\">[N-05] Improper event declaration</a> <em>Submitted by Czar102</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/129\">[N-06] Implicit casts should be explicit as per the global code style</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/60\">[N-07] Various Non-Conformance to Solidity naming conventions</a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/136\">[N-08] Avoid inline code for better readibility</a> <em>Submitted by StErMi</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/115\">[N-09] Constants are not explicitly declared</a> <em>Submitted by WatchPug</em></li>\n</ul>\n<h1 id=\"gas-optimizations-28\" style=\"position:relative;\"><a href=\"#gas-optimizations-28\" aria-label=\"gas optimizations 28 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (28)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/47\">[G-01] XDEFIDistribution: lock should be reused in lockWithPermit</a> <em>Submitted by PierrickGT</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/49\">[G-02] Gas: <code>XDEFIDistribution.sol</code>’s <code>withdrawAmount</code> substraction can be unchecked</a> <em>Submitted by Dravee, also found by 0xsanson, Jujic, WatchPug, and ye0lde</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/194\">[G-03] “Safe” ERC20 functions for XDEFI?</a> <em>Submitted by 0xsanson</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/36\">[G-04] MAX<em>TOTAL</em>XDEFI_SUPPLY should be constant</a> <em>Submitted by agusduha, also found by 0xsanson, Czar102, Dravee, GiveMeTestEther, p4st13r4, saian, sirhashalot, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/1\">[G-05] Usage of zero storage for reentrancy guard increases chance that gas refund is capped</a> <em>Submitted by TomFrenchBlockchain, also found by 0xsanson, bitbopper, Czar102, leastwood, mtz, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/6\">[G-06] Public functions to external</a> <em>Submitted by robee, also found by ACai, agusduha, defsec, and Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/29\">[G-07] Use <code>calldata</code> instead of <code>memory</code> for external functions where the function argument is read-only.</a> <em>Submitted by Dravee, also found by Czar102, defsec, and TomFrenchBlockchain</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/88\">[G-08] <code>> 0 can be replaced with != 0 for gas optimization</code></a> <em>Submitted by defsec, also found by Dravee and Jujic</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/9\">[G-09] Prefix increments are cheaper than postfix increments</a> <em>Submitted by robee, also found by Dravee, Tomio, and WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/22\">[G-10] Use Custom Errors to save Gas</a> <em>Submitted by Dravee, also found by GiveMeTestEther</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/51\">[G-11] Gas: avoid unnecessary SSTORE on <code>proposeOwnership</code></a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/54\">[G-12] Gas Optimization: Tight variable packing in <code>XDEFIDistribution.sol</code></a> <em>Submitted by Dravee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/103\">[G-13] gas optimization</a> <em>Submitted by Fitraldys</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/120\">[G-14] Gas optimization in XDEFIDistribution.sol - variable that is not used</a> <em>Submitted by OriDabush, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/121\">[G-15] Gas optimization in XDEFIDistribution.sol - inlining some functions</a> <em>Submitted by OriDabush</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/122\">[G-16] Gas optimization in XDEFIDistribution.sol - shifting instead of multiplying or dividing by power of 2</a> <em>Submitted by OriDabush, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/3\">[G-17] Unneccessary check on total supply of XDEFI token</a> <em>Submitted by TomFrenchBlockchain, also found by onewayfunction</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/87\">[G-18] <code>pointCorrection</code> can be stored in a uint256 rather than int256 to save gas from casting.</a> <em>Submitted by TomFrenchBlockchain, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/116\">[G-19] Sub-optimal calls should be allowed instead of reverted as resending the transaction will cost more gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/123\">[G-20] <code>XDEFIDistribution.sol#relock()</code> Implementation can be simpler and save some gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/101\">[G-21] Field bonusMultiplier of struct Position can be removed</a> <em>Submitted by wuwe1, also found by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/151\">[G-22] <code>XDEFIDistribution.sol#_updateXDEFIBalance()</code> Avoiding unnecessary storage writes can save gas</a> <em>Submitted by WatchPug</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/185\">[G-23] Adding unchecked directive can save gas</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/97\">[G-24] Less than 256 uints are not gas efficient</a> <em>Submitted by defsec</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/128\">[G-25] &#x26;&#x26; operator can use more gas</a> <em>Submitted by rfa</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/8\">[G-26] Unnecessary array boundaries check when loading an array element twice</a> <em>Submitted by robee</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/179\">[G-27] Unnecessary require statement</a> <em>Submitted by sirhashalot</em></li>\n<li><a href=\"https://github.com/code-423n4/2022-01-xdefi-findings/issues/98\">[G-28] XDEFIDistribution: <em>unlock function should only be called with tokenId</em> parameter</a> <em>Submitted by PierrickGT</em></li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-2\">High Risk Findings (2)</a></p>\n<ul>\n<li><a href=\"#h-01-malicious-early-userattacker-can-malfunction-the-contract-and-even-freeze-users-funds-in-edge-cases\">[H-01] Malicious early user/attacker can malfunction the contract and even freeze users’ funds in edge cases</a></li>\n<li><a href=\"#h-02-the-reentrancy-vulnerability-in-_safemint-can-allow-an-attacker-to-steal-all-rewards\">[H-02] The reentrancy vulnerability in _safeMint can allow an attacker to steal all rewards</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-1\">Medium Risk Findings (1)</a></p>\n<ul>\n<li><a href=\"#m-01-_safemint-will-fail-due-to-an-edge-case-in-calculating-tokenid-using-the-_generatenewtokenid-function\">[M-01] <code>_safeMint</code> Will Fail Due To An Edge Case In Calculating <code>tokenId</code> Using The <code>_generateNewTokenId</code> Function</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-10\">Low Risk Findings (10)</a></li>\n<li><a href=\"#non-critical-findings-9\">Non-Critical Findings (9)</a></li>\n<li><a href=\"#gas-optimizations-28\">Gas Optimizations (28)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}