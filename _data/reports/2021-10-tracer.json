{
  "circa": {
    "title": "Tracer contest",
    "sponsor": "Tracer",
    "slug": "2021-10-tracer",
    "date": "2021-11-15",
    "findings": "https://github.com/code-423n4/2021-10-tracer-findings/issues",
    "contest": 40
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 code contest is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the code contest outlined in this document, C4 conducted an analysis of Tracer‚Äôs smart contract system written in Solidity. The code contest took place between October 7‚ÄîOctober 13 2021.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>6 Wardens contributed reports to the Tracer contest code contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/cmichelio\">cmichel</a></li>\n<li><a href=\"https://twitter.com/WatchPug_\">WatchPug</a></li>\n<li><a href=\"https://twitter.com/loop_225\">loop</a></li>\n<li><a href=\"https://twitter.com/SolidityDev\">pauliax</a></li>\n<li><a href=\"https://twitter.com/_ye0lde\">ye0lde</a></li>\n<li><a href=\"https://twitter.com/artemcherba\">AC0611</a></li>\n</ol>\n<p>This contest was judged by <a href=\"https://twitter.com/GalloDaSballo\">Alex the Entreprenerd</a>.</p>\n<p>Final report assembled by <a href=\"https://twitter.com/itsmetechjay\">itsmetechjay</a> and <a href=\"https://twitter.com/CloudEllie1\">CloudEllie</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 7 unique vulnerabilities and 29 total findings. All of the issues presented here are linked back to their original finding.</p>\n<p>Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity, 3 received a risk rating in the category of MEDIUM severity, and 4 received a risk rating in the category of LOW severity.</p>\n<p>C4 analysis also identified 11 non-critical recommendations and 11 gas optimizations.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2021-10-tracer\">C4 Tracer contest repository</a>, and is composed of 22 smart contracts written in the Solidity programming language and includes 1,365 lines of Solidity code and 0 lines of JavaScript.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities according to a methodology based on <a href=\"https://owasp.org/www-community/OWASP_Risk_Rating_Methodology\">OWASP standards</a>.</p>\n<p>Vulnerabilities are divided into three primary risk categories: high, medium, and low.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>Further information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code423n4.com\">the C4 website</a>.</p>\n<h1 id=\"medium-risk-findings-3\" style=\"position:relative;\"><a href=\"#medium-risk-findings-3\" aria-label=\"medium risk findings 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (3)</h1>\n<h2 id=\"m-01-wrong-keeper-reward-computation\" style=\"position:relative;\"><a href=\"#m-01-wrong-keeper-reward-computation\" aria-label=\"m 01 wrong keeper reward computation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/23\">[M-01] Wrong keeper reward computation</a></h2>\n<p><em>Submitted by cmichel</em>.</p>\n<p>The <code>PoolKeeper.keeperReward</code> computation mixes WADs and Quads which leads to issues.</p>\n<ol>\n<li>Note that <code>keeperTip</code> returns values where <code>1</code> = <code>1%</code>, and <code>100 = 100%</code>, the same way <code>BASE_TIP = 5 = 5%</code>. Thus <code>_tipPercent = ABDKMathQuad.fromUInt(keeperTip)</code> is a Quad value of this keeper tip, and not in ‚Äúwad units‚Äù as the comment above it says.</li>\n</ol>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// @audit üëá this comment is not correct, it&#39;s in Quad units</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// tip percent in wad units</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">bytes16</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tipPercent</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fromUInt</span><span class=\"mtk1\">(</span><span class=\"mtk11\">keeperTip</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_savedPreviousUpdatedTimestamp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_poolInterval</span><span class=\"mtk1\">));</span></span></span></code></pre>\n<ol start=\"2\">\n<li>Now the <code>wadRewardValue</code> interprets <code>_tipPercent</code> as a WAD + Quad value which ultimately leads to significantly fewer keeper rewards:</li>\n</ol>\n<p>It tries to compute <code>_keeperGas + _keeperGas * _tipPercent</code> and to compute <code>_keeperGas * _tipPercent</code> it does a wrong division by <code>fixedPoint</code> (1e18 as a quad value) because it thinks the <code>_tipPercent</code> is a WAD value (100%=1e18) as a quad, when indeed <code>100%=100</code>. It seems like it should divide by <code>100</code> as a quad instead.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fromUInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_keeperGas</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// @audit there&#39;s no need to divide by fixedPoint, he wants _keeperGas * _tipPercent and _tipPercent is a quad quad_99 / quad_100</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">div</span><span class=\"mtk1\">((</span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fromUInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_keeperGas</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_tipPercent</span><span class=\"mtk1\">)), </span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fromUInt</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<h4 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The keeper rewards are off as the <code>_keeperGas * _tipPercent</code> is divided by 1e18 instead of 1e2.\nKeeper will just receive their <code>_keeperGas</code> cost but the tip part will be close to zero every time.</p>\n<h4 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Generally, I‚Äôd say the contract mixes quad and WAD units where it doesn‚Äôt have to do it. Usually, you either use WAD or Quad math but not both at the same time.\nThis complicates the code.\nI‚Äôd make <code>keeperTip()</code>  return a <code>byte16</code> Quad value as a percentage where <code>100% = ABDKMathQuad.fromUInt(1)</code>. This temporary float result can then be used in a different <code>ABDKMathQuad</code> computation.</p>\n<p>Alternatively, divide by 100 as a quad instead of 1e18 as a quad because <code>_tipPercent</code> is not a WAD value, but simply a percentage where <code>1 = 1%</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fromUInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_keeperGas</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// @audit there&#39;s no need to divide by fixedPoint, he wants _keeperGas * _tipPercent and _tipPercent is a quad quad_99 / quad_100</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">div</span><span class=\"mtk1\">((</span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mul</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fromUInt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_keeperGas</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_tipPercent</span><span class=\"mtk1\">)), </span><span class=\"mtk12\">ABDKMathQuad</span><span class=\"mtk1\">.</span><span class=\"mtk11\">fromUInt</span><span class=\"mtk1\">(</span><span class=\"mtk7\">100</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">)</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/23\">mynameuhh (Tracer) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/23#issuecomment-955087515\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Agree with the finding and its severity, great find.</p>\n</blockquote>\n<h2 id=\"m-02-deposits-dont-work-with-fee-on-transfer-tokens\" style=\"position:relative;\"><a href=\"#m-02-deposits-dont-work-with-fee-on-transfer-tokens\" aria-label=\"m 02 deposits dont work with fee on transfer tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/17\">[M-02] Deposits don‚Äôt work with fee-on transfer tokens</a></h2>\n<p><em>Submitted by cmichel</em>.</p>\n<p>There are ERC20 tokens that may make certain customizations to their ERC20 contracts.\nOne type of these tokens is deflationary tokens that charge a certain fee for every <code>transfer()</code> or <code>transferFrom()</code>.\nOthers are rebasing tokens that increase in value over time like Aave‚Äôs aTokens (<code>balanceOf</code> changes over time).</p>\n<h4 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>The <code>PoolCommiter.commit()</code> function will store the entire <code>amount</code> in the commitment but with fee-on-transfer tokens, fewer tokens will be transferred which leads to inconsistencies with the <code>pool.longBalance()</code> and in <code>uncommit</code>.</p>\n<h4 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>One possible mitigation is to measure the asset change right before and after the asset-transferring routines</p>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/17#issuecomment-944009136\">rogue developer (Tracer) disputed</a>:</strong></p>\n<blockquote>\n<p>Only governance (a multisig) can deploy markets, and has complete say over what markets can be deployed (see the <code>onlyGov</code> modifier in <code>PoolFactory.sol#deployPool</code>). Because new markets being deployed would be done via proposal to the DAO, which include the collateral token being used in a proposed market, markets with fee-on transfer tokens like Aave‚Äôs aTokens just won‚Äôt be deployed. I think this is a fairly safe assumption to make and thus we‚Äôre making it out of scope. In any case, the chances of this happening and slipping past everyone who votes in the proposals <em>and</em> not being noticed extremely soon after a market is deployed are extremely low.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/17#issuecomment-955088716\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>I think this is a valid finding, the warden has shown a way to tamper with the protocol, extracting value (as such medium severity)</p>\n<p>In terms of mitigation, not using <code>feeOnTransfer</code> or <code>rebasing</code> tokens is completely legitimate.</p>\n</blockquote>\n<h2 id=\"m-03-uncommit-sends-tokens-to-the-wrong-user\" style=\"position:relative;\"><a href=\"#m-03-uncommit-sends-tokens-to-the-wrong-user\" aria-label=\"m 03 uncommit sends tokens to the wrong user permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19\">[M-03] <code>uncommit</code> sends tokens to the wrong user</a></h2>\n<p><em>Submitted by cmichel, also found by WatchPug</em>.</p>\n<p>The <code>PoolCommitter._uncommit</code> function calls the <code>ILeveragedPool(leveragedPool).quoteTokenTransfer/mintTokens</code> function with <code>msg.sender</code>.\nBut in <code>_uncommit</code>‚Äôs case that‚Äôs the <strong>pool, not the commit owner</strong>, see <code>onlyPool</code> modifier on <code>executeAllCommitments</code> which calls <code>_uncommit</code>.</p>\n<h4 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h4>\n<p>Users lose all tokens from their commitments as they are sent / minted to the pool instead.</p>\n<h4 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h4>\n<p>Instead of <code>msg.sender</code>, use <code>_commit.owner</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// minting: return quote tokens to the commit owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// @audit msg.sender is pool, should be _commit.owner</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">ILeveragedPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">leveragedPool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">quoteTokenTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_commit</span><span class=\"mtk1\">.</span><span class=\"mtk12\">amount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// same with mint cases</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-945331001\">rogue developer (Tracer) disagreed with severity</a>:</strong></p>\n<blockquote>\n<p>This is a valid issue. However, it requires there to be an underlying bug in the contracts which would make the <code>executeCommitment</code> call in <code>executeAllCommitments</code> revert (as <code>_uncommit</code> is only called in that case). If the warden can find a way for <code>executeCommitment</code> to revert, we would consider this to be an issue of this severity but otherwise we disagree with the severity as it requires/needs to be paired with another bug in the contracts.</p>\n<p>It‚Äôs also worth noting that governance can rescue any funds (rather, quote/collateral tokens) from the <code>LeveragedPool</code> contract. So if there were to be a case where there was a bug in the contracts that led to <code>executeCommitment</code> reverting and the users having their mints (quote tokens sent back to the <code>LeveragedPool</code>), governance could pause the contracts, drain out the equivalent worth and set up another contract where users can burn their tokens/claim them; if they burned the tokens which later uncommitted, then governance could send them an equal amount in collateral tokens. On the same note, if a critical vulnerability in <code>executeCommitment</code> were to be happening whereby commits were being uncommitted, then governance could also pause the contracts, rescue the funds and do some combination of the efforts above to ensure users get the funds back securely.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955094840\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Would setting up a commit such that this line will underflow\n<a href=\"https://github.com/tracer-protocol/perpetual-pools-contracts/blob/646360b0549962352fe0c3f5b214ff8b5f73ba51/contracts/implementation/PoolCommitter.sol#L305\">https://github.com/tracer-protocol/perpetual-pools-contracts/blob/646360b0549962352fe0c3f5b214ff8b5f73ba51/contracts/implementation/PoolCommitter.sol#L305</a>\n, causing a revert, be a way to cause the function to call <code>_uncommit</code> ?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955095206\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Also, to clarify, you‚Äôre saying you believe the code will never call <code>_uncommit</code> as it won‚Äôt ever revert, right?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955097577\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>At this time I believe that if a user mistakenly commits more than the value in <code>shadowPools[_commitType]</code> they can cause a silent revert which will trigger the bug</p>\n<p>I think only their own funds are at risk, and either passing along the original committer or storing it in the commitData would allow to safely return them their funds.</p>\n<p>With the information I have this issue sits between medium and high severity, high severity because user funds are at risk, medium because:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">2 ‚Äî Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</span></span></code></pre>\n<p>As of now I‚Äôll mark as medium and valid.</p>\n<p>Will think it over the weekend</p>\n<p>If the sponsor can let me know their take and reply to the questions above, that can help clarify the severity and validity</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955099303\">rogue developer (Tracer) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>Would setting up a commit such that this line will underflow <a href=\"https://github.com/tracer-protocol/perpetual-pools-contracts/blob/646360b0549962352fe0c3f5b214ff8b5f73ba51/contracts/implementation/PoolCommitter.sol#L305\">https://github.com/tracer-protocol/perpetual-pools-contracts/blob/646360b0549962352fe0c3f5b214ff8b5f73ba51/contracts/implementation/PoolCommitter.sol#L305</a> , causing a revert, be a way to cause the function to call _uncommit ?</p>\n</blockquote>\n<p>@Alex the Entreprenerd No. <code>shadowPools</code> is a mapping of commit types to the sum of pool tokens to be burned (rather, to be executed because they‚Äôve already been burned), or sum of collateral tokens to be used in minting that haven‚Äôt been used for minting yet. <code>executeCommitment</code> can only be called on <code>Commit</code>‚Äôs, which are in the <code>commits</code> mapping, which can only be added to via the <code>commit</code> function where users have to commit to putting up collateral/burning their pool tokens, which is the function that increments <code>shadowPools</code>. I realise that sounds a bit convoluted, but basically <code>executeCommitment</code> and its <code>_commit</code> parameter has a direct dependency on users committing via the <code>commit</code> function, which increments <code>shadowPools</code> by the value of their commit (which they can‚Äôt game ‚Äî their collateral tokens get sent to the <code>LeveragedPool</code> contract instantly and their tokens get burned instantly and they don‚Äôt have access to those funds anymore). </p>\n<blockquote>\n<p>Also, to clarify, you‚Äôre saying you believe the code will never call <code>_uncommit</code> as it won‚Äôt ever revert, right?</p>\n</blockquote>\n<p>Yes, that‚Äôs right. It is there as a fail-safe (so that if there was some bug in a commit that stopped a commit in the queue from being executed, it wouldn‚Äôt stop the markets). We are refactoring this code nonetheless though.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955101993\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Alright from this information I understand that the underflow idea can‚Äôt happen (gas optimization there would be to use <code>unsafe</code> operations I guess)</p>\n<p>I think given the system a refactoring to send the funds back is warranted</p>\n<p>That said the fact that there seems to be no way to get a revert excludes the high severity.</p>\n<p>That leaves us with the finding either being med or low risk</p>\n<p>Low risk would be acceptable as the code doesn‚Äôt work as it suggests (<code>_uncommit</code> is never executed, and if it did it wouldn‚Äôt reimburse the user)</p>\n<p>The alternative take is Medium: if <code>_uncommit</code> where executed it would cause in a loss of funds / funds stuck</p>\n<p>As of now I‚Äôll leave it as med, while we don‚Äôt have a way to trigger <code>_uncommit</code> we can still make the claim that if <code>_uncommit</code> where to run, it wouldn‚Äôt reimburse the user</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955108907\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Going a little deeper for the sake of clarity:</p>\n<p>The math library is programmed to never revert:\n<a href=\"https://github.com/tracer-protocol/perpetual-pools-contracts/blob/646360b0549962352fe0c3f5b214ff8b5f73ba51/contracts/implementation/PoolSwapLibrary.sol#L256\">https://github.com/tracer-protocol/perpetual-pools-contracts/blob/646360b0549962352fe0c3f5b214ff8b5f73ba51/contracts/implementation/PoolSwapLibrary.sol#L256</a></p>\n<p>The amounts in commit are always greater than 0 so no revert there</p>\n<p>The pool.setter is innocuous</p>\n<p>The only thing I found is the <code>pool.quoteTokenTransfer(_commit.owner, amountOut);</code></p>\n<p>If for an unfortunate reason the pool is drained from the quoteToken and the safeTransfer fail, then the function would revert</p>\n<p>On that note the way to perform this would be to use\n<code>function setKeeper(address _keeper) external override onlyGov onlyUnpaused {</code>\nTo change the keeper to a EOA / Malicious account</p>\n<p>And then run\n<code>function payKeeperFromBalances(address to, uint256 amount)</code>\nwith the full amount (or close to it) of <code>amount &#x3C;= shortBalance + longBalance</code></p>\n<p>This seems to be a permissioned way (admin privilege) to rug funds from the LeveragedPool as well as enabling the <code>_uncommit</code> to be triggered</p>\n<p>Given these findings (which I may misunderstand, so feel free to correct me) I highly recommend the sponsor to ensure there‚Äôs a timelock for changing keeper\nAdditionally (and I may be missing something) allowing <code>payKeeperFromBalances</code> to take an indiscriminate amount of funds may prove to be a rug vector the sponsor should consider eliminating.</p>\n<p>I‚Äôm fairly confident the <a href=\"https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMathQuad.sol\">math library</a> will never revert, even if you input a high fee, which means that while the end state may be unexpected, the function can be used to rug.</p>\n<p>Highly recommend the sponsor to consider having caps on the <code>amount</code> parameter for <a href=\"https://github.com/tracer-protocol/perpetual-pools-contracts/blob/646360b0549962352fe0c3f5b214ff8b5f73ba51/contracts/implementation/LeveragedPool.sol#L111\"><code>payKeeperFromBalances</code></a> as this function seems to be the way to break the protocol (and the trust of the users)</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955112942\">rogue developer (Tracer) commented</a>:</strong></p>\n<blockquote>\n<p>@Alex the Entreprenerd Yep, that‚Äôs completely right. However (and this is something we should have made clear in an assumptions section), all markets will be deployed by the DAO/DAO multisig. You can see that the <code>payKeeperFromBalances</code> function has a modifier called <code>onlyGov</code> ‚Äî meaning only governance (the DAO/DAO multisig) can change this and that‚Äôs something that‚Äôs immutable and can‚Äôt be changed. Governance also has the ability to take quote tokens out of the <code>LeveragedPool</code> contract (with <code>withdrawQuote</code>) unlike the hack with changing the keeper (more directly this way) but we‚Äôve been going under the assumption that the only reason we‚Äôd do this is in the rescue of user funds in the case of some hack. </p>\n<p>If the governance multisig is compromised, they have the ability to do a lot of damage but we‚Äôve been going under the assumption this just won‚Äôt be the case, which I think is a safe one to make. So you‚Äôre right in that <code>uncommit</code> can send tokens to the wrong user in case the function reverts because of governance draining funds directly or via setting a malicious keeper, but I think that <code>uncommit</code> sending tokens to the wrong user is the least of problems if that happens because governance would only ever drain funds in the case of a major hack. If we‚Äôre going under the assumption that the multisig <em>can</em> easily be compromised, then the ‚Äúcentralisation‚Äù point around the DAO would be a much bigger point. </p>\n<p>I still think this should be a low/information by virtue of the fact that unless there is an underlying bug in the contracts, <code>uncommit</code> can‚Äôt be called (it may as well be dead code) ‚Äî if it gets called because governance has rugged, that is then relatively a fairly small problem because all the funds would be at risk in a much more direct way in that case.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955115864\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@rogue developer agree that if governance is malicious, the <code>_uncommit</code> path is the least problem</p>\n<p>One thing to note is that the <code>keeper</code> has the ability of trying to claim a lot of fees, and the modifier seems to be <code>onlyKeeper</code> if the keeper were to be a bot, or a human operator they would have the ability of rugging, unless the parameter <code>amount</code> was under some check (let‚Äôs say less than 1% AUM or something)</p>\n<p>I agree that you can set to the <code>PoolKeeper</code> contract which seems safe, once potential rug vector, again from governance would be to inject a high <code>gasPrice</code> via <code>setGasPrice</code> which as a <code>onlyOwner</code> modifier</p>\n<p>Contract for PoolKeeper:\n<a href=\"https://arbiscan.io/address/0x759E817F0C40B11C775d1071d466B5ff5c6ce28e#code\">https://arbiscan.io/address/0x759E817F0C40B11C775d1071d466B5ff5c6ce28e#code</a></p>\n<p>The owner is the Dev Multisig:\n<a href=\"https://arbiscan.io/address/0x0f79e82ae88e1318b8cfc8b4a205fe2f982b928a#readContract\">https://arbiscan.io/address/0x0f79e82ae88e1318b8cfc8b4a205fe2f982b928a#readContract</a></p>\n<p>This does give the Dev Multisig admin privileges and a potential for griefing at the very least if not rugging, as they could raise the gas price, and then run <code>performUpkeepSinglePool</code> which would eventually call <code>payKeeperFromBalances</code></p>\n<p>That said, this is something I‚Äôm flagging up right now and outside of the contest</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955116449\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>As per the finding at this point I believe it‚Äôs valid and at medium severity, it is not high severity due to need for existing preconditions that are not ‚Äúusual‚Äù, see definition from Gitbook:\n<code>2 ‚Äî Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</code></p>\n<p>We can agree that the pre-condition here are drastic and this finding would be the last of the protocols problems</p>\n<p>In terms of mitigation, ensuring that the funds are send back to the address that initiated the commit are more than sufficient</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/19#issuecomment-955116649\">Alex the Entreprenerd (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Per the ‚Äúmultisig privileges‚Äù above, I recommend you replace <code>owner</code> on the poolKeeper with a TimeLock as in it‚Äôs current state, the gasPrice may be a way to rug funds from depositors</p>\n</blockquote>\n<h1 id=\"low-risk-findings-4\" style=\"position:relative;\"><a href=\"#low-risk-findings-4\" aria-label=\"low risk findings 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk Findings (4)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/7\">[L-01] Contradiction in comment/require statement</a> <em>Submitted by loop</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/20\">[L-02] No ERC20 <code>safeApprove</code> versions called</a> <em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/13\">[L-03] Revert in <code>poolUpkeep</code></a> <em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/26\">[L-04] <code>PoolKeeper.sol#performUpkeepSinglePool()</code> Wrong implementation allows attacker to interfere the upkeep of pools</a> <em>Submitted by WatchPug</em>.</li>\n</ul>\n<h1 id=\"non-critical-findings-11\" style=\"position:relative;\"><a href=\"#non-critical-findings-11\" aria-label=\"non critical findings 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-Critical Findings (11)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/33\">[N-01] Unused imports</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/5\">[N-02] No constant for maximum tip (PoolKeeper.sol)</a> <em>Submitted by ye0lde</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/4\">[N-03] Unused modifer ‚ÄúonlyFeeReceiver‚Äù in LeveragedPool.sol</a> <em>Submitted by ye0lde</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/2\">[N-04] Unused local variable in  _latestRoundData (ChainlinkOracleWrapper.sol)</a> <em>Submitted by ye0lde</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/38\">[N-05] Style issues</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/29\">[N-06] Inclusive check of frontRunning > updateInterval</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/9\">[N-07] PoolKeeper _gasPrice description says in ETH, but is calculated in wei</a> <em>Submitted by loop</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/30\">[N-08] BLOCK_TIME of Arbitrum is less than 13 seconds</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/21\">[N-09] Validate max fee</a> <em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/14\">[N-10] Unsafe <code>int256</code> casts in <code>executePriceChange</code></a> <em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/11\">[N-11] Missing parameter validation</a> <em>Submitted by cmichel, also found by loop</em>.</li>\n</ul>\n<h1 id=\"gas-optimizations-12\" style=\"position:relative;\"><a href=\"#gas-optimizations-12\" aria-label=\"gas optimizations 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations (12)</h1>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/6\">[G-01] Unused Named Returns Can Be Removed</a> <em>Submitted by ye0lde</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/3\">[G-02] Minimize Storage Slots (LeveragedPool.sol)</a> <em>Submitted by ye0lde</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/37\">[G-03] token out of range check can be simplified</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/36\">[G-04] Useless multiplication by 1</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/27\">[G-05] Adding unchecked directive can save gas</a> <em>Submitted by WatchPug, also found by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/32\">[G-06] Immutable state variables</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/31\">[G-07] Unused state variables</a> <em>Submitted by pauliax</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/10\">[G-08] LeveragedPool has require statements which are also checked in library</a> <em>Submitted by loop</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/22\">[G-09] Gas: Inefficient modulo computation</a> <em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/16\">[G-10] Gas: <code>transferGovernance</code> can save an sload</a> <em>Submitted by cmichel</em>.</li>\n<li><a href=\"https://github.com/code-423n4/2021-10-tracer-findings/issues/12\">[G-11] Gas: shadow pools are only required for burn types</a> <em>Submitted by cmichel</em>.</li>\n</ul>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#medium-risk-findings-3\">Medium Risk Findings (3)</a></p>\n<ul>\n<li><a href=\"#m-01-wrong-keeper-reward-computation\">[M-01] Wrong keeper reward computation</a></li>\n<li><a href=\"#m-02-deposits-dont-work-with-fee-on-transfer-tokens\">[M-02] Deposits don‚Äôt work with fee-on transfer tokens</a></li>\n<li><a href=\"#m-03-uncommit-sends-tokens-to-the-wrong-user\">[M-03] <code>uncommit</code> sends tokens to the wrong user</a></li>\n</ul>\n</li>\n<li><a href=\"#low-risk-findings-4\">Low Risk Findings (4)</a></li>\n<li><a href=\"#non-critical-findings-11\">Non-Critical Findings (11)</a></li>\n<li><a href=\"#gas-optimizations-12\">Gas Optimizations (12)</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}