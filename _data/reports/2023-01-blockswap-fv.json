{
  "circa": {
    "title": "Blockswap Formal Verification Contest with Certora",
    "sponsor": "Blockswap",
    "slug": "2023-01-blockswap-fv",
    "date": "2023-05-04",
    "findings": "https://github.com/code-423n4/2023-01-blockswap-fv-findings/issues",
    "contest": 205
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 formal verification contest is an event in partnership with Certora Inc. in which community participants, referred to as Wardens, use formal verification tools to mathematically prove the correctness of a program or system in exhange for a bounty provided by sponsoring projects.</p>\n<p>During the formal verification contest outlined in this document, Wardens utilized the Certora Prover (verification tool) to conduct formal verification of the Blockswap smart contract system. The formal verification contest took place between January 19—February 02 2023.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>23 Wardens contributed reports to the Blockswap Formal Verification contest:</p>\n<ol>\n<li><a href=\"https://twitter.com/KoolexC\">Koolex</a></li>\n<li>neumo</li>\n<li><a href=\"https://twitter.com/jessicapointing\">jessicapointing</a></li>\n<li>eighty</li>\n<li><a href=\"https://twitter.com/BowTiedDravee\">Dravee</a></li>\n<li>Apocalypto (cRat1st0s, reassor, and M0ndoHEHE)</li>\n<li>Saintcode_</li>\n<li>abhi512</li>\n<li>PPrieditis</li>\n<li><a href=\"https://twitter.com/quiark\">Quiark</a></li>\n<li>horsefacts</li>\n<li>zapaz</li>\n<li>Junnon</li>\n<li><a href=\"https://twitter.com/slvDev\">slvDev</a></li>\n<li><a href=\"https://twitter.com/gzeon\">gzeon</a></li>\n<li><a href=\"https://100proof.org\">100proof</a></li>\n<li>carrotsmuggler</li>\n<li>stent</li>\n<li><a href=\"https://twitter.com/bahoz_eth\">BAHOZ</a></li>\n<li><a href=\"http://twitter.com/coqlover\">coqlover</a></li>\n<li>Zarf</li>\n</ol>\n<p>This contest was judged by <a href=\"https://www.certora.com/\">Certora Inc.</a></p>\n<p>Final report assembled by <a href=\"https://twitter.com/liveactionllama\">liveactionllama</a>.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p><em>Note: during a C4 formal verification contest, Wardens can uncover both “injected bugs” and “real bugs”. This report will focus on the latter.</em></p>\n<p>The C4 formal verification contest yielded an aggregated total of 6 unique vulnerabilities. Of these vulnerabilities, 0 received a risk rating in the category of HIGH severity and 6 received a risk rating in the category of MEDIUM severity.</p>\n<p>All of the issues are presented below.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found linked within the <a href=\"https://github.com/code-423n4/2023-01-blockswap-fv\">C4 Blockswap Formal Verification contest repository</a>, and is composed of 1 smart contract written in the Solidity programming language and includes 402 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>Teryanarmen from Certora Inc. judged this C4 formal verification contest, and assessed severity of disclosed vulnerabilities based on two primary risk categories: high and medium.</p>\n<p>For more information regarding the severity criteria for these two categories, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>, specifically our section on <a href=\"https://docs.code4rena.com/awarding/judging-criteria/severity-categorization\">Severity Categorization</a>.</p>\n<h1 id=\"medium-risk-findings-6\" style=\"position:relative;\"><a href=\"#medium-risk-findings-6\" aria-label=\"medium risk findings 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (6)</h1>\n<h2 id=\"m-01\" style=\"position:relative;\"><a href=\"#m-01\" aria-label=\"m 01 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[M-01]</h2>\n<p><em>Submitted by Dravee</em></p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>DOS when using <code>addPriorityStakers</code> with two consecutive addresses badly ordered <code>(address a2 &#x3C; address a1)</code>, which can be quite frequent (50% chance).</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>There’s the following condition in the <code>_addPriorityStakers</code> function at <a href=\"https://github.com/Certora/2023-01-blockswap-fv/blob/certora/certora/munged/syndicate/Syndicate.sol#L626\">L626</a>:</p>\n<p>File: Syndicate.sol</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">623:         for (uint256 i; i &lt; numOfStakers; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">624:             address staker = _priorityStakers[i];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">625: </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">626:             if (i &gt; 0 &amp;&amp; staker &lt; _priorityStakers[i-1]) revert DuplicateArrayElements(); </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">627: </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">628:             isPriorityStaker[staker] = true; </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">629: </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">630:             emit PriorityStakerRegistered(staker);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">631:         }</span></span></code></pre>\n<p>As we can see here, after the index 0, it will revert if the address at index i is less than the address at index i - 1, which is quite an odd condition. Additionally, the custom error is <code>DuplicateArrayElements</code>, which doesn’t match with what the written condition is checking.</p>\n<p>When adding, as an example, any 2 addresses as Priority Stakers, whether one address is computed to be greater or less than the previous one shouldn’t matter (any permutation of those 2 addresses should enable these 2 addresses to be added as Priority Stakers). We can guess here that the condition was badly implemented, making so that adding a list of Priority Stakers has a 50% chance of failing.</p>\n<p>You can try the following on Remix by inputting 2 random addresses and see that this can be true or false depending on the order, hence the 50% chance of failure claim:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">    function addrCompare(address a1, address a2) external pure returns (bool) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return a1 &lt; a2;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span></code></pre>\n<p>The following rule catches it as it’s unreachable with the bug (original code), and passes without it (suggested remediation):</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">rule addingTwoDifferentPriorityStackers(address _priorityStaker1, address _priorityStaker2) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Excluding address(0)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(_priorityStaker1 != 0 &amp;&amp; _priorityStaker2 != 0);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Avoiding duplicates and making sure the address at index i - 1 is greater than the address at index i</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(_priorityStaker1 &gt; _priorityStaker2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Making sure they aren&#39;t already Priority Stakers</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require(!isPriorityStaker(_priorityStaker1) &amp;&amp; !isPriorityStaker(_priorityStaker2));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    env e;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Adding any 2 Priority stakers address</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    addPriorityStakers(e, _priorityStaker1, _priorityStaker2);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // The rule will fail due to this assertion being unreachable with the bug</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    assert(true, &quot;This is unreacheable&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>My guess is that here, the developer wanted to somehow report that the address list contains a mistake.</p>\n<p>However, here, even if there were duplicates in the array, this wouldn’t change anything regarding the final state (just some gas would be wasted with multiple SSTOREs). I’d advise against checking if the value is already set in storage before writing to it, as multiple SLOADs can make the function call quite gas heavy very fast.</p>\n<p>The real condition was probably intended to be “if the staker’s index isn’t equal to the current index then revert”, but for that you’d need a way to fetch an index in an array (like JavaScript’s indexOf), which isn’t the case in Solidity.</p>\n<p>The simplest and best solution here is simply to remove the line:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">File: Syndicate.sol</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">623:         for (uint256 i; i &lt; numOfStakers; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">624:             address staker = _priorityStakers[i];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">625: </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">- 626:             if (i &gt; 0 &amp;&amp; staker &lt; _priorityStakers[i-1]) revert DuplicateArrayElements(); </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">627: </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">628:             isPriorityStaker[staker] = true; </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">629: </span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">630:             emit PriorityStakerRegistered(staker);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">631:         }</span></span></code></pre>\n<p>Again, there’s no impact besides wasting gas in adding a Priority Staker multiple times, so this revert shouldn’t exist in my opinion</p>\n<p><strong>vince0656 (Blockswap) commented:</strong><br></p>\n<blockquote>\n<p>Assessment: Low/Medium</p>\n<p>We will instead check <code>isPriorityStaker[staker]</code> and revert if true - thanks.</p>\n</blockquote>\n<p><strong>Dravee (warden) commented:</strong><br></p>\n<blockquote>\n<p>Hey there @vince0656,</p>\n<p>Just curious: why revert at all? There’s no harm in writing several times in storage <code>isPriorityStaker[staker]</code> = true with a wrong input. However, “checking <code>isPriorityStaker[staker]</code> and revert if true” will penalize every caller as all these storage reading operations are expensive.</p>\n<p>I don’t believe the happy path should cost more gas just to prevent an unhappy one.</p>\n<p>But that’s really just a suggestion on the remediation.</p>\n<p>Edit:<br>\nI’ll also add here that a DOS (it can be worked around here but this is still a degraded functionality, with a damaged availability) is Medium Severity usually on code4rena’s documentation, not low, due to “the function of the protocol or its availability could be impacted”:</p>\n<blockquote>\n<p>2 — Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</p>\n</blockquote>\n<p>I also ask here if you could please reconsider this as just Medium 👍. Of course, I’ll accept any final decision you make.</p>\n</blockquote>\n<p><strong>teryanarmen (Certora) commented:</strong><br></p>\n<blockquote>\n<p>I think there are two separate issues here. I believe the failure to check for duplicate entries is Low/Informational severity as having duplicates in the <code>_priorityStakers</code> array has no effect on the protocol. The check being unnecessary and causing a DOS to me is medium severity.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-02\" style=\"position:relative;\"><a href=\"#m-02\" aria-label=\"m 02 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[M-02]</h2>\n<p><em>Submitted by Koolex</em></p>\n<h3 id=\"summary-1\" style=\"position:relative;\"><a href=\"#summary-1\" aria-label=\"summary 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h3>\n<p>Deregistering inactive knot via calling deRegisterKnots directly by the Syndicate owner always reverts.</p>\n<h3 id=\"description\" style=\"position:relative;\"><a href=\"#description\" aria-label=\"description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Description</h3>\n<p><strong>Actual Behaviour &#x26; Impact</strong><br>\nThe liquid staking manager (Syndicate owner) calls <code>deRegisterKnots</code> function to deregister knots. However, if any of those knots is inactive, the transaction will revert. This means in order to deregister an inactive knot, one should call <code>updateCollateralizedSlotOwnersAccruedETH</code> function since it calls internal <code>_deRegisterKnots</code>.</p>\n<p><strong>Expected Behaviour</strong><br>\nDeregistering knots by Syndicate owner should succeed especially if the knot is inactive.</p>\n<p><strong>Cause</strong><br>\nThere is a circular dependency between deRegisterKnots and <code>_updateCollateralizedSlotOwnersLiabilitySnapshot</code> functions which leads to this behaviour.</p>\n<p><code>deRegisterKnots</code> always calls internally <code>_updateCollateralizedSlotOwnersLiabilitySnapshot</code>, and <code>_updateCollateralizedSlotOwnersLiabilitySnapshot</code> calls <code>_deRegisterKnot</code> in case the knot is inactive. So when the knot is deregistered the first time, the second time it reverts.</p>\n<p><a href=\"https://github.com/koolexcrypto/2023-01-blockswap-fv-private/blob/certora/contracts/syndicate/Syndicate.sol#L571\">https://github.com/koolexcrypto/2023-01-blockswap-fv-private/blob/certora/contracts/syndicate/Syndicate.sol#L571</a></p>\n<p><a href=\"https://github.com/koolexcrypto/2023-01-blockswap-fv-private/blob/certora/contracts/syndicate/Syndicate.sol#L641\">https://github.com/koolexcrypto/2023-01-blockswap-fv-private/blob/certora/contracts/syndicate/Syndicate.sol#L641</a></p>\n<h3 id=\"property-violated\" style=\"position:relative;\"><a href=\"#property-violated\" aria-label=\"property violated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property Violated</h3>\n<p><code>isNoLongerPartOfSyndicate</code> is not set to true since the function reverts.</p>\n<h3 id=\"detected-by\" style=\"position:relative;\"><a href=\"#detected-by\" aria-label=\"detected by permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Detected by</h3>\n<p>Rule <code>deregisterInactiveKnotShouldSucceed()</code></p>\n<p><strong>vince0656 (Blockswap) commented:</strong><br></p>\n<blockquote>\n<p>Assessment: Medium/High</p>\n<p>We have made sure the logic will not revert when deregistering an inactive knot.</p>\n</blockquote>\n<p><strong>teryanarmen (Certora) commented:</strong><br></p>\n<blockquote>\n<p>Since inactive knots can still be deregistered by calling updateCollateralizedSlotOwnersAccruedETH, I believe this is medium severity.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03\" style=\"position:relative;\"><a href=\"#m-03\" aria-label=\"m 03 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[M-03]</h2>\n<p><em>Submitted by jessicapointing, also found by Koolex</em></p>\n<h3 id=\"description-of-the-problem\" style=\"position:relative;\"><a href=\"#description-of-the-problem\" aria-label=\"description of the problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Description of the problem</h3>\n<p>A comment in Syndicate.sol states that “Basically, under a rage quit or voluntary withdrawal from the beacon chain, the knot kick is auto-propagated to syndicate”. However, when a KNOT is inactive, the KNOT can still remain part of the syndicate and isn’t automatically removed from the syndicate.</p>\n<h3 id=\"expected-behaviour\" style=\"position:relative;\"><a href=\"#expected-behaviour\" aria-label=\"expected behaviour permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expected Behaviour</h3>\n<p>After calling any function, an <code>inActive</code> KNOT should become no longer part of the syndicate.</p>\n<h3 id=\"actual-behaviour-of-the-system\" style=\"position:relative;\"><a href=\"#actual-behaviour-of-the-system\" aria-label=\"actual behaviour of the system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actual behaviour of the system</h3>\n<p>An inactive KNOT can still be part of the syndicate.</p>\n<p>In this rule, the <code>isActive</code> state of the KNOT is set to false and a function is called and the <code>isNoLongerPartOfSyndicate</code> state is checked.</p>\n<p>Property Violated: <code>inactiveKnotShouldNoLongerBePartOfSyndicate</code></p>\n<p><strong>vince0656 (Blockswap) commented:</strong><br></p>\n<blockquote>\n<p>Our assessment: Medium severity</p>\n<p>We will expose a function for anyone to poke the syndicate when a knot becomes inactive which will then kick them from the syndicate.</p>\n</blockquote>\n<p><strong>teryanarmen (Certora) commented:</strong><br></p>\n<blockquote>\n<p>This seems out of scope as a knot is made inactive outside of the syndicate and we should assume that the external contract will deregister the appropriate knot when they are made inactive.</p>\n</blockquote>\n<p><strong>teryanarmen (Certora) commented:</strong><br></p>\n<blockquote>\n<p>Actually since the protocol doesn’t poke Syndicate directly and Syndicate is responsible for deregistering knots once they are inActive, failing to do so can lead to value being leaked from active and registered knots on a syndicate to inactive and registered knots. Since this leak is stopped when collateralizedSLOT owners claim fees and can be triggered freely by anyone, the bug is medium severity.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04\" style=\"position:relative;\"><a href=\"#m-04\" aria-label=\"m 04 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[M-04]</h2>\n<p><em>Submitted by eighty</em></p>\n<h3 id=\"short-description\" style=\"position:relative;\"><a href=\"#short-description\" aria-label=\"short description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Short description</h3>\n<p>Some rewards for free floating shares users could become unclaimable if the user is not careful when unstaking from a knot.</p>\n<h3 id=\"elaborative-explanation-of-the-bug-and-an-attack-case-example\" style=\"position:relative;\"><a href=\"#elaborative-explanation-of-the-bug-and-an-attack-case-example\" aria-label=\"elaborative explanation of the bug and an attack case example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elaborative explanation of the bug and an attack case example</h3>\n<p>When staking on a given knot, the protocol prevents staking amounts fewer than 1 gwei. Additionally, when unstaking, there’s a check against unstaking amounts greater than the amounts allowed (at <a href=\"https://github.com/pvgo80/2023-01-blockswap-fv-private/blob/certora/contracts/syndicate/Syndicate.sol#L263\">263</a>), but there’s no check on the remaining amount. Thus, this leaves open scenarios where the user may leave less than 1 gwei on a knot. In such cases, the user cannot claim additional earnings due to the following calls: <a href=\"https://github.com/pvgo80/2023-01-blockswap-fv-private/blob/certora/contracts/syndicate/Syndicate.sol#L679\">679</a> - <a href=\"https://github.com/pvgo80/2023-01-blockswap-fv-private/blob/certora/contracts/syndicate/Syndicate.sol#L693\">693</a> - <a href=\"https://github.com/pvgo80/2023-01-blockswap-fv-private/blob/certora/contracts/syndicate/Syndicate.sol#L370\">370</a>.</p>\n<h3 id=\"additional-reasoning\" style=\"position:relative;\"><a href=\"#additional-reasoning\" aria-label=\"additional reasoning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional reasoning</h3>\n<p>The user could “restake” his position on a knot, but there’s a (short) limit of 12 eth that could be filled by anyone.<br>\nA Knot could become inactive, making future rewards forever inaccessible.<br>\nThe user could recover the smalls staked amounts, but he’ll not be compensated by accrued earnings.<br>\nProperty violated.</p>\n<p>Rule <code>issue2_unstakingLeavesSmallAmountsBehind</code> in <code>M002.spec</code>, regarding the possibility of small stakes.<br>\nRule <code>issue2_ifTheUserHasClaimableAmountsHeShouldBeAbleToClaimIt</code> in <code>M002.spec</code> regarding the rewards unclaimable.</p>\n<h3 id=\"mitigation\" style=\"position:relative;\"><a href=\"#mitigation\" aria-label=\"mitigation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mitigation</h3>\n<p>Prevent unstaking shares when the amount remaining is less than 1 gwei.</p>\n<p><strong>vince0656 (Blockswap) commented:</strong><br></p>\n<blockquote>\n<p>Assessment: Low/Medium</p>\n<p>We will remove the check on the minimum amount that must be unstaked to avoid this. Thanks.</p>\n</blockquote>\n<p><strong>teryanarmen (Certora) commented:</strong><br></p>\n<blockquote>\n<p>I believe this is medium severity as the protocol leaks funds but major funds are not at risk.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05\" style=\"position:relative;\"><a href=\"#m-05\" aria-label=\"m 05 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[M-05]</h2>\n<p><em>Submitted by jessicapointing</em></p>\n<h3 id=\"description-of-the-problem-1\" style=\"position:relative;\"><a href=\"#description-of-the-problem-1\" aria-label=\"description of the problem 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Description of the problem</h3>\n<p>An inactive KNOT can successfully stake.</p>\n<p>Expected behaviour of the system: The stake function should revert if an inactive KNOT is trying to stake.</p>\n<p>Actual behaviour of the system: The stake function succeeds and the inactive KNOT stakes.</p>\n<p>Property Violated: <code>cannotStakeIfKnotIsInActive</code></p>\n<p>In this rule, the <code>isActive</code> state of the <code>blsPubKey</code> is set to <code>false</code>. The stake function is then called with this <code>blsPubKey</code> and the expected behaviour is that the function would revert because the KNOT is inactive. However, the stake function succeeds and an inactive KNOT can therefore successfully stake. The stake function checks if KNOT is not registered (<code>!isKNOTRegistered</code>) and if it is no longer part of the syndicate (<code>!isNoLongerPartOfSyndicate</code>) and reverts accordingly but does not check whether the KNOT is inactive.</p>\n<p>Lines of code: <a href=\"https://github.com/Certora/2023-01-blockswap-fv/blob/certora/contracts/syndicate/Syndicate.sol#L216\">https://github.com/Certora/2023-01-blockswap-fv/blob/certora/contracts/syndicate/Syndicate.sol#L216</a></p>\n<h3 id=\"potential-fix\" style=\"position:relative;\"><a href=\"#potential-fix\" aria-label=\"potential fix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Potential Fix</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(,,,,,bool isActive) = getStakeHouseUniverse().stakeHouseKnotInfo(blsPubKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">if (!isKnotRegistered[_blsPubKey] || isNoLongerPartOfSyndicate[_blsPubKey] || !isActive) revert KnotIsNotRegisteredWithSyndicate();</span></span></code></pre>\n<p><strong>jessicapointing (warden) commented:</strong><br></p>\n<p>The principle found here can be applied to other functions in the code which reveal potentially more bugs. In other words, just as I have pointed out here that an <code>inActive</code> KNOT can successfully call stake and succeed, an <code>inActive</code> KNOT (or <code>!isKnotRegistered</code> or <code>isNoLongerPartOfSyndicate</code> KNOT) can successfully call other functions it shouldn’t be able to and succeed. To fix these bugs, check the <code>isActive</code>/<code>isKnotRegistered</code>/<code>isNoLongerPartOfSyndicate</code> state of a KNOT before executing the function. Maybe the lack of checks are intentional because inactive/deregistered knots can still call some functions but I’m including them here for completeness and in case they shouldn’t be able to execute such functions. Here are some of the other functions and lines of code:</p>\n<p><a href=\"https://github.com/Certora/2023-01-blockswap-fv/blob/certora/contracts/syndicate/Syndicate.sol#L269\"><code>unstake</code>:</a><br>\n<code>isActive</code> and <code>isKnotRegistered</code> is not checked.</p>\n<p><a href=\"https://github.com/Certora/2023-01-blockswap-fv/blob/certora/contracts/syndicate/Syndicate.sol#L310\"><code>claimAsCollateralizedSLOTOwner</code>:</a><br>\n<code>isActive</code> and <code>isNoLongerPartOfSyndicate</code> is not checked.</p>\n<p><a href=\"https://github.com/Certora/2023-01-blockswap-fv/blob/certora/contracts/syndicate/Syndicate.sol#L537\"><code>_updateCollateralizedSlotOwnersLiabilitySnapshot</code>:</a><br>\n<code>isActive</code> and <code>isKnotRegistered</code> is not checked.</p>\n<p><a href=\"https://github.com/Certora/2023-01-blockswap-fv/blob/certora/contracts/syndicate/Syndicate.sol#L691\"><code>_claimAsStaker</code>:</a><br>\n<code>isActive</code> and <code>isNoLongerPartOfSyndicate</code> is not checked.</p>\n<p><strong>vince0656 (Blockswap) commented:</strong><br></p>\n<blockquote>\n<p>Assessment: Low severity because if you stake without an active knot, you don’t earn rewards but you can always get your stake back.</p>\n<p>We will check for active status when staking - thanks.</p>\n</blockquote>\n<p><strong>teryanarmen (Certora) commented:</strong><br></p>\n<blockquote>\n<p>Inactive knots can earn rewards since all rewards are compiled together, but since deregistering a knot is done when the collateralized staker claims rewards and can be triggered at any time by anyone I think this is medium severity.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-06\" style=\"position:relative;\"><a href=\"#m-06\" aria-label=\"m 06 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[M-06]</h2>\n<p><em>Submitted by neumo</em></p>\n<h3 id=\"summary-2\" style=\"position:relative;\"><a href=\"#summary-2\" aria-label=\"summary 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h3>\n<p>Whenever a knot is deregistered, the last value of <code>accumulatedETHPerFreeFloatingShare</code> is stored in the mapping <code>lastAccumulatedETHPerFreeFloatingShare</code>. The accumulated value must be updated always before deregistering the knot, otherwise stakers of the knot could receive less ETH than they should when claiming/unstaking. A rule allowed me to detect two functions that violate this property.</p>\n<h3 id=\"explanation\" style=\"position:relative;\"><a href=\"#explanation\" aria-label=\"explanation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explanation</h3>\n<p>Function <code>_deRegisterKnot</code> is in charge of marking a knot as <code>isNoLongerPartOfSyndicate</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">/// @dev Business logic for de-registering a specific knots assuming all accrued ETH has been processed</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">function _deRegisterKnot(bytes memory _blsPublicKey) internal {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tif (isKnotRegistered[_blsPublicKey] == false) revert KnotIsNotRegisteredWithSyndicate();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tif (isNoLongerPartOfSyndicate[_blsPublicKey] == true) revert KnotHasAlreadyBeenDeRegistered();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t// We flag that the knot is no longer part of the syndicate</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tisNoLongerPartOfSyndicate[_blsPublicKey] = true;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t// For the free floating and collateralized SLOT of the knot, snapshot the accumulated ETH per share</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tlastAccumulatedETHPerFreeFloatingShare[_blsPublicKey] = accumulatedETHPerFreeFloatingShare;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t// We need to reduce `totalFreeFloatingShares` in order to avoid further ETH accruing to shares of de-registered knot</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\ttotalFreeFloatingShares -= sETHTotalStakeForKnot[_blsPublicKey];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t// Total number of registered knots with the syndicate reduces by one</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tnumberOfRegisteredKnots -= 1;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\temit KnotDeRegistered(_blsPublicKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>We can see it snapshots the current value of <code>accumulatedETHPerFreeFloatingShare</code> in the mapping <code>lastAccumulatedETHPerFreeFloatingShare</code>. This is because all claiming/unstaking on an unregistered knot should take into account the accrued ETH up to the time of deregistering. So it means, that <code>accumulatedETHPerFreeFloatingShare</code> must be up to date every time a knot is deregistered.</p>\n<p>I wrote the following rule to test if this property holds after every call of the contract:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">rule lastAccumulatedETHPerFreeFloatingShareMustAccountForAccruedETH(method f) filtered {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    f -&gt; notHarnessCall(f)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}{</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    env e;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    bytes32 blsPubKey;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require isKnotRegistered(blsPubKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require !isNoLongerPartOfSyndicate(blsPubKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require lastAccumulatedETHPerFreeFloatingShare(blsPubKey) == 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    calldataarg args;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    f(e, args);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    require isNoLongerPartOfSyndicate(blsPubKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    updateAccruedETHPerShares(e);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    assert lastAccumulatedETHPerFreeFloatingShare(blsPubKey) == accumulatedETHPerFreeFloatingShare(), &quot;Knot deregistered, but lastAccumulatedETHPerFreeFloatingShare has a wrong value&quot;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Basically what it does is:</p>\n<ul>\n<li>Ensure that the knot with <code>blsPubKey</code> is registered</li>\n<li>Ensure that it is part of Syndicate</li>\n<li>Ensure that <code>lastAccumulatedETHPerFreeFloatingShare</code> for the knot is zero.</li>\n<li>Execute a call to any function of the contract</li>\n<li>Ensure that after the call, the knot has been deregistered (<code>isNoLongerPartOfSyndicate = true</code>)</li>\n<li>Call update accrued ETH per shares</li>\n<li>Assert that <code>lastAccumulatedETHPerFreeFloatingShare</code> of the knot is equal to <code>accumulatedETHPerFreeFloatingShare</code></li>\n</ul>\n<p>If the rule fails, we can affirm that <code>accumulatedETHPerFreeFloatingShare</code> was not up to date, because the call to <code>updateAccruedETHPerShares</code> should not change its value.</p>\n<p>But I found calls to these two functions make the rule fail:</p>\n<ul>\n<li><code>updateCollateralizedSlotOwnersAccruedETH</code></li>\n<li><code>batchUpdateCollateralizedSlotOwnersAccruedETH</code></li>\n</ul>\n<p>That is because these two functions don’t call <code>updateAccruedETHPerShares</code> and they call <code>_updateCollateralizedSlotOwnersLiabilitySnapshot</code>, which also does not call the update accrued ETH function. But this last function can deregister the knot (if it is not active in Stakehouse, see <a href=\"https://github.com/Certora/2023-01-blockswap-fv/blob/certora/contracts/syndicate/Syndicate.sol#L570-L572\">https://github.com/Certora/2023-01-blockswap-fv/blob/certora/contracts/syndicate/Syndicate.sol#L570-L572</a>).</p>\n<p>The impact of this issue is the loss of part of the rewards for the affected stakers, because their share of rewards will be calculated with an old value of the accrued rewards, which is for sure less than it should be (as accumulatedETHPerFreeFloatingShare cannot decrease, as I checked in another rule).</p>\n<h3 id=\"impact-1\" style=\"position:relative;\"><a href=\"#impact-1\" aria-label=\"impact 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>High impact, because it implies loss of funds for stakers of the protocol.</p>\n<h3 id=\"property-violated-1\" style=\"position:relative;\"><a href=\"#property-violated-1\" aria-label=\"property violated 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property violated</h3>\n<p>After a knot state goes from <code>isNoLongerPartOfSyndicate[blsPubKey] == false</code> to <code>isNoLongerPartOfSyndicate[blsPubKey] == true</code> the value stored at <code>lastAccumulatedETHPerFreeFloatingShare[blsPubKey]</code> should be always equal to the up to date value of <code>accumulatedETHPerFreeFloatingShare</code>.</p>\n<h3 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Call <code>updateAccruedETHPerShares</code> inside functions <code>updateCollateralizedSlotOwnersAccruedETH</code> and <code>batchUpdateCollateralizedSlotOwnersAccruedETH</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">function updateCollateralizedSlotOwnersAccruedETH(blsKey _blsPubKey) public { // MUNGED internal =&gt; public</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tupdateAccruedETHPerShares();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t_updateCollateralizedSlotOwnersLiabilitySnapshot(_blsPubKey);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">function batchUpdateCollateralizedSlotOwnersAccruedETH(blsKey[] memory _blsPubKeys) public { // MUNGED internal =&gt; public</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tuint256 numOfKeys = _blsPubKeys.length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tif (numOfKeys == 0) revert EmptyArray();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tupdateAccruedETHPerShares();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\tfor (uint256 i; i &lt; numOfKeys; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t\t_updateCollateralizedSlotOwnersLiabilitySnapshot(_blsPubKeys[i]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\t}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p><strong>vince0656 (Blockswap) commented:</strong><br></p>\n<blockquote>\n<p>Assessment: Medium</p>\n<p>Thank you - we have fixed this issue in the Syndicate contract.</p>\n</blockquote>\n<p><strong>teryanarmen (Certora) commented:</strong><br></p>\n<blockquote>\n<p>In the case that a knot successfully validates a block and earns rewards, becomes inactive and is deregistered through <code>updateCollateralizedSlotOwnersAccruedETH</code> or <code>batchupdateCollateralizedSlotOwnersAccruedETH</code>, all without any other interaction with Syndicate which calls <code>updateAccruedETHPerShares</code> method, the the stakers of the knot would not be able to claim these rewards and further those funds will be locked in the contract. Since this vulnerability leads to non-negligible loss of funds I believe it is high severity.</p>\n<p>One comment, @neumo why did you choose to add</p>\n<p>require <code>lastAccumulatedETHPerFreeFloatingShare(blsPubKey) == 0;</code><br></p>\n<p>instead of just storing the output of <code>lastAccumulatedETHPerFreeFloatingShare(blsPubKey)</code> in a variable before the call to <code>updateAccruedETHPerShares</code> and asserting that the variable was equal to <code>accumulatedETHPerFreeFloatingShare()</code>? Seems to unnecessarily limit the scope.</p>\n</blockquote>\n<p><strong>neumo (warden) commented:</strong></p>\n<blockquote>\n<p>@teryanarmen - My reasoning was to assure that before calling the function the value of <code>lastAccumulatedETHPerFreeFloatingShare</code> was 0 because that is the value registered knots have. In fact its value is only set in one place (function <code>_deRegisterKnot</code>), so I guessed it was safe (and less computationally intensive for the rule) to assume it to be zero before the call. Your approach is also valid too, of course. And even removing the require should work too because, ultimately, the value before the call does not matter, what is important is that after the call to <code>updateAccruedETHPerShares</code> the assert still holds.</p>\n<p>I hope I answered your question!</p>\n</blockquote>\n<p><strong>teryanarmen (Certora) commented:</strong><br></p>\n<blockquote>\n<p>I actually think this is a medium severity since assets can’t be lost or stolen directly and have some external dependencies such as validating a block at the right time and no one calling <code>updateAccruedETHPerShares</code>.</p>\n</blockquote>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Contests incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Contest submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#medium-risk-findings-6\">Medium Risk Findings (6)</a></p>\n<ul>\n<li><a href=\"#m-01\">M-01</a></li>\n<li><a href=\"#m-02\">M-02</a></li>\n<li><a href=\"#m-03\">M-03</a></li>\n<li><a href=\"#m-04\">M-04</a></li>\n<li><a href=\"#m-05\">M-05</a></li>\n<li><a href=\"#m-06\">M-06</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}